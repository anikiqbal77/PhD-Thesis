%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Fig_compare.pdf
%%Creator: Adobe Acrobat 10.1.10
%%For: mkhodas
%%CreationDate: 8/17/14, 6:19 PM
%%BoundingBox: 0 0 291 540
%%HiResBoundingBox: 0 0 290.1711 539.9976
%%CropBox: 0 0 290.1711 539.9976
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 972 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-08-17T23:18:09Z"
   xmp:CreatorTool="Microsoft PowerPoint"
   xmp:ModifyDate="2014-08-17T18:19:43-05:00"
   xmp:MetadataDate="2014-08-17T18:19:43-05:00"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.6.8 Quartz PDFContext"
   xmpMM:DocumentID="uuid:59ed8c3f-38cd-114e-ac22-1b2190b38873"
   xmpMM:InstanceID="uuid:2ddebd5d-edf3-c64b-8f01-a39129230094">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Maxim Khodas</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -539.998 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 539.998 li
290.171 539.998 li
290.171 0 li
cp
clp
0 540 mo
720 540 li
720 6.10351e-05 li
0 6.10351e-05 li
cp
false sop
0 0 0 0 cmyk
ef
gsave
44.025 145.313 mo
276.741 145.313 li
276.741 1.4632 li
44.025 1.4632 li
cp
clp
44.025 9.31311 mo
276.741 9.31311 li
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
3.09 lw
0 lc
0 lj
3.25 ml
[13 10 ] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
grestore
gsave
44.025 12.0071 mo
46.2844 12.0071 li
46.2844 6.73517 li
44.025 6.73517 li
cp
clp
.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: GHTAAA+Mathematica3 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /GHTAAA+Mathematica3 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /SolidCircle putdef/UniqueID 5095645 def/FontBBox {-109 -231 966 869} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-107 -91 505 527 596 612] def/BlueScale 0.0454559 def/StdHW [34] def/StdVW [34] def/StemSnapH [34 66] def/StemSnapV [34 65] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/SolidCircle <1C60D8A8C9B60287CF08F7BF563CAAD6E08EFD6DAA142CC7220408DECF2B61045B377CC2E5343FEE4BB07E6944D948E0191385507B98AE> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARQW+Mathematica3 /GHTAAA+Mathematica3 findfont ct_VMDictPut/RQARQW+Mathematica3*1 [/.notdef /SolidCircle 254{/.notdef}rp]RQARQW+Mathematica3 nfRQARQW+Mathematica3*1 [3.76562 0 0 -3.76569 0 0 ]msf42.6709 10.4428 mo(\001)sh42.6709 10.4428 mo(\001)sh42.6709 10.4428 mo(\001)sh42.6709 10.4428 mo(\001)sh42.6709 10.4428 mo(\001)shgrestore
gsave
7.87504 181 mo
279 181 li
279 1.00012 li
7.87504 1.00012 li
cp
clp
.895628 .7673 0 0 cmyk
RQARQW+Mathematica3*1 [3.76562 0 0 -3.76569 0 0 ]msf45.6337 12.2458 mo(\001)sh45.6337 11.1877 mo(\001)sh45.6337 10.9911 mo(\001)sh45.6337 10.9022 mo(\001)sh45.6337 10.8209 mo(\001)sh48.5973 14.0489 mo(\001)sh48.5973 11.9325 mo(\001)sh48.5973 11.5394 mo(\001)sh48.5973 11.3616 mo(\001)sh48.5973 11.199 mo(\001)sh51.56 15.8511 mo(\001)sh51.56 12.6774 mo(\001)sh51.56 12.0884 mo(\001)sh51.56 11.8211 mo(\001)sh51.56 11.5771 mo(\001)sh54.5228 17.6541 mo(\001)sh54.5228 13.4222 mo(\001)sh54.5228 12.6367 mo(\001)sh54.5228 12.2805 mo(\001)sh54.5228 11.9551 mo(\001)sh57.4856 19.4571 mo(\001)sh57.4856 14.1663 mo(\001)sh57.4856 13.185 mo(\001)sh57.4856 12.7407 mo(\001)sh57.4856 12.334 mo(\001)sh60.4492 21.2601 mo(\001)sh60.4492 14.9112 mo(\001)sh60.4492 13.734 mo(\001)sh60.4492 13.2001 mo(\001)sh60.4492 12.712 mo(\001)sh63.412 23.0632 mo(\001)sh63.412 15.6561 mo(\001)sh63.412 14.2823 mo(\001)sh63.412 13.6595 mo(\001)sh63.412 13.0901 mo(\001)sh66.3748 24.8662 mo(\001)sh66.3748 16.4009 mo(\001)sh66.3748 14.8306 mo(\001)sh66.3748 14.1189 mo(\001)sh66.3748 13.4682 mo(\001)sh69.3383 26.6684 mo(\001)sh69.3383 17.1458 mo(\001)sh69.3383 15.3797 mo(\001)sh69.3383 14.5783 mo(\001)sh69.3383 13.8463 mo(\001)sh72.3011 28.4715 mo(\001)sh72.3011 17.8906 mo(\001)sh72.3011 15.9279 mo(\001)sh72.3011 15.0377 mo(\001)sh72.3011 14.2243 mo(\001)sh75.2639 30.2745 mo(\001)sh75.2639 18.6355 mo(\001)sh75.2639 16.4762 mo(\001)sh75.2639 15.4979 mo(\001)sh75.2639 14.6032 mo(\001)sh78.2274 32.0775 mo(\001)sh78.2274 19.3803 mo(\001)sh78.2274 17.0253 mo(\001)sh78.2274 15.9573 mo(\001)sh78.2274 14.9812 mo(\001)sh81.1902 33.8805 mo(\001)sh81.1902 20.1252 mo(\001)sh81.1902 17.5735 mo(\001)sh81.1902 16.4167 mo(\001)sh81.1902 15.3593 mo(\001)sh84.153 35.6835 mo(\001)sh84.153 20.87 mo(\001)sh84.153 18.1218 mo(\001)sh84.153 16.8761 mo(\001)sh84.153 15.7374 mo(\001)sh87.1166 37.4865 mo(\001)sh87.1166 21.6149 mo(\001)sh87.1166 18.6701 mo(\001)sh87.1166 17.3355 mo(\001)sh87.1166 16.1155 mo(\001)sh90.0794 39.2888 mo(\001)sh90.0794 22.3597 mo(\001)sh90.0794 19.2191 mo(\001)sh90.0794 17.795 mo(\001)sh90.0794 16.4935 mo(\001)sh93.0422 41.0918 mo(\001)sh93.0422 23.1046 mo(\001)sh93.0422 19.7674 mo(\001)sh93.0422 18.2551 mo(\001)sh93.0422 16.8724 mo(\001)sh96.005 42.8948 mo(\001)sh96.005 23.8494 mo(\001)sh96.005 20.3157 mo(\001)sh96.005 18.7145 mo(\001)sh96.005 17.2504 mo(\001)sh98.9685 44.6978 mo(\001)sh98.9685 24.5935 mo(\001)sh98.9685 20.8648 mo(\001)sh98.9685 19.174 mo(\001)sh98.9685 17.6285 mo(\001)sh101.931 46.5008 mo(\001)sh101.931 25.3384 mo(\001)sh101.931 21.413 mo(\001)sh101.931 19.6334 mo(\001)sh101.931 18.0065 mo(\001)sh104.894 48.3038 mo(\001)sh104.894 26.0832 mo(\001)sh104.894 21.9612 mo(\001)sh104.894 20.0927 mo(\001)sh104.894 18.3846 mo(\001)sh107.858 50.106 mo(\001)sh107.858 26.828 mo(\001)sh107.858 22.5103 mo(\001)sh107.858 20.5521 mo(\001)sh107.858 18.7627 mo(\001)sh110.82 51.909 mo(\001)sh110.82 27.5729 mo(\001)sh110.82 23.0586 mo(\001)sh110.82 21.0123 mo(\001)sh110.82 19.1407 mo(\001)sh113.783 53.712 mo(\001)sh113.783 28.3177 mo(\001)sh113.783 23.6069 mo(\001)sh113.783 21.4717 mo(\001)sh113.783 19.5196 mo(\001)sh116.747 55.5151 mo(\001)sh116.747 29.0626 mo(\001)sh116.747 24.1559 mo(\001)sh116.747 21.9311 mo(\001)sh116.747 19.8976 mo(\001)sh119.71 57.3181 mo(\001)sh119.71 29.8074 mo(\001)sh119.71 24.7042 mo(\001)sh119.71 22.3905 mo(\001)sh119.71 20.2757 mo(\001)sh122.672 59.1211 mo(\001)sh122.672 30.5523 mo(\001)sh122.672 25.2525 mo(\001)sh122.672 22.8499 mo(\001)sh122.672 20.6538 mo(\001)sh125.636 60.9241 mo(\001)sh125.636 31.2971 mo(\001)sh125.636 25.8008 mo(\001)sh125.636 23.3094 mo(\001)sh125.636 21.0319 mo(\001)sh128.599 62.7263 mo(\001)sh128.599 32.042 mo(\001)sh128.599 26.3498 mo(\001)sh128.599 23.7695 mo(\001)sh128.599 21.4099 mo(\001)sh131.561 64.5294 mo(\001)sh131.561 32.7868 mo(\001)sh131.561 26.8981 mo(\001)sh131.561 24.2289 mo(\001)sh131.561 21.7888 mo(\001)sh134.525 66.3324 mo(\001)sh134.525 33.5317 mo(\001)sh134.525 27.4464 mo(\001)sh134.525 24.6884 mo(\001)sh134.525 22.1669 mo(\001)sh137.488 68.1354 mo(\001)sh137.488 34.2766 mo(\001)sh137.488 27.9954 mo(\001)sh137.488 25.1478 mo(\001)sh137.488 22.5449 mo(\001)sh140.451 69.9384 mo(\001)sh140.451 35.0214 mo(\001)sh140.451 28.5437 mo(\001)sh140.451 25.6072 mo(\001)sh140.451 22.923 mo(\001)sh143.413 71.7414 mo(\001)sh143.413 35.7655 mo(\001)sh143.413 29.0919 mo(\001)sh143.413 26.0666 mo(\001)sh143.413 23.3011 mo(\001)sh146.377 73.5437 mo(\001)sh146.377 36.5104 mo(\001)sh146.377 29.641 mo(\001)sh146.377 26.5268 mo(\001)sh146.377 23.6792 mo(\001)sh149.34 75.3467 mo(\001)sh149.34 37.2552 mo(\001)sh149.34 30.1893 mo(\001)sh149.34 26.9862 mo(\001)sh149.34 24.058 mo(\001)sh152.303 77.1497 mo(\001)sh152.303 38.0001 mo(\001)sh152.303 30.7376 mo(\001)sh152.303 27.4456 mo(\001)sh152.303 24.4361 mo(\001)sh155.266 78.9527 mo(\001)sh155.266 38.7449 mo(\001)sh155.266 31.2866 mo(\001)sh155.266 27.905 mo(\001)sh155.266 24.8141 mo(\001)sh158.229 80.7557 mo(\001)sh158.229 39.4898 mo(\001)sh158.229 31.8349 mo(\001)sh158.229 28.3644 mo(\001)sh158.229 25.1922 mo(\001)sh161.192 82.5587 mo(\001)sh161.192 40.2346 mo(\001)sh161.192 32.3832 mo(\001)sh161.192 28.8238 mo(\001)sh161.192 25.5703 mo(\001)sh164.155 84.361 mo(\001)sh164.155 40.9795 mo(\001)sh164.155 32.9315 mo(\001)sh164.155 29.284 mo(\001)sh164.155 25.9484 mo(\001)sh167.118 86.164 mo(\001)sh167.118 41.7243 mo(\001)sh167.118 33.4805 mo(\001)sh167.118 29.7434 mo(\001)sh167.118 26.3264 mo(\001)sh170.081 87.967 mo(\001)sh170.081 42.4692 mo(\001)sh170.081 34.0288 mo(\001)sh170.081 30.2028 mo(\001)sh170.081 26.7053 mo(\001)sh173.044 89.77 mo(\001)sh173.044 43.2141 mo(\001)sh173.044 34.5771 mo(\001)sh173.044 30.6622 mo(\001)sh173.044 27.0833 mo(\001)sh176.007 91.5731 mo(\001)sh176.007 43.9589 mo(\001)sh176.007 35.1261 mo(\001)sh176.007 31.1217 mo(\001)sh176.007 27.4614 mo(\001)sh178.97 93.3761 mo(\001)sh178.97 44.7038 mo(\001)sh178.97 35.6744 mo(\001)sh178.97 31.5811 mo(\001)sh178.97 27.8395 mo(\001)sh181.933 95.1791 mo(\001)sh181.933 45.4486 mo(\001)sh181.933 36.2227 mo(\001)sh181.933 32.0412 mo(\001)sh181.933 28.2176 mo(\001)sh184.896 96.9813 mo(\001)sh184.896 46.1927 mo(\001)sh184.896 36.7717 mo(\001)sh184.896 32.5007 mo(\001)sh184.896 28.5956 mo(\001)sh187.859 98.7843 mo(\001)sh187.859 46.9376 mo(\001)sh187.859 37.32 mo(\001)sh187.859 32.9601 mo(\001)sh187.859 28.9745 mo(\001)sh190.822 100.587 mo(\001)sh190.822 47.6824 mo(\001)sh190.822 37.8683 mo(\001)sh190.822 33.4195 mo(\001)sh190.822 29.3525 mo(\001)sh193.785 102.39 mo(\001)sh193.785 48.4273 mo(\001)sh193.785 38.4173 mo(\001)sh193.785 33.8789 mo(\001)sh193.785 29.7306 mo(\001)sh196.748 104.193 mo(\001)sh196.748 49.1721 mo(\001)sh196.748 38.9656 mo(\001)sh196.748 34.3383 mo(\001)sh196.748 30.1087 mo(\001)sh199.711 105.996 mo(\001)sh199.711 49.917 mo(\001)sh199.711 39.5139 mo(\001)sh199.711 34.7977 mo(\001)sh199.711 30.4868 mo(\001)sh202.675 107.799 mo(\001)sh202.675 50.6618 mo(\001)sh202.675 40.0622 mo(\001)sh202.675 35.2579 mo(\001)sh202.675 30.8648 mo(\001)sh205.637 109.602 mo(\001)sh205.637 51.4067 mo(\001)sh205.637 40.6112 mo(\001)sh205.637 35.7173 mo(\001)sh205.637 31.2429 mo(\001)sh208.6 111.405 mo(\001)sh208.6 52.1515 mo(\001)sh208.6 41.1595 mo(\001)sh208.6 36.1767 mo(\001)sh208.6 31.6217 mo(\001)sh211.564 113.208 mo(\001)sh211.564 52.8964 mo(\001)sh211.564 41.7078 mo(\001)sh211.564 36.6361 mo(\001)sh211.564 31.9998 mo(\001)sh214.527 115.011 mo(\001)sh214.527 53.6413 mo(\001)sh214.527 42.2568 mo(\001)sh214.527 37.0956 mo(\001)sh214.527 32.3779 mo(\001)sh217.489 116.814 mo(\001)sh217.489 54.3861 mo(\001)sh217.489 42.8051 mo(\001)sh217.489 37.555 mo(\001)sh217.489 32.756 mo(\001)sh220.453 118.617 mo(\001)sh220.453 55.131 mo(\001)sh220.453 43.3534 mo(\001)sh220.453 38.0151 mo(\001)sh220.453 33.134 mo(\001)sh223.416 120.419 mo(\001)sh223.416 55.8758 mo(\001)sh223.416 43.9024 mo(\001)sh223.416 38.4745 mo(\001)sh223.416 33.5121 mo(\001)sh226.378 122.222 mo(\001)sh226.378 56.6199 mo(\001)sh226.378 44.4507 mo(\001)sh226.378 38.934 mo(\001)sh226.378 33.891 mo(\001)sh229.341 124.025 mo(\001)sh229.341 57.3648 mo(\001)sh229.341 44.999 mo(\001)sh229.341 39.3934 mo(\001)sh229.341 34.269 mo(\001)sh232.305 125.828 mo(\001)sh232.305 58.1096 mo(\001)sh232.305 45.548 mo(\001)sh232.305 39.8528 mo(\001)sh232.305 34.6471 mo(\001)sh235.268 127.631 mo(\001)sh235.268 58.8545 mo(\001)sh235.268 46.0963 mo(\001)sh235.268 40.3122 mo(\001)sh235.268 35.0252 mo(\001)sh238.23 129.434 mo(\001)sh238.23 59.5993 mo(\001)sh238.23 46.6446 mo(\001)sh238.23 40.7724 mo(\001)sh238.23 35.4033 mo(\001)sh241.194 131.236 mo(\001)sh241.194 60.3442 mo(\001)sh241.194 47.1936 mo(\001)sh241.194 41.2318 mo(\001)sh241.194 35.7813 mo(\001)sh244.157 133.039 mo(\001)sh244.157 61.089 mo(\001)sh244.157 47.7419 mo(\001)sh244.157 41.6912 mo(\001)sh244.157 36.1602 mo(\001)sh247.119 134.842 mo(\001)sh247.119 61.8339 mo(\001)sh247.119 48.2902 mo(\001)sh247.119 42.1506 mo(\001)sh247.119 36.5382 mo(\001)sh250.083 136.645 mo(\001)sh250.083 62.5787 mo(\001)sh250.083 48.8385 mo(\001)sh250.083 42.61 mo(\001)sh250.083 36.9163 mo(\001)sh253.046 138.448 mo(\001)sh253.046 63.3236 mo(\001)sh253.046 49.3875 mo(\001)sh253.046 43.0694 mo(\001)sh253.046 37.2944 mo(\001)sh256.009 140.251 mo(\001)sh256.009 64.0685 mo(\001)sh256.009 49.9358 mo(\001)sh256.009 43.5296 mo(\001)sh256.009 37.6725 mo(\001)sh258.972 142.054 mo(\001)sh258.972 64.8133 mo(\001)sh258.972 50.4841 mo(\001)sh258.972 43.9891 mo(\001)sh258.972 38.0506 mo(\001)sh261.935 143.857 mo(\001)sh261.935 65.5582 mo(\001)sh261.935 51.0332 mo(\001)sh261.935 44.4485 mo(\001)sh261.935 38.4287 mo(\001)shgrestore
gsave
263.938 145.313 mo
268.456 145.313 li
268.456 141.547 li
263.938 141.547 li
cp
clp
.895628 .7673 0 0 cmyk
RQARQW+Mathematica3*1 [3.76562 0 0 -3.76569 0 0 ]msf264.898 145.66 mo(\001)shgrestore
.895628 .7673 0 0 cmyk
RQARQW+Mathematica3*1 [3.76562 0 0 -3.76569 0 0 ]msf264.898 66.3031 mo(\001)sh264.898 51.5815 mo(\001)sh264.898 44.9079 mo(\001)sh264.898 38.8075 mo(\001)shgsave
266.95 145.313 mo
271.469 145.313 li
271.469 143.806 li
266.95 143.806 li
cp
clp
RQARQW+Mathematica3*1 [3.76562 0 0 -3.76569 0 0 ]msf267.861 147.463 mo(\001)shgrestore
RQARQW+Mathematica3*1 [3.76562 0 0 -3.76569 0 0 ]msf267.861 67.0472 mo(\001)sh267.861 52.1298 mo(\001)sh267.861 45.3674 mo(\001)sh267.861 39.1856 mo(\001)sh270.824 67.792 mo(\001)sh270.824 52.6788 mo(\001)sh270.824 45.8268 mo(\001)sh270.824 39.5637 mo(\001)sh273.787 68.5369 mo(\001)sh273.787 53.2271 mo(\001)sh273.787 46.2869 mo(\001)sh273.787 39.9417 mo(\001)shgsave
44.025 145.313 mo
276.741 145.313 li
276.741 1.4632 li
44.025 1.4632 li
cp
clp
44.025 9.31311 mo
44.0966 9.35756 li
44.1681 9.40274 li
44.3105 9.49161 li
44.5959 9.6701 li
45.1668 10.0263 li
46.3093 10.7365 li
48.5927 12.145 li
53.5453 15.1499 li
58.1687 17.8936 li
62.7025 20.5266 li
67.6197 23.3177 li
72.2092 25.8633 li
77.1829 28.5551 li
82.0654 31.1316 li
86.6203 33.4753 li
91.5593 35.9502 li
96.1699 38.199 li
100.689 40.3454 li
105.594 42.6071 li
110.17 44.6541 li
115.131 46.8036 li
120 48.8423 li
124.542 50.6777 li
129.467 52.5967 li
134.064 54.3184 li
139.046 56.1064 li
143.937 57.7822 li
148.5 59.271 li
153.447 60.8037 li
158.066 62.1541 li
162.594 63.4012 li
167.507 64.6643 li
172.091 65.7571 li
177.059 66.8423 li
181.937 67.8048 li
186.487 68.6063 li
191.421 69.3653 li
191.492 69.3759 li
191.564 69.3857 li
191.708 69.406 li
191.996 69.4467 li
192.572 69.5258 li
193.723 69.6794 li
196.026 69.9671 li
196.097 69.9754 li
196.167 69.9837 li
196.308 70.0002 li
196.591 70.0334 li
197.155 70.0981 li
198.284 70.2224 li
198.354 70.2299 li
198.425 70.2375 li
198.565 70.2526 li
198.848 70.2827 li
199.412 70.3407 li
200.541 70.4514 li
200.618 70.4589 li
200.694 70.4664 li
200.847 70.4807 li
201.153 70.5086 li
201.766 70.5643 li
202.991 70.669 li
203.067 70.6751 li
203.144 70.6818 li
203.297 70.6939 li
203.603 70.718 li
204.215 70.7654 li
205.44 70.8535 li
205.512 70.8581 li
205.583 70.8633 li
205.726 70.8731 li
206.012 70.892 li
206.583 70.9282 li
206.654 70.9327 li
206.726 70.9372 li
206.869 70.9454 li
207.154 70.9628 li
207.726 70.9951 li
207.869 71.0027 li
208.011 71.0109 li
208.297 71.026 li
208.868 71.0547 li
210.011 71.1066 li
210.088 71.1096 li
210.166 71.1134 li
210.321 71.1194 li
210.631 71.1315 li
211.25 71.1541 li
211.327 71.1571 li
211.405 71.1593 li
211.56 71.1646 li
211.869 71.1744 li
212.489 71.1925 li
212.566 71.1947 li
212.644 71.197 li
212.799 71.2007 li
213.108 71.2083 li
213.186 71.2098 li
213.263 71.212 li
213.418 71.215 li
213.727 71.2218 li
213.883 71.2248 li
214.038 71.2271 li
214.115 71.2286 li
214.192 71.2301 li
214.347 71.2324 li
214.425 71.2339 li
214.502 71.2346 li
214.657 71.2369 li
214.966 71.2414 li
215.039 71.2422 li
215.111 71.2429 li
215.255 71.2444 li
215.328 71.2452 li
215.4 71.2459 li
215.545 71.2467 li
215.617 71.2474 li
215.689 71.2482 li
215.762 71.2489 li
215.834 71.2489 li
215.906 71.2497 li
215.979 71.2497 li
216.051 71.2504 li
216.123 71.2504 li
216.195 71.2512 li
216.34 71.2512 li
216.412 71.252 li
216.701 71.252 li
216.774 71.2527 li
216.918 71.2527 li
216.991 71.252 li
217.28 71.252 li
217.352 71.2512 li
217.497 71.2512 li
217.569 71.2504 li
217.641 71.2504 li
217.714 71.2497 li
217.858 71.2489 li
217.931 71.2489 li
218.003 71.2482 li
218.148 71.2467 li
218.22 71.2467 li
218.292 71.2459 li
218.437 71.2444 li
218.509 71.2437 li
218.581 71.2429 li
218.726 71.2414 li
218.798 71.2399 li
218.87 71.2391 li
219.015 71.2377 li
219.087 71.2361 li
219.16 71.2354 li
219.304 71.2331 li
219.593 71.2279 li
219.664 71.2271 li
219.735 71.2256 li
219.877 71.2226 li
220.161 71.2173 li
220.231 71.2158 li
220.302 71.2135 li
220.444 71.2105 li
220.728 71.2038 li
220.798 71.2022 li
220.869 71.2001 li
221.011 71.1962 li
221.295 71.1879 li
221.862 71.1706 li
221.933 71.1684 li
222.003 71.1661 li
222.145 71.1608 li
222.429 71.151 li
222.996 71.1292 li
223.138 71.1232 li
223.279 71.1171 li
223.563 71.1051 li
224.13 71.0787 li
224.207 71.075 li
224.284 71.0712 li
224.438 71.0629 li
224.745 71.0471 li
225.36 71.0132 li
225.437 71.0087 li
225.514 71.0049 li
225.667 70.996 li
225.975 70.9771 li
226.59 70.9379 li
226.667 70.9327 li
226.744 70.9274 li
226.898 70.9176 li
227.205 70.8957 li
227.821 70.8513 li
229.05 70.7541 li
229.122 70.7481 li
229.194 70.7421 li
229.337 70.7293 li
229.624 70.7044 li
230.198 70.6525 li
231.347 70.5417 li
231.418 70.5342 li
231.49 70.5274 li
231.634 70.5124 li
231.921 70.4823 li
232.495 70.4205 li
233.643 70.2895 li
233.798 70.2714 li
233.954 70.2526 li
234.265 70.2141 li
234.887 70.1358 li
236.131 69.9701 li
236.209 69.9588 li
236.287 69.9483 li
236.442 69.9264 li
236.753 69.8821 li
237.376 69.7916 li
238.62 69.6003 li
238.696 69.5883 li
238.773 69.5762 li
238.925 69.5514 li
239.23 69.5017 li
239.841 69.4 li
241.063 69.1869 li
243.505 68.7222 li
243.577 68.7079 li
243.648 68.6936 li
243.791 68.665 li
244.075 68.6063 li
244.645 68.4879 li
245.784 68.2417 li
248.063 67.7122 li
248.141 67.6942 li
248.218 67.6753 li
248.372 67.6369 li
248.681 67.5608 li
249.299 67.4057 li
250.534 67.0841 li
253.005 66.395 li
257.62 64.9429 li
262.142 63.2958 li
267.049 61.242 li
271.629 59.0571 li
271.709 59.0165 li
271.789 58.9758 li
271.948 58.8945 li
272.268 58.731 li
272.906 58.399 li
274.184 57.7181 li
274.264 57.6751 li
274.344 57.6315 li
274.505 57.5448 li
274.824 57.3694 li
275.463 57.0154 li
275.542 56.971 li
275.622 56.9258 li
275.782 56.8361 li
276.102 56.6554 li
276.182 56.6102 li
276.262 56.5642 li
276.421 56.4732 li
276.501 56.4272 li
276.661 56.3353 li
276.741 56.2894 li
0 .990631 1 .000396735 cmyk
2.472 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
grestore
gsave
7.87504 180.71 mo
279 180.71 li
279 1.4632 li
7.87504 1.4632 li
cp
clp
276.741 145.368 mo
44.025 145.368 li
44.025 145.368 mo
44.025 1.53847 li
44.025 1.53847 mo
276.741 1.53847 li
276.741 1.53847 mo
276.741 145.368 li
1 /0 /CSD get_res sepcs
1 sep
.2 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
grestore
gsave
7.87504 181 mo
279 181 li
279 1.00012 li
7.87504 1.00012 li
cp
clp
44.025 145.368 mo
44.025 142.614 li
1 /0 /CSD get_res sepcs
1 sep
.2 lw
0 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
%ADOBeginSubsetFont: ZPTQMX+Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ZPTQMX+Times-Roman def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARQX+Times-Roman /ZPTQMX+Times-Roman findfont ct_VMDictPut/RQARQX+Times-Roman*1 [48{/.notdef}rp /zero 207{/.notdef}rp]RQARQX+Times-Roman nfRQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf41.7657 154.405 mo(0)sh102.204 145.368 mo
102.204 142.614 li
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
%ADOBeginSubsetFont: ZPTQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARQX+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARQX+Times-Roman /Encoding getdup 46 /period putdup 50 /two putdup 53 /five putpop%ADOEndSubsetFont
/RQARQX+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five 202{/.notdef}rp]RQARQX+Times-Roman nfRQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf94.2961 154.405 mo(0.25)sh160.383 145.368 mo
160.383 142.614 li
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
RQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf154.734 154.405 mo(0.5)sh218.562 145.368 mo
218.562 142.614 li
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
%ADOBeginSubsetFont: ZPTQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARQX+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7A73D94A9F40BC631635D93782351ED8A5F0B041154B50ADFD67B52AFA0970AEE10CFF4587FA64B7C1AB4D8B074E00A1BB2BDDE2ECD9CC66A> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARQX+Times-Roman /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/RQARQX+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]RQARQX+Times-Roman nfRQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf210.654 154.405 mo(0.75)sh276.741 145.368 mo
276.741 142.614 li
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
%ADOBeginSubsetFont: ZPTQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARQX+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARQX+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/RQARQX+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]RQARQX+Times-Roman nfRQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf274.481 154.405 mo(1)sh44.025 125.931 mo
46.7785 125.931 li
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
RQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf30.4688 128.19 mo(1.2)sh44.025 87.0581 mo
46.7785 87.0581 li
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
%ADOBeginSubsetFont: ZPTQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARQX+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARQX+Times-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/RQARQX+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five /.notdef /seven 200{/.notdef}rp]RQARQX+Times-Roman nfRQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf30.4688 89.3175 mo(1.3)sh44.025 48.1856 mo
46.7785 48.1856 li
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
%ADOBeginSubsetFont: ZPTQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARQX+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARQX+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/RQARQX+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven 200{/.notdef}rp]RQARQX+Times-Roman nfRQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf30.4688 50.445 mo(1.4)sh44.025 9.31311 mo
46.7785 9.31311 li
gsave
[.753125 0 0 -.753138 7.87504 181 ]ct
@
grestore newpath
RQARQX+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf30.4688 11.5725 mo(1.5)sh%ADOBeginSubsetFont: BCJRMX+Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /BCJRMX+Times-Italic def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 86 /V putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/V <1C60D8A8C9B7D8BE3608624D2E2C88F5CF4A70D70F922254294D4246E4992890E83912C9D277D839E8549B7E23CB1C1DB720D7BF2ED2D492CC859DBA8E17665B85A68E7999B2A89726750B2B5414E8362200332AF4E80BD3F832BC7BBE3202B23A5B0AFC0583925A8233FF3358669834B822CFD7B900D78F2BFCBB39D4AD42C8121D36> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARQY+Times-Italic /BCJRMX+Times-Italic findfont ct_VMDictPut/RQARQY+Times-Italic*1 [86{/.notdef}rp /V 169{/.notdef}rp]RQARQY+Times-Italic nfRQARQY+Times-Italic*1 [18.075 0 0 -18.0753 0 0 ]msf149.658 176.481 mo(V)sh155.999 162.69 mo
150.35 162.69 li
150.35 163.396 li
163.154 163.396 li
163.154 162.69 li
157.505 162.69 li
ef
%ADOBeginSubsetFont: TCJRMX+Mathematica1 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /TCJRMX+Mathematica1 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Nu putdup 2 /Omega putdef/UniqueID 5095641 def/FontBBox {-120 -220 1544 923} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 -0 444 468 662 677] def/OtherBlues [-209 -203] def/BlueScale 0.0416717 def/StdHW [105.845] def/StdVW [74.4189] def/StemSnapH [65.5429 105.845] def/StemSnapV [58.4069 74.4189] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Nu <1C60D8A8C9B74F36160043BEECF3E5C758D2EB92BB98F2DD9E5E4E0C64312697868A81EFF17CA27779B07D119653AAB4FB5FCDACB27D7A6D0A0C677900F63C1C06D8A7F522CDE1DF369F1BEA9C4651B8F3FA7AF9408821317A3ED4B87474DC2D8AFDD73D546F0920BFFC62A21A50FA2FC1E8621C> |-/Omega <1C60D8A8C9B6269C545E80EBD2C5AF738CF9980B8999FEEF1136515CC36CE92F099B7CB37D440E68058AC72D651E96090932C94688C77020047990EDFD8A8487DBF248A19E7A587CB1915E4F80777FB1B5B6589590F4907D0324D921DD008CB510361571F752E52BDAF1E8411823CD7BB55F03A7B6913B5C3227CCFFA08BC6EF7C834C59D611AA9F45BD08998BD205D977FDB72D1582EB5E4A8827B59E5AA41E192D5DB17C1814F060> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARQZ+Mathematica1 /TCJRMX+Mathematica1 findfont ct_VMDictPut/RQARQZ+Mathematica1*1 [/.notdef /Nu /Omega 253{/.notdef}rp]RQARQZ+Mathematica1 nfRQARQZ+Mathematica1*1 [18.075 0 0 -18.0753 0 0 ]msf162.777 176.481 mo(\001)shRQARQZ+Mathematica1*1 [0 -18.0753 -18.075 0 0 0 ]msf21.4313 91.8503 mo(\002)sh%ADOBeginSubsetFont: LMEQMX+Mathematica2 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /LMEQMX+Mathematica2 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Slash1 putdef/UniqueID 5095653 def/FontBBox {-13 -4075 2499 2436} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-587 -586 888 893] def/BlueScale 0.199996 def/StdHW [0] def/StdVW [0] def/StemSnapH [0] def/StemSnapV [0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/Slash1 <1C60D8A8C9B82F05F6484DDAF768983B429CE2BE2E9BAF7B> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRA+Mathematica2 /LMEQMX+Mathematica2 findfont ct_VMDictPut/RQARRA+Mathematica2*1 [/.notdef /Slash1 254{/.notdef}rp]RQARRA+Mathematica2 nfRQARRA+Mathematica2*1 [0 -18.0753 -18.075 0 0 0 ]msf21.4313 79.362 mo(\001)shRQARQZ+Mathematica1*1 [0 -18.0753 -18.075 0 0 0 ]msf21.4313 73.6177 mo(\002)sh%ADOBeginSubsetFont: BCJRMX+Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARQY+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARQY+Times-Italic /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/RQARQY+Times-Italic*1 [86{/.notdef}rp /V 12{/.notdef}rp /c 156{/.notdef}rp]RQARQY+Times-Italic nfRQARQY+Times-Italic*1 [0 -12.8335 -12.8332 0 0 0 ]msf24.2555 61.1283 mo(c)shgrestore
gsave
44.4 325.313 mo
277.116 325.313 li
277.116 181.463 li
44.4 181.463 li
cp
clp
44.4 189.313 mo
277.116 189.313 li
1 /0 /CSD get_res sepcs
1 sep
3.09 lw
0 lc
0 lj
3.25 ml
[13 10 ] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
grestore
gsave
44.4 192.007 mo
46.6594 192.007 li
46.6594 186.735 li
44.4 186.735 li
cp
clp
%ADOBeginSubsetFont: RBCAAA+Mathematica3 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /RBCAAA+Mathematica3 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /SolidCircle putdef/UniqueID 5095645 def/FontBBox {-109 -231 966 869} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-107 -91 505 527 596 612] def/BlueScale 0.0454559 def/StdHW [34] def/StdVW [34] def/StemSnapH [34 66] def/StemSnapV [34 65] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/SolidCircle <1C60D8A8C9B60287CF08F7BF563CAAD6E08EFD6DAA142CC7220408DECF2B61045B377CC2E5343FEE4BB07E6944D948E0191385507B98AE> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRB+Mathematica3 /RBCAAA+Mathematica3 findfont ct_VMDictPut/RQARRB+Mathematica3*1 [/.notdef /SolidCircle 254{/.notdef}rp]RQARRB+Mathematica3 nfRQARRB+Mathematica3*1 [3.76563 0 0 -3.76569 0 0 ]msf43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)sh43.0459 190.443 mo(\001)shgrestore
gsave
8.25 361 mo
279.375 361 li
279.375 181 li
8.25 181 li
cp
clp
RQARRB+Mathematica3*1 [3.76563 0 0 -3.76569 0 0 ]msf46.0087 192.305 mo(\001)sh46.0087 191.164 mo(\001)sh46.0087 190.907 mo(\001)sh46.0087 190.792 mo(\001)sh46.0087 190.726 mo(\001)sh46.0087 190.684 mo(\001)sh46.0087 190.656 mo(\001)sh46.0087 190.636 mo(\001)sh46.0087 190.622 mo(\001)sh46.0087 190.609 mo(\001)sh46.0087 190.597 mo(\001)sh46.0087 190.587 mo(\001)sh46.0087 190.578 mo(\001)sh46.0087 190.571 mo(\001)sh46.0087 190.565 mo(\001)sh46.0087 190.56 mo(\001)sh46.0087 190.554 mo(\001)sh46.0087 190.551 mo(\001)sh46.0087 190.547 mo(\001)sh46.0087 190.543 mo(\001)sh46.0087 190.54 mo(\001)sh46.0087 190.537 mo(\001)sh46.0087 190.535 mo(\001)sh46.0087 190.532 mo(\001)sh46.0087 190.529 mo(\001)sh46.0087 190.528 mo(\001)sh46.0087 190.526 mo(\001)sh46.0087 190.524 mo(\001)sh46.0087 190.523 mo(\001)sh46.0087 190.52 mo(\001)sh46.0087 190.519 mo(\001)sh46.0087 190.518 mo(\001)sh46.0087 190.517 mo(\001)sh46.0087 190.515 mo(\001)sh46.0087 190.514 mo(\001)sh46.0087 190.513 mo(\001)sh46.0087 190.512 mo(\001)sh46.0087 190.511 mo(\001)sh46.0087 190.51 mo(\001)sh46.0087 190.509 mo(\001)sh46.0087 190.508 mo(\001)sh46.0087 190.508 mo(\001)sh46.0087 190.507 mo(\001)sh46.0087 190.506 mo(\001)sh46.0087 190.505 mo(\001)sh46.0087 190.505 mo(\001)sh46.0087 190.504 mo(\001)sh46.0087 190.503 mo(\001)sh46.0087 190.502 mo(\001)sh46.0087 190.501 mo(\001)sh48.9722 194.167 mo(\001)sh48.9722 191.884 mo(\001)sh48.9722 191.371 mo(\001)sh48.9722 191.14 mo(\001)sh48.9722 191.009 mo(\001)sh48.9722 190.926 mo(\001)sh48.9722 190.869 mo(\001)sh48.9722 190.83 mo(\001)sh48.9722 190.801 mo(\001)sh48.9722 190.775 mo(\001)sh48.9722 190.752 mo(\001)sh48.9722 190.731 mo(\001)sh48.9722 190.714 mo(\001)sh48.9722 190.7 mo(\001)sh48.9722 190.687 mo(\001)sh48.9722 190.676 mo(\001)sh48.9722 190.666 mo(\001)sh48.9722 190.658 mo(\001)sh48.9722 190.65 mo(\001)sh48.9722 190.643 mo(\001)sh48.9722 190.637 mo(\001)sh48.9722 190.631 mo(\001)sh48.9722 190.626 mo(\001)sh48.9722 190.621 mo(\001)sh48.9722 190.617 mo(\001)sh48.9722 190.612 mo(\001)sh48.9722 190.608 mo(\001)sh48.9722 190.605 mo(\001)sh48.9722 190.602 mo(\001)sh48.9722 190.599 mo(\001)sh48.9722 190.596 mo(\001)sh48.9722 190.593 mo(\001)sh48.9722 190.59 mo(\001)sh48.9722 190.588 mo(\001)sh48.9722 190.585 mo(\001)sh48.9722 190.584 mo(\001)sh48.9722 190.581 mo(\001)sh48.9722 190.579 mo(\001)sh48.9722 190.577 mo(\001)sh48.9722 190.575 mo(\001)sh48.9722 190.574 mo(\001)sh48.9722 190.571 mo(\001)sh48.9722 190.57 mo(\001)sh48.9722 190.568 mo(\001)sh48.9722 190.567 mo(\001)sh48.9722 190.566 mo(\001)sh48.9722 190.564 mo(\001)sh48.9722 190.563 mo(\001)sh48.9722 190.562 mo(\001)sh48.9722 190.56 mo(\001)sh51.935 196.029 mo(\001)sh51.935 192.604 mo(\001)sh51.935 191.834 mo(\001)sh51.935 191.489 mo(\001)sh51.935 191.292 mo(\001)sh51.935 191.166 mo(\001)sh51.935 191.082 mo(\001)sh51.935 191.024 mo(\001)sh51.935 190.98 mo(\001)sh51.935 190.941 mo(\001)sh51.935 190.906 mo(\001)sh51.935 190.876 mo(\001)sh51.935 190.85 mo(\001)sh51.935 190.828 mo(\001)sh51.935 190.81 mo(\001)sh51.935 190.793 mo(\001)sh51.935 190.779 mo(\001)sh51.935 190.765 mo(\001)sh51.935 190.754 mo(\001)sh51.935 190.743 mo(\001)sh51.935 190.734 mo(\001)sh51.935 190.725 mo(\001)sh51.935 190.718 mo(\001)sh51.935 190.71 mo(\001)sh51.935 190.704 mo(\001)sh51.935 190.697 mo(\001)sh51.935 190.692 mo(\001)sh51.935 190.687 mo(\001)sh51.935 190.682 mo(\001)sh51.935 190.677 mo(\001)sh51.935 190.672 mo(\001)sh51.935 190.668 mo(\001)sh51.935 190.664 mo(\001)sh51.935 190.66 mo(\001)sh51.935 190.657 mo(\001)sh51.935 190.654 mo(\001)sh51.935 190.651 mo(\001)sh51.935 190.648 mo(\001)sh51.935 190.645 mo(\001)sh51.935 190.642 mo(\001)sh51.935 190.639 mo(\001)sh51.935 190.636 mo(\001)sh51.935 190.634 mo(\001)sh51.935 190.632 mo(\001)sh51.935 190.629 mo(\001)sh51.935 190.627 mo(\001)sh51.935 190.625 mo(\001)sh51.935 190.623 mo(\001)sh51.935 190.621 mo(\001)sh51.935 190.62 mo(\001)sh54.8978 197.89 mo(\001)sh54.8978 193.325 mo(\001)sh54.8978 192.298 mo(\001)sh54.8978 191.837 mo(\001)sh54.8978 191.575 mo(\001)sh54.8978 191.408 mo(\001)sh54.8978 191.294 mo(\001)sh54.8978 191.218 mo(\001)sh54.8978 191.16 mo(\001)sh54.8978 191.107 mo(\001)sh54.8978 191.06 mo(\001)sh54.8978 191.02 mo(\001)sh54.8978 190.986 mo(\001)sh54.8978 190.956 mo(\001)sh54.8978 190.931 mo(\001)sh54.8978 190.91 mo(\001)sh54.8978 190.89 mo(\001)sh54.8978 190.873 mo(\001)sh54.8978 190.858 mo(\001)sh54.8978 190.843 mo(\001)sh54.8978 190.831 mo(\001)sh54.8978 190.82 mo(\001)sh54.8978 190.809 mo(\001)sh54.8978 190.8 mo(\001)sh54.8978 190.791 mo(\001)sh54.8978 190.782 mo(\001)sh54.8978 190.775 mo(\001)sh54.8978 190.767 mo(\001)sh54.8978 190.761 mo(\001)sh54.8978 190.754 mo(\001)sh54.8978 190.748 mo(\001)sh54.8978 190.743 mo(\001)sh54.8978 190.738 mo(\001)sh54.8978 190.733 mo(\001)sh54.8978 190.728 mo(\001)sh54.8978 190.724 mo(\001)sh54.8978 190.72 mo(\001)sh54.8978 190.715 mo(\001)sh54.8978 190.712 mo(\001)sh54.8978 190.708 mo(\001)sh54.8978 190.704 mo(\001)sh54.8978 190.701 mo(\001)sh54.8978 190.698 mo(\001)sh54.8978 190.695 mo(\001)sh54.8978 190.692 mo(\001)sh54.8978 190.689 mo(\001)sh54.8978 190.686 mo(\001)sh54.8978 190.684 mo(\001)sh54.8978 190.681 mo(\001)sh54.8978 190.678 mo(\001)sh57.8606 199.753 mo(\001)sh57.8606 194.046 mo(\001)sh57.8606 192.762 mo(\001)sh57.8606 192.185 mo(\001)sh57.8606 191.859 mo(\001)sh57.8606 191.649 mo(\001)sh57.8606 191.508 mo(\001)sh57.8606 191.411 mo(\001)sh57.8606 191.339 mo(\001)sh57.8606 191.273 mo(\001)sh57.8606 191.215 mo(\001)sh57.8606 191.164 mo(\001)sh57.8606 191.121 mo(\001)sh57.8606 191.085 mo(\001)sh57.8606 191.053 mo(\001)sh57.8606 191.026 mo(\001)sh57.8606 191.002 mo(\001)sh57.8606 190.98 mo(\001)sh57.8606 190.962 mo(\001)sh57.8606 190.944 mo(\001)sh57.8606 190.928 mo(\001)sh57.8606 190.914 mo(\001)sh57.8606 190.901 mo(\001)sh57.8606 190.889 mo(\001)sh57.8606 190.878 mo(\001)sh57.8606 190.867 mo(\001)sh57.8606 190.858 mo(\001)sh57.8606 190.849 mo(\001)sh57.8606 190.84 mo(\001)sh57.8606 190.833 mo(\001)sh57.8606 190.825 mo(\001)sh57.8606 190.818 mo(\001)sh57.8606 190.812 mo(\001)sh57.8606 190.806 mo(\001)sh57.8606 190.8 mo(\001)sh57.8606 190.794 mo(\001)sh57.8606 190.788 mo(\001)sh57.8606 190.784 mo(\001)sh57.8606 190.779 mo(\001)sh57.8606 190.774 mo(\001)sh57.8606 190.77 mo(\001)sh57.8606 190.766 mo(\001)sh57.8606 190.761 mo(\001)sh57.8606 190.757 mo(\001)sh57.8606 190.754 mo(\001)sh57.8606 190.751 mo(\001)sh57.8606 190.747 mo(\001)sh57.8606 190.744 mo(\001)sh57.8606 190.74 mo(\001)sh57.8606 190.737 mo(\001)sh60.8242 201.615 mo(\001)sh60.8242 194.766 mo(\001)sh60.8242 193.226 mo(\001)sh60.8242 192.534 mo(\001)sh60.8242 192.142 mo(\001)sh60.8242 191.891 mo(\001)sh60.8242 191.721 mo(\001)sh60.8242 191.605 mo(\001)sh60.8242 191.518 mo(\001)sh60.8242 191.439 mo(\001)sh60.8242 191.369 mo(\001)sh60.8242 191.308 mo(\001)sh60.8242 191.257 mo(\001)sh60.8242 191.213 mo(\001)sh60.8242 191.175 mo(\001)sh60.8242 191.143 mo(\001)sh60.8242 191.114 mo(\001)sh60.8242 191.088 mo(\001)sh60.8242 191.065 mo(\001)sh60.8242 191.044 mo(\001)sh60.8242 191.026 mo(\001)sh60.8242 191.008 mo(\001)sh60.8242 190.992 mo(\001)sh60.8242 190.978 mo(\001)sh60.8242 190.965 mo(\001)sh60.8242 190.953 mo(\001)sh60.8242 190.941 mo(\001)sh60.8242 190.93 mo(\001)sh60.8242 190.92 mo(\001)sh60.8242 190.91 mo(\001)sh60.8242 190.902 mo(\001)sh60.8242 190.894 mo(\001)sh60.8242 190.885 mo(\001)sh60.8242 190.878 mo(\001)sh60.8242 190.871 mo(\001)sh60.8242 190.864 mo(\001)sh60.8242 190.858 mo(\001)sh60.8242 190.852 mo(\001)sh60.8242 190.846 mo(\001)sh60.8242 190.84 mo(\001)sh60.8242 190.835 mo(\001)sh60.8242 190.83 mo(\001)sh60.8242 190.825 mo(\001)sh60.8242 190.821 mo(\001)sh60.8242 190.816 mo(\001)sh60.8242 190.812 mo(\001)sh60.8242 190.808 mo(\001)sh60.8242 190.803 mo(\001)sh60.8242 190.8 mo(\001)sh60.8242 190.796 mo(\001)sh63.7869 203.476 mo(\001)sh63.7869 195.487 mo(\001)sh63.7869 193.69 mo(\001)sh63.7869 192.883 mo(\001)sh63.7869 192.425 mo(\001)sh63.7869 192.132 mo(\001)sh63.7869 191.934 mo(\001)sh63.7869 191.799 mo(\001)sh63.7869 191.697 mo(\001)sh63.7869 191.605 mo(\001)sh63.7869 191.523 mo(\001)sh63.7869 191.453 mo(\001)sh63.7869 191.393 mo(\001)sh63.7869 191.342 mo(\001)sh63.7869 191.298 mo(\001)sh63.7869 191.26 mo(\001)sh63.7869 191.226 mo(\001)sh63.7869 191.196 mo(\001)sh63.7869 191.169 mo(\001)sh63.7869 191.145 mo(\001)sh63.7869 191.123 mo(\001)sh63.7869 191.102 mo(\001)sh63.7869 191.084 mo(\001)sh63.7869 191.067 mo(\001)sh63.7869 191.052 mo(\001)sh63.7869 191.038 mo(\001)sh63.7869 191.024 mo(\001)sh63.7869 191.011 mo(\001)sh63.7869 191 mo(\001)sh63.7869 190.989 mo(\001)sh63.7869 190.978 mo(\001)sh63.7869 190.968 mo(\001)sh63.7869 190.959 mo(\001)sh63.7869 190.951 mo(\001)sh63.7869 190.943 mo(\001)sh63.7869 190.934 mo(\001)sh63.7869 190.927 mo(\001)sh63.7869 190.92 mo(\001)sh63.7869 190.913 mo(\001)sh63.7869 190.907 mo(\001)sh63.7869 190.901 mo(\001)sh63.7869 190.895 mo(\001)sh63.7869 190.889 mo(\001)sh63.7869 190.884 mo(\001)sh63.7869 190.879 mo(\001)sh63.7869 190.873 mo(\001)sh63.7869 190.869 mo(\001)sh63.7869 190.864 mo(\001)sh63.7869 190.859 mo(\001)sh63.7869 190.855 mo(\001)sh66.7497 205.339 mo(\001)sh66.7497 196.208 mo(\001)sh66.7497 194.154 mo(\001)sh66.7497 193.232 mo(\001)sh66.7497 192.708 mo(\001)sh66.7497 192.374 mo(\001)sh66.7497 192.147 mo(\001)sh66.7497 191.993 mo(\001)sh66.7497 191.877 mo(\001)sh66.7497 191.772 mo(\001)sh66.7497 191.678 mo(\001)sh66.7497 191.597 mo(\001)sh66.7497 191.529 mo(\001)sh66.7497 191.471 mo(\001)sh66.7497 191.42 mo(\001)sh66.7497 191.377 mo(\001)sh66.7497 191.337 mo(\001)sh66.7497 191.304 mo(\001)sh66.7497 191.273 mo(\001)sh66.7497 191.245 mo(\001)sh66.7497 191.22 mo(\001)sh66.7497 191.196 mo(\001)sh66.7497 191.176 mo(\001)sh66.7497 191.157 mo(\001)sh66.7497 191.139 mo(\001)sh66.7497 191.122 mo(\001)sh66.7497 191.107 mo(\001)sh66.7497 191.093 mo(\001)sh66.7497 191.079 mo(\001)sh66.7497 191.067 mo(\001)sh66.7497 191.055 mo(\001)sh66.7497 191.044 mo(\001)sh66.7497 191.033 mo(\001)sh66.7497 191.023 mo(\001)sh66.7497 191.013 mo(\001)sh66.7497 191.005 mo(\001)sh66.7497 190.996 mo(\001)sh66.7497 190.989 mo(\001)sh66.7497 190.98 mo(\001)sh66.7497 190.973 mo(\001)sh66.7497 190.966 mo(\001)sh66.7497 190.959 mo(\001)sh66.7497 190.953 mo(\001)sh66.7497 190.946 mo(\001)sh66.7497 190.94 mo(\001)sh66.7497 190.935 mo(\001)sh66.7497 190.929 mo(\001)sh66.7497 190.924 mo(\001)sh66.7497 190.919 mo(\001)sh66.7497 190.914 mo(\001)sh69.7133 207.201 mo(\001)sh69.7133 196.929 mo(\001)sh69.7133 194.618 mo(\001)sh69.7133 193.58 mo(\001)sh69.7133 192.991 mo(\001)sh69.7133 192.615 mo(\001)sh69.7133 192.36 mo(\001)sh69.7133 192.186 mo(\001)sh69.7133 192.056 mo(\001)sh69.7133 191.938 mo(\001)sh69.7133 191.831 mo(\001)sh69.7133 191.741 mo(\001)sh69.7133 191.664 mo(\001)sh69.7133 191.599 mo(\001)sh69.7133 191.542 mo(\001)sh69.7133 191.493 mo(\001)sh69.7133 191.45 mo(\001)sh69.7133 191.411 mo(\001)sh69.7133 191.376 mo(\001)sh69.7133 191.345 mo(\001)sh69.7133 191.317 mo(\001)sh69.7133 191.291 mo(\001)sh69.7133 191.267 mo(\001)sh69.7133 191.245 mo(\001)sh69.7133 191.226 mo(\001)sh69.7133 191.207 mo(\001)sh69.7133 191.19 mo(\001)sh69.7133 191.174 mo(\001)sh69.7133 191.159 mo(\001)sh69.7133 191.145 mo(\001)sh69.7133 191.131 mo(\001)sh69.7133 191.119 mo(\001)sh69.7133 191.107 mo(\001)sh69.7133 191.096 mo(\001)sh69.7133 191.085 mo(\001)sh69.7133 191.075 mo(\001)sh69.7133 191.065 mo(\001)sh69.7133 191.056 mo(\001)sh69.7133 191.048 mo(\001)sh69.7133 191.04 mo(\001)sh69.7133 191.032 mo(\001)sh69.7133 191.024 mo(\001)sh69.7133 191.016 mo(\001)sh69.7133 191.01 mo(\001)sh69.7133 191.003 mo(\001)sh69.7133 190.997 mo(\001)sh69.7133 190.99 mo(\001)sh69.7133 190.984 mo(\001)sh69.7133 190.979 mo(\001)sh69.7133 190.973 mo(\001)sh72.6761 209.062 mo(\001)sh72.6761 197.649 mo(\001)sh72.6761 195.082 mo(\001)sh72.6761 193.929 mo(\001)sh72.6761 193.274 mo(\001)sh72.6761 192.856 mo(\001)sh72.6761 192.573 mo(\001)sh72.6761 192.38 mo(\001)sh72.6761 192.235 mo(\001)sh72.6761 192.104 mo(\001)sh72.6761 191.986 mo(\001)sh72.6761 191.886 mo(\001)sh72.6761 191.801 mo(\001)sh72.6761 191.727 mo(\001)sh72.6761 191.664 mo(\001)sh72.6761 191.61 mo(\001)sh72.6761 191.561 mo(\001)sh72.6761 191.518 mo(\001)sh72.6761 191.48 mo(\001)sh72.6761 191.445 mo(\001)sh72.6761 191.414 mo(\001)sh72.6761 191.386 mo(\001)sh72.6761 191.359 mo(\001)sh72.6761 191.335 mo(\001)sh72.6761 191.312 mo(\001)sh72.6761 191.292 mo(\001)sh72.6761 191.273 mo(\001)sh72.6761 191.255 mo(\001)sh72.6761 191.239 mo(\001)sh72.6761 191.223 mo(\001)sh72.6761 191.208 mo(\001)sh72.6761 191.194 mo(\001)sh72.6761 191.181 mo(\001)sh72.6761 191.169 mo(\001)sh72.6761 191.157 mo(\001)sh72.6761 191.145 mo(\001)sh72.6761 191.135 mo(\001)sh72.6761 191.125 mo(\001)sh72.6761 191.115 mo(\001)sh72.6761 191.106 mo(\001)sh72.6761 191.097 mo(\001)sh72.6761 191.089 mo(\001)sh72.6761 191.081 mo(\001)sh72.6761 191.073 mo(\001)sh72.6761 191.065 mo(\001)sh72.6761 191.058 mo(\001)sh72.6761 191.051 mo(\001)sh72.6761 191.044 mo(\001)sh72.6761 191.038 mo(\001)sh72.6761 191.032 mo(\001)sh75.6389 210.925 mo(\001)sh75.6389 198.369 mo(\001)sh75.6389 195.546 mo(\001)sh75.6389 194.278 mo(\001)sh75.6389 193.558 mo(\001)sh75.6389 193.097 mo(\001)sh75.6389 192.786 mo(\001)sh75.6389 192.574 mo(\001)sh75.6389 192.414 mo(\001)sh75.6389 192.27 mo(\001)sh75.6389 192.14 mo(\001)sh75.6389 192.029 mo(\001)sh75.6389 191.936 mo(\001)sh75.6389 191.855 mo(\001)sh75.6389 191.787 mo(\001)sh75.6389 191.726 mo(\001)sh75.6389 191.673 mo(\001)sh75.6389 191.626 mo(\001)sh75.6389 191.584 mo(\001)sh75.6389 191.546 mo(\001)sh75.6389 191.511 mo(\001)sh75.6389 191.48 mo(\001)sh75.6389 191.451 mo(\001)sh75.6389 191.424 mo(\001)sh75.6389 191.4 mo(\001)sh75.6389 191.377 mo(\001)sh75.6389 191.356 mo(\001)sh75.6389 191.337 mo(\001)sh75.6389 191.318 mo(\001)sh75.6389 191.3 mo(\001)sh75.6389 191.285 mo(\001)sh75.6389 191.269 mo(\001)sh75.6389 191.255 mo(\001)sh75.6389 191.241 mo(\001)sh75.6389 191.228 mo(\001)sh75.6389 191.216 mo(\001)sh75.6389 191.204 mo(\001)sh75.6389 191.193 mo(\001)sh75.6389 191.182 mo(\001)sh75.6389 191.172 mo(\001)sh75.6389 191.163 mo(\001)sh75.6389 191.154 mo(\001)sh75.6389 191.145 mo(\001)sh75.6389 191.135 mo(\001)sh75.6389 191.127 mo(\001)sh75.6389 191.12 mo(\001)sh75.6389 191.112 mo(\001)sh75.6389 191.105 mo(\001)sh75.6389 191.098 mo(\001)sh75.6389 191.091 mo(\001)sh78.6024 212.787 mo(\001)sh78.6024 199.09 mo(\001)sh78.6024 196.01 mo(\001)sh78.6024 194.626 mo(\001)sh78.6024 193.841 mo(\001)sh78.6024 193.338 mo(\001)sh78.6024 192.999 mo(\001)sh78.6024 192.768 mo(\001)sh78.6024 192.594 mo(\001)sh78.6024 192.436 mo(\001)sh78.6024 192.295 mo(\001)sh78.6024 192.174 mo(\001)sh78.6024 192.072 mo(\001)sh78.6024 191.984 mo(\001)sh78.6024 191.909 mo(\001)sh78.6024 191.843 mo(\001)sh78.6024 191.785 mo(\001)sh78.6024 191.733 mo(\001)sh78.6024 191.688 mo(\001)sh78.6024 191.646 mo(\001)sh78.6024 191.608 mo(\001)sh78.6024 191.574 mo(\001)sh78.6024 191.542 mo(\001)sh78.6024 191.514 mo(\001)sh78.6024 191.487 mo(\001)sh78.6024 191.462 mo(\001)sh78.6024 191.439 mo(\001)sh78.6024 191.418 mo(\001)sh78.6024 191.398 mo(\001)sh78.6024 191.379 mo(\001)sh78.6024 191.361 mo(\001)sh78.6024 191.344 mo(\001)sh78.6024 191.328 mo(\001)sh78.6024 191.313 mo(\001)sh78.6024 191.3 mo(\001)sh78.6024 191.286 mo(\001)sh78.6024 191.273 mo(\001)sh78.6024 191.261 mo(\001)sh78.6024 191.25 mo(\001)sh78.6024 191.239 mo(\001)sh78.6024 191.228 mo(\001)sh78.6024 191.218 mo(\001)sh78.6024 191.208 mo(\001)sh78.6024 191.199 mo(\001)sh78.6024 191.19 mo(\001)sh78.6024 191.181 mo(\001)sh78.6024 191.173 mo(\001)sh78.6024 191.165 mo(\001)sh78.6024 191.157 mo(\001)sh78.6024 191.15 mo(\001)sh81.5652 214.648 mo(\001)sh81.5652 199.811 mo(\001)sh81.5652 196.474 mo(\001)sh81.5652 194.975 mo(\001)sh81.5652 194.124 mo(\001)sh81.5652 193.58 mo(\001)sh81.5652 193.213 mo(\001)sh81.5652 192.961 mo(\001)sh81.5652 192.774 mo(\001)sh81.5652 192.603 mo(\001)sh81.5652 192.449 mo(\001)sh81.5652 192.319 mo(\001)sh81.5652 192.207 mo(\001)sh81.5652 192.113 mo(\001)sh81.5652 192.031 mo(\001)sh81.5652 191.959 mo(\001)sh81.5652 191.897 mo(\001)sh81.5652 191.841 mo(\001)sh81.5652 191.791 mo(\001)sh81.5652 191.746 mo(\001)sh81.5652 191.706 mo(\001)sh81.5652 191.668 mo(\001)sh81.5652 191.634 mo(\001)sh81.5652 191.602 mo(\001)sh81.5652 191.574 mo(\001)sh81.5652 191.547 mo(\001)sh81.5652 191.522 mo(\001)sh81.5652 191.499 mo(\001)sh81.5652 191.477 mo(\001)sh81.5652 191.456 mo(\001)sh81.5652 191.438 mo(\001)sh81.5652 191.419 mo(\001)sh81.5652 191.402 mo(\001)sh81.5652 191.386 mo(\001)sh81.5652 191.371 mo(\001)sh81.5652 191.356 mo(\001)sh81.5652 191.343 mo(\001)sh81.5652 191.329 mo(\001)sh81.5652 191.317 mo(\001)sh81.5652 191.305 mo(\001)sh81.5652 191.294 mo(\001)sh81.5652 191.282 mo(\001)sh81.5652 191.272 mo(\001)sh81.5652 191.262 mo(\001)sh81.5652 191.252 mo(\001)sh81.5652 191.242 mo(\001)sh81.5652 191.234 mo(\001)sh81.5652 191.225 mo(\001)sh81.5652 191.217 mo(\001)sh81.5652 191.209 mo(\001)sh84.528 216.511 mo(\001)sh84.528 200.532 mo(\001)sh84.528 196.938 mo(\001)sh84.528 195.323 mo(\001)sh84.528 194.407 mo(\001)sh84.528 193.821 mo(\001)sh84.528 193.426 mo(\001)sh84.528 193.155 mo(\001)sh84.528 192.953 mo(\001)sh84.528 192.768 mo(\001)sh84.528 192.603 mo(\001)sh84.528 192.463 mo(\001)sh84.528 192.344 mo(\001)sh84.528 192.241 mo(\001)sh84.528 192.153 mo(\001)sh84.528 192.076 mo(\001)sh84.528 192.009 mo(\001)sh84.528 191.949 mo(\001)sh84.528 191.895 mo(\001)sh84.528 191.846 mo(\001)sh84.528 191.803 mo(\001)sh84.528 191.763 mo(\001)sh84.528 191.726 mo(\001)sh84.528 191.692 mo(\001)sh84.528 191.661 mo(\001)sh84.528 191.632 mo(\001)sh84.528 191.605 mo(\001)sh84.528 191.58 mo(\001)sh84.528 191.556 mo(\001)sh84.528 191.535 mo(\001)sh84.528 191.514 mo(\001)sh84.528 191.495 mo(\001)sh84.528 191.476 mo(\001)sh84.528 191.459 mo(\001)sh84.528 191.442 mo(\001)sh84.528 191.427 mo(\001)sh84.528 191.412 mo(\001)sh84.528 191.398 mo(\001)sh84.528 191.384 mo(\001)sh84.528 191.371 mo(\001)sh84.528 191.359 mo(\001)sh84.528 191.347 mo(\001)sh84.528 191.336 mo(\001)sh84.528 191.325 mo(\001)sh84.528 191.315 mo(\001)sh84.528 191.304 mo(\001)sh84.528 191.294 mo(\001)sh84.528 191.285 mo(\001)sh84.528 191.276 mo(\001)sh84.528 191.268 mo(\001)sh87.4916 218.373 mo(\001)sh87.4916 201.252 mo(\001)sh87.4916 197.402 mo(\001)sh87.4916 195.672 mo(\001)sh87.4916 194.69 mo(\001)sh87.4916 194.063 mo(\001)sh87.4916 193.639 mo(\001)sh87.4916 193.349 mo(\001)sh87.4916 193.132 mo(\001)sh87.4916 192.935 mo(\001)sh87.4916 192.758 mo(\001)sh87.4916 192.607 mo(\001)sh87.4916 192.479 mo(\001)sh87.4916 192.37 mo(\001)sh87.4916 192.276 mo(\001)sh87.4916 192.193 mo(\001)sh87.4916 192.121 mo(\001)sh87.4916 192.057 mo(\001)sh87.4916 191.999 mo(\001)sh87.4916 191.947 mo(\001)sh87.4916 191.9 mo(\001)sh87.4916 191.857 mo(\001)sh87.4916 191.818 mo(\001)sh87.4916 191.782 mo(\001)sh87.4916 191.748 mo(\001)sh87.4916 191.717 mo(\001)sh87.4916 191.688 mo(\001)sh87.4916 191.661 mo(\001)sh87.4916 191.636 mo(\001)sh87.4916 191.613 mo(\001)sh87.4916 191.59 mo(\001)sh87.4916 191.57 mo(\001)sh87.4916 191.55 mo(\001)sh87.4916 191.532 mo(\001)sh87.4916 191.514 mo(\001)sh87.4916 191.497 mo(\001)sh87.4916 191.481 mo(\001)sh87.4916 191.466 mo(\001)sh87.4916 191.451 mo(\001)sh87.4916 191.438 mo(\001)sh87.4916 191.425 mo(\001)sh87.4916 191.412 mo(\001)sh87.4916 191.4 mo(\001)sh87.4916 191.388 mo(\001)sh87.4916 191.376 mo(\001)sh87.4916 191.366 mo(\001)sh87.4916 191.355 mo(\001)sh87.4916 191.346 mo(\001)sh87.4916 191.336 mo(\001)sh87.4916 191.327 mo(\001)sh90.4544 220.234 mo(\001)sh90.4544 201.973 mo(\001)sh90.4544 197.866 mo(\001)sh90.4544 196.02 mo(\001)sh90.4544 194.973 mo(\001)sh90.4544 194.304 mo(\001)sh90.4544 193.851 mo(\001)sh90.4544 193.543 mo(\001)sh90.4544 193.311 mo(\001)sh90.4544 193.1 mo(\001)sh90.4544 192.912 mo(\001)sh90.4544 192.751 mo(\001)sh90.4544 192.615 mo(\001)sh90.4544 192.498 mo(\001)sh90.4544 192.398 mo(\001)sh90.4544 192.31 mo(\001)sh90.4544 192.233 mo(\001)sh90.4544 192.164 mo(\001)sh90.4544 192.103 mo(\001)sh90.4544 192.047 mo(\001)sh90.4544 191.997 mo(\001)sh90.4544 191.951 mo(\001)sh90.4544 191.909 mo(\001)sh90.4544 191.871 mo(\001)sh90.4544 191.835 mo(\001)sh90.4544 191.802 mo(\001)sh90.4544 191.771 mo(\001)sh90.4544 191.743 mo(\001)sh90.4544 191.716 mo(\001)sh90.4544 191.691 mo(\001)sh90.4544 191.667 mo(\001)sh90.4544 191.645 mo(\001)sh90.4544 191.624 mo(\001)sh90.4544 191.604 mo(\001)sh90.4544 191.585 mo(\001)sh90.4544 191.567 mo(\001)sh90.4544 191.55 mo(\001)sh90.4544 191.534 mo(\001)sh90.4544 191.519 mo(\001)sh90.4544 191.504 mo(\001)sh90.4544 191.489 mo(\001)sh90.4544 191.476 mo(\001)sh90.4544 191.463 mo(\001)sh90.4544 191.451 mo(\001)sh90.4544 191.439 mo(\001)sh90.4544 191.428 mo(\001)sh90.4544 191.416 mo(\001)sh90.4544 191.406 mo(\001)sh90.4544 191.395 mo(\001)sh90.4544 191.385 mo(\001)sh93.4171 222.097 mo(\001)sh93.4171 202.694 mo(\001)sh93.4171 198.329 mo(\001)sh93.4171 196.369 mo(\001)sh93.4171 195.256 mo(\001)sh93.4171 194.546 mo(\001)sh93.4171 194.064 mo(\001)sh93.4171 193.736 mo(\001)sh93.4171 193.49 mo(\001)sh93.4171 193.267 mo(\001)sh93.4171 193.066 mo(\001)sh93.4171 192.895 mo(\001)sh93.4171 192.75 mo(\001)sh93.4171 192.627 mo(\001)sh93.4171 192.52 mo(\001)sh93.4171 192.426 mo(\001)sh93.4171 192.344 mo(\001)sh93.4171 192.271 mo(\001)sh93.4171 192.206 mo(\001)sh93.4171 192.148 mo(\001)sh93.4171 192.094 mo(\001)sh93.4171 192.045 mo(\001)sh93.4171 192.001 mo(\001)sh93.4171 191.96 mo(\001)sh93.4171 191.922 mo(\001)sh93.4171 191.887 mo(\001)sh93.4171 191.854 mo(\001)sh93.4171 191.824 mo(\001)sh93.4171 191.795 mo(\001)sh93.4171 191.769 mo(\001)sh93.4171 191.743 mo(\001)sh93.4171 191.72 mo(\001)sh93.4171 191.697 mo(\001)sh93.4171 191.676 mo(\001)sh93.4171 191.657 mo(\001)sh93.4171 191.638 mo(\001)sh93.4171 191.62 mo(\001)sh93.4171 191.602 mo(\001)sh93.4171 191.586 mo(\001)sh93.4171 191.57 mo(\001)sh93.4171 191.555 mo(\001)sh93.4171 191.541 mo(\001)sh93.4171 191.527 mo(\001)sh93.4171 191.513 mo(\001)sh93.4171 191.501 mo(\001)sh93.4171 191.489 mo(\001)sh93.4171 191.477 mo(\001)sh93.4171 191.466 mo(\001)sh93.4171 191.455 mo(\001)sh93.4171 191.444 mo(\001)sh96.3799 223.959 mo(\001)sh96.3799 203.415 mo(\001)sh96.3799 198.793 mo(\001)sh96.3799 196.718 mo(\001)sh96.3799 195.539 mo(\001)sh96.3799 194.787 mo(\001)sh96.3799 194.277 mo(\001)sh96.3799 193.93 mo(\001)sh96.3799 193.67 mo(\001)sh96.3799 193.432 mo(\001)sh96.3799 193.221 mo(\001)sh96.3799 193.04 mo(\001)sh96.3799 192.886 mo(\001)sh96.3799 192.755 mo(\001)sh96.3799 192.642 mo(\001)sh96.3799 192.543 mo(\001)sh96.3799 192.456 mo(\001)sh96.3799 192.379 mo(\001)sh96.3799 192.31 mo(\001)sh96.3799 192.248 mo(\001)sh96.3799 192.191 mo(\001)sh96.3799 192.139 mo(\001)sh96.3799 192.093 mo(\001)sh96.3799 192.049 mo(\001)sh96.3799 192.009 mo(\001)sh96.3799 191.972 mo(\001)sh96.3799 191.938 mo(\001)sh96.3799 191.905 mo(\001)sh96.3799 191.875 mo(\001)sh96.3799 191.846 mo(\001)sh96.3799 191.82 mo(\001)sh96.3799 191.795 mo(\001)sh96.3799 191.771 mo(\001)sh96.3799 191.749 mo(\001)sh96.3799 191.728 mo(\001)sh96.3799 191.708 mo(\001)sh96.3799 191.689 mo(\001)sh96.3799 191.67 mo(\001)sh96.3799 191.653 mo(\001)sh96.3799 191.636 mo(\001)sh96.3799 191.621 mo(\001)sh96.3799 191.605 mo(\001)sh96.3799 191.591 mo(\001)sh96.3799 191.577 mo(\001)sh96.3799 191.563 mo(\001)sh96.3799 191.55 mo(\001)sh96.3799 191.538 mo(\001)sh96.3799 191.526 mo(\001)sh96.3799 191.514 mo(\001)sh96.3799 191.504 mo(\001)sh99.3435 225.82 mo(\001)sh99.3435 204.135 mo(\001)sh99.3435 199.258 mo(\001)sh99.3435 197.066 mo(\001)sh99.3435 195.822 mo(\001)sh99.3435 195.028 mo(\001)sh99.3435 194.491 mo(\001)sh99.3435 194.124 mo(\001)sh99.3435 193.849 mo(\001)sh99.3435 193.599 mo(\001)sh99.3435 193.375 mo(\001)sh99.3435 193.184 mo(\001)sh99.3435 193.022 mo(\001)sh99.3435 192.883 mo(\001)sh99.3435 192.764 mo(\001)sh99.3435 192.66 mo(\001)sh99.3435 192.568 mo(\001)sh99.3435 192.487 mo(\001)sh99.3435 192.413 mo(\001)sh99.3435 192.348 mo(\001)sh99.3435 192.288 mo(\001)sh99.3435 192.233 mo(\001)sh99.3435 192.184 mo(\001)sh99.3435 192.139 mo(\001)sh99.3435 192.096 mo(\001)sh99.3435 192.057 mo(\001)sh99.3435 192.02 mo(\001)sh99.3435 191.986 mo(\001)sh99.3435 191.955 mo(\001)sh99.3435 191.925 mo(\001)sh99.3435 191.897 mo(\001)sh99.3435 191.87 mo(\001)sh99.3435 191.846 mo(\001)sh99.3435 191.822 mo(\001)sh99.3435 191.8 mo(\001)sh99.3435 191.778 mo(\001)sh99.3435 191.758 mo(\001)sh99.3435 191.739 mo(\001)sh99.3435 191.721 mo(\001)sh99.3435 191.703 mo(\001)sh99.3435 191.686 mo(\001)sh99.3435 191.67 mo(\001)sh99.3435 191.654 mo(\001)sh99.3435 191.64 mo(\001)sh99.3435 191.626 mo(\001)sh99.3435 191.612 mo(\001)sh99.3435 191.599 mo(\001)sh99.3435 191.587 mo(\001)sh99.3435 191.574 mo(\001)sh99.3435 191.562 mo(\001)sh102.306 227.683 mo(\001)sh102.306 204.855 mo(\001)sh102.306 199.722 mo(\001)sh102.306 197.415 mo(\001)sh102.306 196.105 mo(\001)sh102.306 195.269 mo(\001)sh102.306 194.704 mo(\001)sh102.306 194.317 mo(\001)sh102.306 194.028 mo(\001)sh102.306 193.765 mo(\001)sh102.306 193.53 mo(\001)sh102.306 193.329 mo(\001)sh102.306 193.158 mo(\001)sh102.306 193.012 mo(\001)sh102.306 192.886 mo(\001)sh102.306 192.777 mo(\001)sh102.306 192.68 mo(\001)sh102.306 192.594 mo(\001)sh102.306 192.517 mo(\001)sh102.306 192.448 mo(\001)sh102.306 192.386 mo(\001)sh102.306 192.328 mo(\001)sh102.306 192.276 mo(\001)sh102.306 192.227 mo(\001)sh102.306 192.183 mo(\001)sh102.306 192.142 mo(\001)sh102.306 192.103 mo(\001)sh102.306 192.068 mo(\001)sh102.306 192.034 mo(\001)sh102.306 192.003 mo(\001)sh102.306 191.973 mo(\001)sh102.306 191.945 mo(\001)sh102.306 191.919 mo(\001)sh102.306 191.895 mo(\001)sh102.306 191.87 mo(\001)sh102.306 191.849 mo(\001)sh102.306 191.827 mo(\001)sh102.306 191.807 mo(\001)sh102.306 191.788 mo(\001)sh102.306 191.769 mo(\001)sh102.306 191.751 mo(\001)sh102.306 191.735 mo(\001)sh102.306 191.718 mo(\001)sh102.306 191.703 mo(\001)sh102.306 191.688 mo(\001)sh102.306 191.674 mo(\001)sh102.306 191.66 mo(\001)sh102.306 191.647 mo(\001)sh102.306 191.634 mo(\001)sh102.306 191.621 mo(\001)sh105.269 229.545 mo(\001)sh105.269 205.576 mo(\001)sh105.269 200.186 mo(\001)sh105.269 197.764 mo(\001)sh105.269 196.389 mo(\001)sh105.269 195.511 mo(\001)sh105.269 194.917 mo(\001)sh105.269 194.512 mo(\001)sh105.269 194.207 mo(\001)sh105.269 193.931 mo(\001)sh105.269 193.684 mo(\001)sh105.269 193.473 mo(\001)sh105.269 193.294 mo(\001)sh105.269 193.14 mo(\001)sh105.269 193.008 mo(\001)sh105.269 192.893 mo(\001)sh105.269 192.792 mo(\001)sh105.269 192.702 mo(\001)sh105.269 192.621 mo(\001)sh105.269 192.548 mo(\001)sh105.269 192.483 mo(\001)sh105.269 192.423 mo(\001)sh105.269 192.368 mo(\001)sh105.269 192.317 mo(\001)sh105.269 192.27 mo(\001)sh105.269 192.227 mo(\001)sh105.269 192.186 mo(\001)sh105.269 192.149 mo(\001)sh105.269 192.114 mo(\001)sh105.269 192.081 mo(\001)sh105.269 192.05 mo(\001)sh105.269 192.02 mo(\001)sh105.269 191.993 mo(\001)sh105.269 191.967 mo(\001)sh105.269 191.942 mo(\001)sh105.269 191.919 mo(\001)sh105.269 191.896 mo(\001)sh105.269 191.875 mo(\001)sh105.269 191.855 mo(\001)sh105.269 191.836 mo(\001)sh105.269 191.817 mo(\001)sh105.269 191.799 mo(\001)sh105.269 191.782 mo(\001)sh105.269 191.766 mo(\001)sh105.269 191.75 mo(\001)sh105.269 191.735 mo(\001)sh105.269 191.721 mo(\001)sh105.269 191.707 mo(\001)sh105.269 191.693 mo(\001)sh105.269 191.681 mo(\001)sh108.233 231.406 mo(\001)sh108.233 206.297 mo(\001)sh108.233 200.65 mo(\001)sh108.233 198.112 mo(\001)sh108.233 196.672 mo(\001)sh108.233 195.752 mo(\001)sh108.233 195.13 mo(\001)sh108.233 194.705 mo(\001)sh108.233 194.387 mo(\001)sh108.233 194.097 mo(\001)sh108.233 193.838 mo(\001)sh108.233 193.617 mo(\001)sh108.233 193.429 mo(\001)sh108.233 193.269 mo(\001)sh108.233 193.13 mo(\001)sh108.233 193.01 mo(\001)sh108.233 192.904 mo(\001)sh108.233 192.81 mo(\001)sh108.233 192.725 mo(\001)sh108.233 192.648 mo(\001)sh108.233 192.58 mo(\001)sh108.233 192.517 mo(\001)sh108.233 192.459 mo(\001)sh108.233 192.406 mo(\001)sh108.233 192.357 mo(\001)sh108.233 192.312 mo(\001)sh108.233 192.27 mo(\001)sh108.233 192.23 mo(\001)sh108.233 192.193 mo(\001)sh108.233 192.159 mo(\001)sh108.233 192.126 mo(\001)sh108.233 192.096 mo(\001)sh108.233 192.067 mo(\001)sh108.233 192.039 mo(\001)sh108.233 192.014 mo(\001)sh108.233 191.989 mo(\001)sh108.233 191.965 mo(\001)sh108.233 191.943 mo(\001)sh108.233 191.922 mo(\001)sh108.233 191.902 mo(\001)sh108.233 191.882 mo(\001)sh108.233 191.864 mo(\001)sh108.233 191.846 mo(\001)sh108.233 191.829 mo(\001)sh108.233 191.812 mo(\001)sh108.233 191.797 mo(\001)sh108.233 191.782 mo(\001)sh108.233 191.767 mo(\001)sh108.233 191.753 mo(\001)sh108.233 191.739 mo(\001)sh111.195 233.269 mo(\001)sh111.195 207.018 mo(\001)sh111.195 201.114 mo(\001)sh111.195 198.461 mo(\001)sh111.195 196.955 mo(\001)sh111.195 195.993 mo(\001)sh111.195 195.343 mo(\001)sh111.195 194.899 mo(\001)sh111.195 194.566 mo(\001)sh111.195 194.263 mo(\001)sh111.195 193.993 mo(\001)sh111.195 193.762 mo(\001)sh111.195 193.565 mo(\001)sh111.195 193.398 mo(\001)sh111.195 193.253 mo(\001)sh111.195 193.127 mo(\001)sh111.195 193.016 mo(\001)sh111.195 192.917 mo(\001)sh111.195 192.828 mo(\001)sh111.195 192.749 mo(\001)sh111.195 192.677 mo(\001)sh111.195 192.611 mo(\001)sh111.195 192.55 mo(\001)sh111.195 192.496 mo(\001)sh111.195 192.444 mo(\001)sh111.195 192.397 mo(\001)sh111.195 192.352 mo(\001)sh111.195 192.311 mo(\001)sh111.195 192.273 mo(\001)sh111.195 192.236 mo(\001)sh111.195 192.203 mo(\001)sh111.195 192.171 mo(\001)sh111.195 192.141 mo(\001)sh111.195 192.112 mo(\001)sh111.195 192.085 mo(\001)sh111.195 192.06 mo(\001)sh111.195 192.035 mo(\001)sh111.195 192.011 mo(\001)sh111.195 191.989 mo(\001)sh111.195 191.968 mo(\001)sh111.195 191.948 mo(\001)sh111.195 191.928 mo(\001)sh111.195 191.91 mo(\001)sh111.195 191.892 mo(\001)sh111.195 191.875 mo(\001)sh111.195 191.858 mo(\001)sh111.195 191.843 mo(\001)sh111.195 191.828 mo(\001)sh111.195 191.812 mo(\001)sh111.195 191.798 mo(\001)sh114.158 235.131 mo(\001)sh114.158 207.738 mo(\001)sh114.158 201.578 mo(\001)sh114.158 198.809 mo(\001)sh114.158 197.238 mo(\001)sh114.158 196.235 mo(\001)sh114.158 195.556 mo(\001)sh114.158 195.092 mo(\001)sh114.158 194.745 mo(\001)sh114.158 194.43 mo(\001)sh114.158 194.147 mo(\001)sh114.158 193.905 mo(\001)sh114.158 193.701 mo(\001)sh114.158 193.526 mo(\001)sh114.158 193.375 mo(\001)sh114.158 193.243 mo(\001)sh114.158 193.127 mo(\001)sh114.158 193.024 mo(\001)sh114.158 192.932 mo(\001)sh114.158 192.85 mo(\001)sh114.158 192.774 mo(\001)sh114.158 192.705 mo(\001)sh114.158 192.642 mo(\001)sh114.158 192.584 mo(\001)sh114.158 192.531 mo(\001)sh114.158 192.481 mo(\001)sh114.158 192.435 mo(\001)sh114.158 192.392 mo(\001)sh114.158 192.352 mo(\001)sh114.158 192.315 mo(\001)sh114.158 192.279 mo(\001)sh114.158 192.246 mo(\001)sh114.158 192.215 mo(\001)sh114.158 192.185 mo(\001)sh114.158 192.157 mo(\001)sh114.158 192.13 mo(\001)sh114.158 192.104 mo(\001)sh114.158 192.08 mo(\001)sh114.158 192.057 mo(\001)sh114.158 192.035 mo(\001)sh114.158 192.014 mo(\001)sh114.158 191.993 mo(\001)sh114.158 191.974 mo(\001)sh114.158 191.955 mo(\001)sh114.158 191.938 mo(\001)sh114.158 191.92 mo(\001)sh114.158 191.904 mo(\001)sh114.158 191.887 mo(\001)sh114.158 191.872 mo(\001)sh114.158 191.857 mo(\001)sh117.122 236.992 mo(\001)sh117.122 208.459 mo(\001)sh117.122 202.042 mo(\001)sh117.122 199.158 mo(\001)sh117.122 197.521 mo(\001)sh117.122 196.476 mo(\001)sh117.122 195.769 mo(\001)sh117.122 195.287 mo(\001)sh117.122 194.924 mo(\001)sh117.122 194.596 mo(\001)sh117.122 194.302 mo(\001)sh117.122 194.05 mo(\001)sh117.122 193.837 mo(\001)sh117.122 193.655 mo(\001)sh117.122 193.497 mo(\001)sh117.122 193.36 mo(\001)sh117.122 193.24 mo(\001)sh117.122 193.132 mo(\001)sh117.122 193.036 mo(\001)sh117.122 192.95 mo(\001)sh117.122 192.871 mo(\001)sh117.122 192.8 mo(\001)sh117.122 192.734 mo(\001)sh117.122 192.674 mo(\001)sh117.122 192.618 mo(\001)sh117.122 192.566 mo(\001)sh117.122 192.519 mo(\001)sh117.122 192.474 mo(\001)sh117.122 192.432 mo(\001)sh117.122 192.392 mo(\001)sh117.122 192.355 mo(\001)sh117.122 192.321 mo(\001)sh117.122 192.288 mo(\001)sh117.122 192.258 mo(\001)sh117.122 192.227 mo(\001)sh117.122 192.2 mo(\001)sh117.122 192.173 mo(\001)sh117.122 192.148 mo(\001)sh117.122 192.123 mo(\001)sh117.122 192.101 mo(\001)sh117.122 192.079 mo(\001)sh117.122 192.058 mo(\001)sh117.122 192.038 mo(\001)sh117.122 192.018 mo(\001)sh117.122 191.999 mo(\001)sh117.122 191.981 mo(\001)sh117.122 191.964 mo(\001)sh117.122 191.947 mo(\001)sh117.122 191.931 mo(\001)sh117.122 191.916 mo(\001)sh120.085 238.855 mo(\001)sh120.085 209.18 mo(\001)sh120.085 202.506 mo(\001)sh120.085 199.507 mo(\001)sh120.085 197.804 mo(\001)sh120.085 196.718 mo(\001)sh120.085 195.983 mo(\001)sh120.085 195.48 mo(\001)sh120.085 195.104 mo(\001)sh120.085 194.762 mo(\001)sh120.085 194.456 mo(\001)sh120.085 194.195 mo(\001)sh120.085 193.972 mo(\001)sh120.085 193.783 mo(\001)sh120.085 193.619 mo(\001)sh120.085 193.477 mo(\001)sh120.085 193.351 mo(\001)sh120.085 193.24 mo(\001)sh120.085 193.14 mo(\001)sh120.085 193.05 mo(\001)sh120.085 192.969 mo(\001)sh120.085 192.894 mo(\001)sh120.085 192.825 mo(\001)sh120.085 192.763 mo(\001)sh120.085 192.705 mo(\001)sh120.085 192.651 mo(\001)sh120.085 192.602 mo(\001)sh120.085 192.555 mo(\001)sh120.085 192.511 mo(\001)sh120.085 192.471 mo(\001)sh120.085 192.432 mo(\001)sh120.085 192.396 mo(\001)sh120.085 192.362 mo(\001)sh120.085 192.33 mo(\001)sh120.085 192.299 mo(\001)sh120.085 192.27 mo(\001)sh120.085 192.243 mo(\001)sh120.085 192.216 mo(\001)sh120.085 192.191 mo(\001)sh120.085 192.167 mo(\001)sh120.085 192.145 mo(\001)sh120.085 192.122 mo(\001)sh120.085 192.101 mo(\001)sh120.085 192.081 mo(\001)sh120.085 192.062 mo(\001)sh120.085 192.043 mo(\001)sh120.085 192.025 mo(\001)sh120.085 192.008 mo(\001)sh120.085 191.991 mo(\001)sh120.085 191.975 mo(\001)sh123.047 240.717 mo(\001)sh123.047 209.9 mo(\001)sh123.047 202.969 mo(\001)sh123.047 199.855 mo(\001)sh123.047 198.088 mo(\001)sh123.047 196.959 mo(\001)sh123.047 196.195 mo(\001)sh123.047 195.674 mo(\001)sh123.047 195.283 mo(\001)sh123.047 194.928 mo(\001)sh123.047 194.61 mo(\001)sh123.047 194.339 mo(\001)sh123.047 194.108 mo(\001)sh123.047 193.911 mo(\001)sh123.047 193.742 mo(\001)sh123.047 193.594 mo(\001)sh123.047 193.463 mo(\001)sh123.047 193.347 mo(\001)sh123.047 193.243 mo(\001)sh123.047 193.15 mo(\001)sh123.047 193.066 mo(\001)sh123.047 192.988 mo(\001)sh123.047 192.917 mo(\001)sh123.047 192.853 mo(\001)sh123.047 192.792 mo(\001)sh123.047 192.737 mo(\001)sh123.047 192.685 mo(\001)sh123.047 192.636 mo(\001)sh123.047 192.591 mo(\001)sh123.047 192.549 mo(\001)sh123.047 192.509 mo(\001)sh123.047 192.471 mo(\001)sh123.047 192.436 mo(\001)sh123.047 192.402 mo(\001)sh123.047 192.371 mo(\001)sh123.047 192.34 mo(\001)sh123.047 192.312 mo(\001)sh123.047 192.285 mo(\001)sh123.047 192.258 mo(\001)sh123.047 192.233 mo(\001)sh123.047 192.209 mo(\001)sh123.047 192.187 mo(\001)sh123.047 192.165 mo(\001)sh123.047 192.144 mo(\001)sh123.047 192.124 mo(\001)sh123.047 192.105 mo(\001)sh123.047 192.086 mo(\001)sh123.047 192.068 mo(\001)sh123.047 192.05 mo(\001)sh123.047 192.034 mo(\001)sh126.011 242.579 mo(\001)sh126.011 210.621 mo(\001)sh126.011 203.433 mo(\001)sh126.011 200.204 mo(\001)sh126.011 198.371 mo(\001)sh126.011 197.2 mo(\001)sh126.011 196.408 mo(\001)sh126.011 195.867 mo(\001)sh126.011 195.462 mo(\001)sh126.011 195.094 mo(\001)sh126.011 194.765 mo(\001)sh126.011 194.483 mo(\001)sh126.011 194.244 mo(\001)sh126.011 194.04 mo(\001)sh126.011 193.864 mo(\001)sh126.011 193.71 mo(\001)sh126.011 193.575 mo(\001)sh126.011 193.455 mo(\001)sh126.011 193.347 mo(\001)sh126.011 193.25 mo(\001)sh126.011 193.163 mo(\001)sh126.011 193.082 mo(\001)sh126.011 193.009 mo(\001)sh126.011 192.942 mo(\001)sh126.011 192.879 mo(\001)sh126.011 192.822 mo(\001)sh126.011 192.768 mo(\001)sh126.011 192.718 mo(\001)sh126.011 192.671 mo(\001)sh126.011 192.627 mo(\001)sh126.011 192.585 mo(\001)sh126.011 192.547 mo(\001)sh126.011 192.51 mo(\001)sh126.011 192.475 mo(\001)sh126.011 192.442 mo(\001)sh126.011 192.411 mo(\001)sh126.011 192.381 mo(\001)sh126.011 192.353 mo(\001)sh126.011 192.325 mo(\001)sh126.011 192.3 mo(\001)sh126.011 192.275 mo(\001)sh126.011 192.252 mo(\001)sh126.011 192.229 mo(\001)sh126.011 192.207 mo(\001)sh126.011 192.186 mo(\001)sh126.011 192.167 mo(\001)sh126.011 192.147 mo(\001)sh126.011 192.128 mo(\001)sh126.011 192.11 mo(\001)sh126.011 192.093 mo(\001)sh128.974 244.441 mo(\001)sh128.974 211.341 mo(\001)sh128.974 203.897 mo(\001)sh128.974 200.553 mo(\001)sh128.974 198.654 mo(\001)sh128.974 197.442 mo(\001)sh128.974 196.621 mo(\001)sh128.974 196.062 mo(\001)sh128.974 195.642 mo(\001)sh128.974 195.26 mo(\001)sh128.974 194.919 mo(\001)sh128.974 194.627 mo(\001)sh128.974 194.38 mo(\001)sh128.974 194.168 mo(\001)sh128.974 193.986 mo(\001)sh128.974 193.827 mo(\001)sh128.974 193.687 mo(\001)sh128.974 193.563 mo(\001)sh128.974 193.451 mo(\001)sh128.974 193.35 mo(\001)sh128.974 193.26 mo(\001)sh128.974 193.176 mo(\001)sh128.974 193.1 mo(\001)sh128.974 193.031 mo(\001)sh128.974 192.966 mo(\001)sh128.974 192.906 mo(\001)sh128.974 192.851 mo(\001)sh128.974 192.799 mo(\001)sh128.974 192.75 mo(\001)sh128.974 192.705 mo(\001)sh128.974 192.662 mo(\001)sh128.974 192.621 mo(\001)sh128.974 192.584 mo(\001)sh128.974 192.548 mo(\001)sh128.974 192.514 mo(\001)sh128.974 192.481 mo(\001)sh128.974 192.45 mo(\001)sh128.974 192.421 mo(\001)sh128.974 192.393 mo(\001)sh128.974 192.366 mo(\001)sh128.974 192.34 mo(\001)sh128.974 192.316 mo(\001)sh128.974 192.293 mo(\001)sh128.974 192.27 mo(\001)sh128.974 192.249 mo(\001)sh128.974 192.228 mo(\001)sh128.974 192.208 mo(\001)sh128.974 192.188 mo(\001)sh128.974 192.17 mo(\001)sh128.974 192.152 mo(\001)sh131.936 246.303 mo(\001)sh131.936 212.062 mo(\001)sh131.936 204.361 mo(\001)sh131.936 200.901 mo(\001)sh131.936 198.937 mo(\001)sh131.936 197.683 mo(\001)sh131.936 196.834 mo(\001)sh131.936 196.255 mo(\001)sh131.936 195.822 mo(\001)sh131.936 195.427 mo(\001)sh131.936 195.074 mo(\001)sh131.936 194.772 mo(\001)sh131.936 194.516 mo(\001)sh131.936 194.297 mo(\001)sh131.936 194.108 mo(\001)sh131.936 193.944 mo(\001)sh131.936 193.799 mo(\001)sh131.936 193.671 mo(\001)sh131.936 193.555 mo(\001)sh131.936 193.451 mo(\001)sh131.936 193.357 mo(\001)sh131.936 193.271 mo(\001)sh131.936 193.192 mo(\001)sh131.936 193.12 mo(\001)sh131.936 193.053 mo(\001)sh131.936 192.991 mo(\001)sh131.936 192.934 mo(\001)sh131.936 192.881 mo(\001)sh131.936 192.83 mo(\001)sh131.936 192.783 mo(\001)sh131.936 192.739 mo(\001)sh131.936 192.697 mo(\001)sh131.936 192.658 mo(\001)sh131.936 192.62 mo(\001)sh131.936 192.585 mo(\001)sh131.936 192.551 mo(\001)sh131.936 192.52 mo(\001)sh131.936 192.489 mo(\001)sh131.936 192.46 mo(\001)sh131.936 192.432 mo(\001)sh131.936 192.406 mo(\001)sh131.936 192.381 mo(\001)sh131.936 192.356 mo(\001)sh131.936 192.333 mo(\001)sh131.936 192.311 mo(\001)sh131.936 192.289 mo(\001)sh131.936 192.269 mo(\001)sh131.936 192.249 mo(\001)sh131.936 192.23 mo(\001)sh131.936 192.211 mo(\001)sh134.9 248.165 mo(\001)sh134.9 212.783 mo(\001)sh134.9 204.825 mo(\001)sh134.9 201.25 mo(\001)sh134.9 199.22 mo(\001)sh134.9 197.924 mo(\001)sh134.9 197.048 mo(\001)sh134.9 196.449 mo(\001)sh134.9 196.001 mo(\001)sh134.9 195.593 mo(\001)sh134.9 195.228 mo(\001)sh134.9 194.916 mo(\001)sh134.9 194.651 mo(\001)sh134.9 194.425 mo(\001)sh134.9 194.231 mo(\001)sh134.9 194.061 mo(\001)sh134.9 193.911 mo(\001)sh134.9 193.777 mo(\001)sh134.9 193.658 mo(\001)sh134.9 193.551 mo(\001)sh134.9 193.454 mo(\001)sh134.9 193.366 mo(\001)sh134.9 193.284 mo(\001)sh134.9 193.21 mo(\001)sh134.9 193.14 mo(\001)sh134.9 193.076 mo(\001)sh134.9 193.017 mo(\001)sh134.9 192.961 mo(\001)sh134.9 192.91 mo(\001)sh134.9 192.861 mo(\001)sh134.9 192.815 mo(\001)sh134.9 192.772 mo(\001)sh134.9 192.731 mo(\001)sh134.9 192.693 mo(\001)sh134.9 192.656 mo(\001)sh134.9 192.621 mo(\001)sh134.9 192.589 mo(\001)sh134.9 192.557 mo(\001)sh134.9 192.527 mo(\001)sh134.9 192.499 mo(\001)sh134.9 192.472 mo(\001)sh134.9 192.445 mo(\001)sh134.9 192.42 mo(\001)sh134.9 192.396 mo(\001)sh134.9 192.373 mo(\001)sh134.9 192.351 mo(\001)sh134.9 192.329 mo(\001)sh134.9 192.309 mo(\001)sh134.9 192.289 mo(\001)sh134.9 192.27 mo(\001)sh137.863 250.027 mo(\001)sh137.863 213.504 mo(\001)sh137.863 205.289 mo(\001)sh137.863 201.599 mo(\001)sh137.863 199.504 mo(\001)sh137.863 198.166 mo(\001)sh137.863 197.261 mo(\001)sh137.863 196.643 mo(\001)sh137.863 196.18 mo(\001)sh137.863 195.759 mo(\001)sh137.863 195.382 mo(\001)sh137.863 195.06 mo(\001)sh137.863 194.787 mo(\001)sh137.863 194.554 mo(\001)sh137.863 194.353 mo(\001)sh137.863 194.177 mo(\001)sh137.863 194.023 mo(\001)sh137.863 193.885 mo(\001)sh137.863 193.762 mo(\001)sh137.863 193.652 mo(\001)sh137.863 193.551 mo(\001)sh137.863 193.46 mo(\001)sh137.863 193.376 mo(\001)sh137.863 193.298 mo(\001)sh137.863 193.228 mo(\001)sh137.863 193.161 mo(\001)sh137.863 193.1 mo(\001)sh137.863 193.042 mo(\001)sh137.863 192.989 mo(\001)sh137.863 192.939 mo(\001)sh137.863 192.892 mo(\001)sh137.863 192.847 mo(\001)sh137.863 192.805 mo(\001)sh137.863 192.765 mo(\001)sh137.863 192.728 mo(\001)sh137.863 192.692 mo(\001)sh137.863 192.658 mo(\001)sh137.863 192.626 mo(\001)sh137.863 192.595 mo(\001)sh137.863 192.565 mo(\001)sh137.863 192.537 mo(\001)sh137.863 192.51 mo(\001)sh137.863 192.484 mo(\001)sh137.863 192.46 mo(\001)sh137.863 192.435 mo(\001)sh137.863 192.413 mo(\001)sh137.863 192.39 mo(\001)sh137.863 192.369 mo(\001)sh137.863 192.349 mo(\001)sh137.863 192.328 mo(\001)sh140.826 251.889 mo(\001)sh140.826 214.224 mo(\001)sh140.826 205.753 mo(\001)sh140.826 201.947 mo(\001)sh140.826 199.787 mo(\001)sh140.826 198.407 mo(\001)sh140.826 197.474 mo(\001)sh140.826 196.837 mo(\001)sh140.826 196.359 mo(\001)sh140.826 195.925 mo(\001)sh140.826 195.537 mo(\001)sh140.826 195.205 mo(\001)sh140.826 194.923 mo(\001)sh140.826 194.683 mo(\001)sh140.826 194.475 mo(\001)sh140.826 194.294 mo(\001)sh140.826 194.134 mo(\001)sh140.826 193.993 mo(\001)sh140.826 193.866 mo(\001)sh140.826 193.752 mo(\001)sh140.826 193.649 mo(\001)sh140.826 193.554 mo(\001)sh140.826 193.467 mo(\001)sh140.826 193.388 mo(\001)sh140.826 193.314 mo(\001)sh140.826 193.247 mo(\001)sh140.826 193.183 mo(\001)sh140.826 193.124 mo(\001)sh140.826 193.069 mo(\001)sh140.826 193.017 mo(\001)sh140.826 192.968 mo(\001)sh140.826 192.923 mo(\001)sh140.826 192.879 mo(\001)sh140.826 192.838 mo(\001)sh140.826 192.799 mo(\001)sh140.826 192.762 mo(\001)sh140.826 192.728 mo(\001)sh140.826 192.694 mo(\001)sh140.826 192.662 mo(\001)sh140.826 192.632 mo(\001)sh140.826 192.603 mo(\001)sh140.826 192.575 mo(\001)sh140.826 192.548 mo(\001)sh140.826 192.522 mo(\001)sh140.826 192.498 mo(\001)sh140.826 192.474 mo(\001)sh140.826 192.451 mo(\001)sh140.826 192.429 mo(\001)sh140.826 192.408 mo(\001)sh140.826 192.388 mo(\001)sh143.788 253.751 mo(\001)sh143.788 214.944 mo(\001)sh143.788 206.217 mo(\001)sh143.788 202.295 mo(\001)sh143.788 200.07 mo(\001)sh143.788 198.649 mo(\001)sh143.788 197.687 mo(\001)sh143.788 197.03 mo(\001)sh143.788 196.538 mo(\001)sh143.788 196.091 mo(\001)sh143.788 195.691 mo(\001)sh143.788 195.349 mo(\001)sh143.788 195.059 mo(\001)sh143.788 194.811 mo(\001)sh143.788 194.597 mo(\001)sh143.788 194.411 mo(\001)sh143.788 194.247 mo(\001)sh143.788 194.101 mo(\001)sh143.788 193.97 mo(\001)sh143.788 193.852 mo(\001)sh143.788 193.746 mo(\001)sh143.788 193.648 mo(\001)sh143.788 193.559 mo(\001)sh143.788 193.477 mo(\001)sh143.788 193.402 mo(\001)sh143.788 193.332 mo(\001)sh143.788 193.266 mo(\001)sh143.788 193.205 mo(\001)sh143.788 193.149 mo(\001)sh143.788 193.095 mo(\001)sh143.788 193.045 mo(\001)sh143.788 192.997 mo(\001)sh143.788 192.953 mo(\001)sh143.788 192.911 mo(\001)sh143.788 192.871 mo(\001)sh143.788 192.832 mo(\001)sh143.788 192.796 mo(\001)sh143.788 192.762 mo(\001)sh143.788 192.729 mo(\001)sh143.788 192.698 mo(\001)sh143.788 192.668 mo(\001)sh143.788 192.639 mo(\001)sh143.788 192.612 mo(\001)sh143.788 192.585 mo(\001)sh143.788 192.56 mo(\001)sh143.788 192.536 mo(\001)sh143.788 192.512 mo(\001)sh143.788 192.49 mo(\001)sh143.788 192.468 mo(\001)sh143.788 192.447 mo(\001)sh146.752 255.613 mo(\001)sh146.752 215.665 mo(\001)sh146.752 206.681 mo(\001)sh146.752 202.644 mo(\001)sh146.752 200.353 mo(\001)sh146.752 198.89 mo(\001)sh146.752 197.9 mo(\001)sh146.752 197.224 mo(\001)sh146.752 196.718 mo(\001)sh146.752 196.258 mo(\001)sh146.752 195.846 mo(\001)sh146.752 195.493 mo(\001)sh146.752 195.194 mo(\001)sh146.752 194.94 mo(\001)sh146.752 194.72 mo(\001)sh146.752 194.528 mo(\001)sh146.752 194.358 mo(\001)sh146.752 194.208 mo(\001)sh146.752 194.073 mo(\001)sh146.752 193.952 mo(\001)sh146.752 193.843 mo(\001)sh146.752 193.743 mo(\001)sh146.752 193.651 mo(\001)sh146.752 193.567 mo(\001)sh146.752 193.488 mo(\001)sh146.752 193.416 mo(\001)sh146.752 193.349 mo(\001)sh146.752 193.287 mo(\001)sh146.752 193.228 mo(\001)sh146.752 193.173 mo(\001)sh146.752 193.122 mo(\001)sh146.752 193.073 mo(\001)sh146.752 193.027 mo(\001)sh146.752 192.983 mo(\001)sh146.752 192.942 mo(\001)sh146.752 192.903 mo(\001)sh146.752 192.865 mo(\001)sh146.752 192.83 mo(\001)sh146.752 192.797 mo(\001)sh146.752 192.765 mo(\001)sh146.752 192.734 mo(\001)sh146.752 192.704 mo(\001)sh146.752 192.676 mo(\001)sh146.752 192.649 mo(\001)sh146.752 192.622 mo(\001)sh146.752 192.597 mo(\001)sh146.752 192.573 mo(\001)sh146.752 192.55 mo(\001)sh146.752 192.527 mo(\001)sh146.752 192.505 mo(\001)sh149.715 257.475 mo(\001)sh149.715 216.386 mo(\001)sh149.715 207.145 mo(\001)sh149.715 202.993 mo(\001)sh149.715 200.636 mo(\001)sh149.715 199.131 mo(\001)sh149.715 198.113 mo(\001)sh149.715 197.418 mo(\001)sh149.715 196.897 mo(\001)sh149.715 196.423 mo(\001)sh149.715 195.999 mo(\001)sh149.715 195.638 mo(\001)sh149.715 195.33 mo(\001)sh149.715 195.068 mo(\001)sh149.715 194.842 mo(\001)sh149.715 194.644 mo(\001)sh149.715 194.47 mo(\001)sh149.715 194.316 mo(\001)sh149.715 194.177 mo(\001)sh149.715 194.053 mo(\001)sh149.715 193.94 mo(\001)sh149.715 193.837 mo(\001)sh149.715 193.742 mo(\001)sh149.715 193.655 mo(\001)sh149.715 193.576 mo(\001)sh149.715 193.501 mo(\001)sh149.715 193.432 mo(\001)sh149.715 193.368 mo(\001)sh149.715 193.308 mo(\001)sh149.715 193.251 mo(\001)sh149.715 193.198 mo(\001)sh149.715 193.148 mo(\001)sh149.715 193.1 mo(\001)sh149.715 193.056 mo(\001)sh149.715 193.014 mo(\001)sh149.715 192.973 mo(\001)sh149.715 192.935 mo(\001)sh149.715 192.899 mo(\001)sh149.715 192.864 mo(\001)sh149.715 192.831 mo(\001)sh149.715 192.799 mo(\001)sh149.715 192.768 mo(\001)sh149.715 192.74 mo(\001)sh149.715 192.712 mo(\001)sh149.715 192.685 mo(\001)sh149.715 192.659 mo(\001)sh149.715 192.634 mo(\001)sh149.715 192.61 mo(\001)sh149.715 192.587 mo(\001)sh149.715 192.565 mo(\001)sh152.678 259.337 mo(\001)sh152.678 217.107 mo(\001)sh152.678 207.609 mo(\001)sh152.678 203.342 mo(\001)sh152.678 200.92 mo(\001)sh152.678 199.373 mo(\001)sh152.678 198.326 mo(\001)sh152.678 197.612 mo(\001)sh152.678 197.076 mo(\001)sh152.678 196.59 mo(\001)sh152.678 196.154 mo(\001)sh152.678 195.782 mo(\001)sh152.678 195.466 mo(\001)sh152.678 195.196 mo(\001)sh152.678 194.964 mo(\001)sh152.678 194.761 mo(\001)sh152.678 194.582 mo(\001)sh152.678 194.424 mo(\001)sh152.678 194.281 mo(\001)sh152.678 194.153 mo(\001)sh152.678 194.037 mo(\001)sh152.678 193.931 mo(\001)sh152.678 193.834 mo(\001)sh152.678 193.745 mo(\001)sh152.678 193.662 mo(\001)sh152.678 193.586 mo(\001)sh152.678 193.515 mo(\001)sh152.678 193.449 mo(\001)sh152.678 193.387 mo(\001)sh152.678 193.329 mo(\001)sh152.678 193.274 mo(\001)sh152.678 193.223 mo(\001)sh152.678 193.174 mo(\001)sh152.678 193.128 mo(\001)sh152.678 193.085 mo(\001)sh152.678 193.043 mo(\001)sh152.678 193.004 mo(\001)sh152.678 192.967 mo(\001)sh152.678 192.931 mo(\001)sh152.678 192.897 mo(\001)sh152.678 192.865 mo(\001)sh152.678 192.833 mo(\001)sh152.678 192.803 mo(\001)sh152.678 192.774 mo(\001)sh152.678 192.747 mo(\001)sh152.678 192.72 mo(\001)sh152.678 192.694 mo(\001)sh152.678 192.67 mo(\001)sh152.678 192.646 mo(\001)sh152.678 192.624 mo(\001)sh155.641 261.199 mo(\001)sh155.641 217.827 mo(\001)sh155.641 208.073 mo(\001)sh155.641 203.69 mo(\001)sh155.641 201.203 mo(\001)sh155.641 199.614 mo(\001)sh155.641 198.539 mo(\001)sh155.641 197.805 mo(\001)sh155.641 197.255 mo(\001)sh155.641 196.755 mo(\001)sh155.641 196.308 mo(\001)sh155.641 195.926 mo(\001)sh155.641 195.602 mo(\001)sh155.641 195.325 mo(\001)sh155.641 195.086 mo(\001)sh155.641 194.878 mo(\001)sh155.641 194.694 mo(\001)sh155.641 194.531 mo(\001)sh155.641 194.385 mo(\001)sh155.641 194.253 mo(\001)sh155.641 194.134 mo(\001)sh155.641 194.025 mo(\001)sh155.641 193.926 mo(\001)sh155.641 193.834 mo(\001)sh155.641 193.75 mo(\001)sh155.641 193.671 mo(\001)sh155.641 193.598 mo(\001)sh155.641 193.53 mo(\001)sh155.641 193.466 mo(\001)sh155.641 193.407 mo(\001)sh155.641 193.351 mo(\001)sh155.641 193.298 mo(\001)sh155.641 193.248 mo(\001)sh155.641 193.201 mo(\001)sh155.641 193.156 mo(\001)sh155.641 193.114 mo(\001)sh155.641 193.073 mo(\001)sh155.641 193.035 mo(\001)sh155.641 192.998 mo(\001)sh155.641 192.963 mo(\001)sh155.641 192.93 mo(\001)sh155.641 192.898 mo(\001)sh155.641 192.867 mo(\001)sh155.641 192.838 mo(\001)sh155.641 192.809 mo(\001)sh155.641 192.782 mo(\001)sh155.641 192.755 mo(\001)sh155.641 192.731 mo(\001)sh155.641 192.706 mo(\001)sh155.641 192.682 mo(\001)sh158.604 263.061 mo(\001)sh158.604 218.548 mo(\001)sh158.604 208.537 mo(\001)sh158.604 204.039 mo(\001)sh158.604 201.486 mo(\001)sh158.604 199.855 mo(\001)sh158.604 198.752 mo(\001)sh158.604 197.999 mo(\001)sh158.604 197.435 mo(\001)sh158.604 196.922 mo(\001)sh158.604 196.463 mo(\001)sh158.604 196.07 mo(\001)sh158.604 195.738 mo(\001)sh158.604 195.453 mo(\001)sh158.604 195.209 mo(\001)sh158.604 194.995 mo(\001)sh158.604 194.806 mo(\001)sh158.604 194.638 mo(\001)sh158.604 194.489 mo(\001)sh158.604 194.354 mo(\001)sh158.604 194.232 mo(\001)sh158.604 194.119 mo(\001)sh158.604 194.018 mo(\001)sh158.604 193.924 mo(\001)sh158.604 193.836 mo(\001)sh158.604 193.756 mo(\001)sh158.604 193.681 mo(\001)sh158.604 193.612 mo(\001)sh158.604 193.546 mo(\001)sh158.604 193.485 mo(\001)sh158.604 193.427 mo(\001)sh158.604 193.373 mo(\001)sh158.604 193.322 mo(\001)sh158.604 193.274 mo(\001)sh158.604 193.228 mo(\001)sh158.604 193.184 mo(\001)sh158.604 193.143 mo(\001)sh158.604 193.104 mo(\001)sh158.604 193.066 mo(\001)sh158.604 193.03 mo(\001)sh158.604 192.995 mo(\001)sh158.604 192.963 mo(\001)sh158.604 192.931 mo(\001)sh158.604 192.901 mo(\001)sh158.604 192.872 mo(\001)sh158.604 192.844 mo(\001)sh158.604 192.817 mo(\001)sh158.604 192.791 mo(\001)sh158.604 192.765 mo(\001)sh158.604 192.741 mo(\001)sh161.567 264.923 mo(\001)sh161.567 219.269 mo(\001)sh161.567 209.001 mo(\001)sh161.567 204.388 mo(\001)sh161.567 201.769 mo(\001)sh161.567 200.096 mo(\001)sh161.567 198.965 mo(\001)sh161.567 198.193 mo(\001)sh161.567 197.614 mo(\001)sh161.567 197.088 mo(\001)sh161.567 196.617 mo(\001)sh161.567 196.215 mo(\001)sh161.567 195.874 mo(\001)sh161.567 195.582 mo(\001)sh161.567 195.331 mo(\001)sh161.567 195.111 mo(\001)sh161.567 194.918 mo(\001)sh161.567 194.746 mo(\001)sh161.567 194.592 mo(\001)sh161.567 194.454 mo(\001)sh161.567 194.329 mo(\001)sh161.567 194.214 mo(\001)sh161.567 194.109 mo(\001)sh161.567 194.013 mo(\001)sh161.567 193.924 mo(\001)sh161.567 193.841 mo(\001)sh161.567 193.765 mo(\001)sh161.567 193.693 mo(\001)sh161.567 193.626 mo(\001)sh161.567 193.563 mo(\001)sh161.567 193.504 mo(\001)sh161.567 193.448 mo(\001)sh161.567 193.396 mo(\001)sh161.567 193.346 mo(\001)sh161.567 193.299 mo(\001)sh161.567 193.254 mo(\001)sh161.567 193.212 mo(\001)sh161.567 193.171 mo(\001)sh161.567 193.133 mo(\001)sh161.567 193.096 mo(\001)sh161.567 193.061 mo(\001)sh161.567 193.027 mo(\001)sh161.567 192.994 mo(\001)sh161.567 192.963 mo(\001)sh161.567 192.934 mo(\001)sh161.567 192.905 mo(\001)sh161.567 192.878 mo(\001)sh161.567 192.851 mo(\001)sh161.567 192.826 mo(\001)sh161.567 192.801 mo(\001)sh164.53 266.785 mo(\001)sh164.53 219.99 mo(\001)sh164.53 209.465 mo(\001)sh164.53 204.736 mo(\001)sh164.53 202.052 mo(\001)sh164.53 200.338 mo(\001)sh164.53 199.178 mo(\001)sh164.53 198.387 mo(\001)sh164.53 197.793 mo(\001)sh164.53 197.254 mo(\001)sh164.53 196.771 mo(\001)sh164.53 196.359 mo(\001)sh164.53 196.009 mo(\001)sh164.53 195.71 mo(\001)sh164.53 195.453 mo(\001)sh164.53 195.228 mo(\001)sh164.53 195.03 mo(\001)sh164.53 194.854 mo(\001)sh164.53 194.696 mo(\001)sh164.53 194.554 mo(\001)sh164.53 194.425 mo(\001)sh164.53 194.309 mo(\001)sh164.53 194.201 mo(\001)sh164.53 194.102 mo(\001)sh164.53 194.011 mo(\001)sh164.53 193.926 mo(\001)sh164.53 193.848 mo(\001)sh164.53 193.774 mo(\001)sh164.53 193.705 mo(\001)sh164.53 193.641 mo(\001)sh164.53 193.58 mo(\001)sh164.53 193.524 mo(\001)sh164.53 193.47 mo(\001)sh164.53 193.419 mo(\001)sh164.53 193.371 mo(\001)sh164.53 193.325 mo(\001)sh164.53 193.281 mo(\001)sh164.53 193.24 mo(\001)sh164.53 193.2 mo(\001)sh164.53 193.162 mo(\001)sh164.53 193.126 mo(\001)sh164.53 193.091 mo(\001)sh164.53 193.058 mo(\001)sh164.53 193.027 mo(\001)sh164.53 192.996 mo(\001)sh164.53 192.966 mo(\001)sh164.53 192.939 mo(\001)sh164.53 192.911 mo(\001)sh164.53 192.885 mo(\001)sh164.53 192.859 mo(\001)sh167.493 268.647 mo(\001)sh167.493 220.71 mo(\001)sh167.493 209.929 mo(\001)sh167.493 205.085 mo(\001)sh167.493 202.335 mo(\001)sh167.493 200.579 mo(\001)sh167.493 199.391 mo(\001)sh167.493 198.58 mo(\001)sh167.493 197.973 mo(\001)sh167.493 197.421 mo(\001)sh167.493 196.926 mo(\001)sh167.493 196.503 mo(\001)sh167.493 196.145 mo(\001)sh167.493 195.839 mo(\001)sh167.493 195.575 mo(\001)sh167.493 195.345 mo(\001)sh167.493 195.141 mo(\001)sh167.493 194.962 mo(\001)sh167.493 194.8 mo(\001)sh167.493 194.655 mo(\001)sh167.493 194.522 mo(\001)sh167.493 194.403 mo(\001)sh167.493 194.293 mo(\001)sh167.493 194.191 mo(\001)sh167.493 194.098 mo(\001)sh167.493 194.011 mo(\001)sh167.493 193.93 mo(\001)sh167.493 193.855 mo(\001)sh167.493 193.785 mo(\001)sh167.493 193.719 mo(\001)sh167.493 193.657 mo(\001)sh167.493 193.599 mo(\001)sh167.493 193.543 mo(\001)sh167.493 193.491 mo(\001)sh167.493 193.442 mo(\001)sh167.493 193.395 mo(\001)sh167.493 193.351 mo(\001)sh167.493 193.308 mo(\001)sh167.493 193.268 mo(\001)sh167.493 193.229 mo(\001)sh167.493 193.192 mo(\001)sh167.493 193.156 mo(\001)sh167.493 193.122 mo(\001)sh167.493 193.09 mo(\001)sh167.493 193.058 mo(\001)sh167.493 193.028 mo(\001)sh167.493 193 mo(\001)sh167.493 192.971 mo(\001)sh167.493 192.945 mo(\001)sh167.493 192.918 mo(\001)sh170.456 270.509 mo(\001)sh170.456 221.431 mo(\001)sh170.456 210.393 mo(\001)sh170.456 205.433 mo(\001)sh170.456 202.619 mo(\001)sh170.456 200.821 mo(\001)sh170.456 199.605 mo(\001)sh170.456 198.775 mo(\001)sh170.456 198.152 mo(\001)sh170.456 197.586 mo(\001)sh170.456 197.08 mo(\001)sh170.456 196.648 mo(\001)sh170.456 196.281 mo(\001)sh170.456 195.968 mo(\001)sh170.456 195.697 mo(\001)sh170.456 195.461 mo(\001)sh170.456 195.254 mo(\001)sh170.456 195.069 mo(\001)sh170.456 194.904 mo(\001)sh170.456 194.755 mo(\001)sh170.456 194.62 mo(\001)sh170.456 194.497 mo(\001)sh170.456 194.384 mo(\001)sh170.456 194.281 mo(\001)sh170.456 194.185 mo(\001)sh170.456 194.096 mo(\001)sh170.456 194.013 mo(\001)sh170.456 193.936 mo(\001)sh170.456 193.865 mo(\001)sh170.456 193.797 mo(\001)sh170.456 193.734 mo(\001)sh170.456 193.674 mo(\001)sh170.456 193.617 mo(\001)sh170.456 193.564 mo(\001)sh170.456 193.513 mo(\001)sh170.456 193.466 mo(\001)sh170.456 193.42 mo(\001)sh170.456 193.376 mo(\001)sh170.456 193.335 mo(\001)sh170.456 193.295 mo(\001)sh170.456 193.257 mo(\001)sh170.456 193.221 mo(\001)sh170.456 193.186 mo(\001)sh170.456 193.152 mo(\001)sh170.456 193.121 mo(\001)sh170.456 193.09 mo(\001)sh170.456 193.06 mo(\001)sh170.456 193.031 mo(\001)sh170.456 193.004 mo(\001)sh170.456 192.977 mo(\001)sh173.419 272.371 mo(\001)sh173.419 222.151 mo(\001)sh173.419 210.856 mo(\001)sh173.419 205.782 mo(\001)sh173.419 202.902 mo(\001)sh173.419 201.062 mo(\001)sh173.419 199.818 mo(\001)sh173.419 198.968 mo(\001)sh173.419 198.331 mo(\001)sh173.419 197.753 mo(\001)sh173.419 197.234 mo(\001)sh173.419 196.792 mo(\001)sh173.419 196.417 mo(\001)sh173.419 196.096 mo(\001)sh173.419 195.819 mo(\001)sh173.419 195.578 mo(\001)sh173.419 195.365 mo(\001)sh173.419 195.177 mo(\001)sh173.419 195.007 mo(\001)sh173.419 194.855 mo(\001)sh173.419 194.717 mo(\001)sh173.419 194.591 mo(\001)sh173.419 194.476 mo(\001)sh173.419 194.37 mo(\001)sh173.419 194.272 mo(\001)sh173.419 194.181 mo(\001)sh173.419 194.097 mo(\001)sh173.419 194.018 mo(\001)sh173.419 193.944 mo(\001)sh173.419 193.875 mo(\001)sh173.419 193.81 mo(\001)sh173.419 193.749 mo(\001)sh173.419 193.691 mo(\001)sh173.419 193.637 mo(\001)sh173.419 193.585 mo(\001)sh173.419 193.536 mo(\001)sh173.419 193.489 mo(\001)sh173.419 193.445 mo(\001)sh173.419 193.402 mo(\001)sh173.419 193.361 mo(\001)sh173.419 193.323 mo(\001)sh173.419 193.286 mo(\001)sh173.419 193.25 mo(\001)sh173.419 193.216 mo(\001)sh173.419 193.183 mo(\001)sh173.419 193.152 mo(\001)sh173.419 193.121 mo(\001)sh173.419 193.091 mo(\001)sh173.419 193.064 mo(\001)sh173.419 193.036 mo(\001)sh176.382 274.233 mo(\001)sh176.382 222.872 mo(\001)sh176.382 211.32 mo(\001)sh176.382 206.131 mo(\001)sh176.382 203.185 mo(\001)sh176.382 201.304 mo(\001)sh176.382 200.031 mo(\001)sh176.382 199.162 mo(\001)sh176.382 198.51 mo(\001)sh176.382 197.918 mo(\001)sh176.382 197.389 mo(\001)sh176.382 196.936 mo(\001)sh176.382 196.552 mo(\001)sh176.382 196.225 mo(\001)sh176.382 195.941 mo(\001)sh176.382 195.694 mo(\001)sh176.382 195.477 mo(\001)sh176.382 195.284 mo(\001)sh176.382 195.111 mo(\001)sh176.382 194.955 mo(\001)sh176.382 194.814 mo(\001)sh176.382 194.685 mo(\001)sh176.382 194.568 mo(\001)sh176.382 194.459 mo(\001)sh176.382 194.359 mo(\001)sh176.382 194.266 mo(\001)sh176.382 194.18 mo(\001)sh176.382 194.099 mo(\001)sh176.382 194.024 mo(\001)sh176.382 193.953 mo(\001)sh176.382 193.887 mo(\001)sh176.382 193.824 mo(\001)sh176.382 193.765 mo(\001)sh176.382 193.709 mo(\001)sh176.382 193.656 mo(\001)sh176.382 193.606 mo(\001)sh176.382 193.558 mo(\001)sh176.382 193.512 mo(\001)sh176.382 193.469 mo(\001)sh176.382 193.428 mo(\001)sh176.382 193.388 mo(\001)sh176.382 193.35 mo(\001)sh176.382 193.314 mo(\001)sh176.382 193.279 mo(\001)sh176.382 193.245 mo(\001)sh176.382 193.213 mo(\001)sh176.382 193.182 mo(\001)sh176.382 193.152 mo(\001)sh176.382 193.123 mo(\001)sh176.382 193.095 mo(\001)sh179.345 276.095 mo(\001)sh179.345 223.593 mo(\001)sh179.345 211.784 mo(\001)sh179.345 206.479 mo(\001)sh179.345 203.468 mo(\001)sh179.345 201.545 mo(\001)sh179.345 200.244 mo(\001)sh179.345 199.355 mo(\001)sh179.345 198.69 mo(\001)sh179.345 198.085 mo(\001)sh179.345 197.543 mo(\001)sh179.345 197.081 mo(\001)sh179.345 196.688 mo(\001)sh179.345 196.353 mo(\001)sh179.345 196.063 mo(\001)sh179.345 195.811 mo(\001)sh179.345 195.589 mo(\001)sh179.345 195.391 mo(\001)sh179.345 195.215 mo(\001)sh179.345 195.056 mo(\001)sh179.345 194.911 mo(\001)sh179.345 194.78 mo(\001)sh179.345 194.659 mo(\001)sh179.345 194.548 mo(\001)sh179.345 194.446 mo(\001)sh179.345 194.351 mo(\001)sh179.345 194.263 mo(\001)sh179.345 194.18 mo(\001)sh179.345 194.104 mo(\001)sh179.345 194.031 mo(\001)sh179.345 193.964 mo(\001)sh179.345 193.9 mo(\001)sh179.345 193.839 mo(\001)sh179.345 193.782 mo(\001)sh179.345 193.728 mo(\001)sh179.345 193.677 mo(\001)sh179.345 193.628 mo(\001)sh179.345 193.581 mo(\001)sh179.345 193.536 mo(\001)sh179.345 193.494 mo(\001)sh179.345 193.454 mo(\001)sh179.345 193.414 mo(\001)sh179.345 193.378 mo(\001)sh179.345 193.341 mo(\001)sh179.345 193.308 mo(\001)sh179.345 193.274 mo(\001)sh179.345 193.243 mo(\001)sh179.345 193.212 mo(\001)sh179.345 193.183 mo(\001)sh179.345 193.154 mo(\001)sh182.308 277.957 mo(\001)sh182.308 224.313 mo(\001)sh182.308 212.249 mo(\001)sh182.308 206.828 mo(\001)sh182.308 203.751 mo(\001)sh182.308 201.786 mo(\001)sh182.308 200.457 mo(\001)sh182.308 199.55 mo(\001)sh182.308 198.869 mo(\001)sh182.308 198.251 mo(\001)sh182.308 197.698 mo(\001)sh182.308 197.225 mo(\001)sh182.308 196.824 mo(\001)sh182.308 196.481 mo(\001)sh182.308 196.186 mo(\001)sh182.308 195.928 mo(\001)sh182.308 195.701 mo(\001)sh182.308 195.499 mo(\001)sh182.308 195.318 mo(\001)sh182.308 195.156 mo(\001)sh182.308 195.008 mo(\001)sh182.308 194.874 mo(\001)sh182.308 194.751 mo(\001)sh182.308 194.638 mo(\001)sh182.308 194.533 mo(\001)sh182.308 194.436 mo(\001)sh182.308 194.345 mo(\001)sh182.308 194.262 mo(\001)sh182.308 194.183 mo(\001)sh182.308 194.109 mo(\001)sh182.308 194.04 mo(\001)sh182.308 193.974 mo(\001)sh182.308 193.913 mo(\001)sh182.308 193.854 mo(\001)sh182.308 193.799 mo(\001)sh182.308 193.747 mo(\001)sh182.308 193.697 mo(\001)sh182.308 193.649 mo(\001)sh182.308 193.604 mo(\001)sh182.308 193.561 mo(\001)sh182.308 193.519 mo(\001)sh182.308 193.479 mo(\001)sh182.308 193.442 mo(\001)sh182.308 193.405 mo(\001)sh182.308 193.37 mo(\001)sh182.308 193.336 mo(\001)sh182.308 193.304 mo(\001)sh182.308 193.272 mo(\001)sh182.308 193.242 mo(\001)sh182.308 193.213 mo(\001)sh185.271 279.819 mo(\001)sh185.271 225.034 mo(\001)sh185.271 212.713 mo(\001)sh185.271 207.177 mo(\001)sh185.271 204.034 mo(\001)sh185.271 202.027 mo(\001)sh185.271 200.67 mo(\001)sh185.271 199.743 mo(\001)sh185.271 199.049 mo(\001)sh185.271 198.417 mo(\001)sh185.271 197.852 mo(\001)sh185.271 197.369 mo(\001)sh185.271 196.96 mo(\001)sh185.271 196.61 mo(\001)sh185.271 196.308 mo(\001)sh185.271 196.044 mo(\001)sh185.271 195.813 mo(\001)sh185.271 195.607 mo(\001)sh185.271 195.422 mo(\001)sh185.271 195.257 mo(\001)sh185.271 195.105 mo(\001)sh185.271 194.968 mo(\001)sh185.271 194.842 mo(\001)sh185.271 194.726 mo(\001)sh185.271 194.62 mo(\001)sh185.271 194.521 mo(\001)sh185.271 194.429 mo(\001)sh185.271 194.343 mo(\001)sh185.271 194.263 mo(\001)sh185.271 194.187 mo(\001)sh185.271 194.116 mo(\001)sh185.271 194.049 mo(\001)sh185.271 193.987 mo(\001)sh185.271 193.927 mo(\001)sh185.271 193.87 mo(\001)sh185.271 193.817 mo(\001)sh185.271 193.766 mo(\001)sh185.271 193.717 mo(\001)sh185.271 193.671 mo(\001)sh185.271 193.627 mo(\001)sh185.271 193.585 mo(\001)sh185.271 193.544 mo(\001)sh185.271 193.505 mo(\001)sh185.271 193.468 mo(\001)sh185.271 193.432 mo(\001)sh185.271 193.398 mo(\001)sh185.271 193.365 mo(\001)sh185.271 193.332 mo(\001)sh185.271 193.302 mo(\001)sh185.271 193.272 mo(\001)sh188.234 281.681 mo(\001)sh188.234 225.755 mo(\001)sh188.234 213.177 mo(\001)sh188.234 207.525 mo(\001)sh188.234 204.318 mo(\001)sh188.234 202.268 mo(\001)sh188.234 200.883 mo(\001)sh188.234 199.937 mo(\001)sh188.234 199.228 mo(\001)sh188.234 198.583 mo(\001)sh188.234 198.006 mo(\001)sh188.234 197.513 mo(\001)sh188.234 197.095 mo(\001)sh188.234 196.738 mo(\001)sh188.234 196.43 mo(\001)sh188.234 196.161 mo(\001)sh188.234 195.925 mo(\001)sh188.234 195.715 mo(\001)sh188.234 195.526 mo(\001)sh188.234 195.357 mo(\001)sh188.234 195.202 mo(\001)sh188.234 195.062 mo(\001)sh188.234 194.934 mo(\001)sh188.234 194.816 mo(\001)sh188.234 194.707 mo(\001)sh188.234 194.606 mo(\001)sh188.234 194.512 mo(\001)sh188.234 194.424 mo(\001)sh188.234 194.342 mo(\001)sh188.234 194.265 mo(\001)sh188.234 194.192 mo(\001)sh188.234 194.125 mo(\001)sh188.234 194.061 mo(\001)sh188.234 194 mo(\001)sh188.234 193.942 mo(\001)sh188.234 193.887 mo(\001)sh188.234 193.835 mo(\001)sh188.234 193.786 mo(\001)sh188.234 193.738 mo(\001)sh188.234 193.693 mo(\001)sh188.234 193.649 mo(\001)sh188.234 193.609 mo(\001)sh188.234 193.569 mo(\001)sh188.234 193.53 mo(\001)sh188.234 193.494 mo(\001)sh188.234 193.459 mo(\001)sh188.234 193.425 mo(\001)sh188.234 193.393 mo(\001)sh188.234 193.361 mo(\001)sh188.234 193.331 mo(\001)sh191.197 283.543 mo(\001)sh191.197 226.475 mo(\001)sh191.197 213.641 mo(\001)sh191.197 207.874 mo(\001)sh191.197 204.601 mo(\001)sh191.197 202.51 mo(\001)sh191.197 201.096 mo(\001)sh191.197 200.13 mo(\001)sh191.197 199.407 mo(\001)sh191.197 198.749 mo(\001)sh191.197 198.161 mo(\001)sh191.197 197.658 mo(\001)sh191.197 197.231 mo(\001)sh191.197 196.867 mo(\001)sh191.197 196.552 mo(\001)sh191.197 196.278 mo(\001)sh191.197 196.037 mo(\001)sh191.197 195.822 mo(\001)sh191.197 195.63 mo(\001)sh191.197 195.457 mo(\001)sh191.197 195.3 mo(\001)sh191.197 195.156 mo(\001)sh191.197 195.025 mo(\001)sh191.197 194.905 mo(\001)sh191.197 194.794 mo(\001)sh191.197 194.691 mo(\001)sh191.197 194.595 mo(\001)sh191.197 194.505 mo(\001)sh191.197 194.421 mo(\001)sh191.197 194.343 mo(\001)sh191.197 194.269 mo(\001)sh191.197 194.2 mo(\001)sh191.197 194.134 mo(\001)sh191.197 194.072 mo(\001)sh191.197 194.013 mo(\001)sh191.197 193.957 mo(\001)sh191.197 193.904 mo(\001)sh191.197 193.854 mo(\001)sh191.197 193.805 mo(\001)sh191.197 193.759 mo(\001)sh191.197 193.715 mo(\001)sh191.197 193.673 mo(\001)sh191.197 193.633 mo(\001)sh191.197 193.594 mo(\001)sh191.197 193.557 mo(\001)sh191.197 193.521 mo(\001)sh191.197 193.486 mo(\001)sh191.197 193.453 mo(\001)sh191.197 193.421 mo(\001)sh191.197 193.39 mo(\001)sh194.16 285.405 mo(\001)sh194.16 227.196 mo(\001)sh194.16 214.105 mo(\001)sh194.16 208.223 mo(\001)sh194.16 204.884 mo(\001)sh194.16 202.751 mo(\001)sh194.16 201.309 mo(\001)sh194.16 200.325 mo(\001)sh194.16 199.586 mo(\001)sh194.16 198.915 mo(\001)sh194.16 198.315 mo(\001)sh194.16 197.802 mo(\001)sh194.16 197.367 mo(\001)sh194.16 196.995 mo(\001)sh194.16 196.675 mo(\001)sh194.16 196.395 mo(\001)sh194.16 196.148 mo(\001)sh194.16 195.93 mo(\001)sh194.16 195.733 mo(\001)sh194.16 195.557 mo(\001)sh194.16 195.397 mo(\001)sh194.16 195.251 mo(\001)sh194.16 195.117 mo(\001)sh194.16 194.995 mo(\001)sh194.16 194.881 mo(\001)sh194.16 194.775 mo(\001)sh194.16 194.678 mo(\001)sh194.16 194.586 mo(\001)sh194.16 194.501 mo(\001)sh194.16 194.421 mo(\001)sh194.16 194.346 mo(\001)sh194.16 194.275 mo(\001)sh194.16 194.208 mo(\001)sh194.16 194.145 mo(\001)sh194.16 194.085 mo(\001)sh194.16 194.028 mo(\001)sh194.16 193.973 mo(\001)sh194.16 193.922 mo(\001)sh194.16 193.872 mo(\001)sh194.16 193.826 mo(\001)sh194.16 193.781 mo(\001)sh194.16 193.738 mo(\001)sh194.16 193.696 mo(\001)sh194.16 193.657 mo(\001)sh194.16 193.619 mo(\001)sh194.16 193.582 mo(\001)sh194.16 193.547 mo(\001)sh194.16 193.513 mo(\001)sh194.16 193.481 mo(\001)sh194.16 193.449 mo(\001)sh197.123 287.267 mo(\001)sh197.123 227.916 mo(\001)sh197.123 214.569 mo(\001)sh197.123 208.571 mo(\001)sh197.123 205.167 mo(\001)sh197.123 202.993 mo(\001)sh197.123 201.522 mo(\001)sh197.123 200.518 mo(\001)sh197.123 199.766 mo(\001)sh197.123 199.082 mo(\001)sh197.123 198.47 mo(\001)sh197.123 197.946 mo(\001)sh197.123 197.503 mo(\001)sh197.123 197.124 mo(\001)sh197.123 196.797 mo(\001)sh197.123 196.511 mo(\001)sh197.123 196.261 mo(\001)sh197.123 196.037 mo(\001)sh197.123 195.837 mo(\001)sh197.123 195.657 mo(\001)sh197.123 195.494 mo(\001)sh197.123 195.346 mo(\001)sh197.123 195.209 mo(\001)sh197.123 195.083 mo(\001)sh197.123 194.968 mo(\001)sh197.123 194.861 mo(\001)sh197.123 194.761 mo(\001)sh197.123 194.668 mo(\001)sh197.123 194.581 mo(\001)sh197.123 194.499 mo(\001)sh197.123 194.422 mo(\001)sh197.123 194.35 mo(\001)sh197.123 194.282 mo(\001)sh197.123 194.217 mo(\001)sh197.123 194.156 mo(\001)sh197.123 194.098 mo(\001)sh197.123 194.043 mo(\001)sh197.123 193.99 mo(\001)sh197.123 193.94 mo(\001)sh197.123 193.892 mo(\001)sh197.123 193.846 mo(\001)sh197.123 193.802 mo(\001)sh197.123 193.76 mo(\001)sh197.123 193.72 mo(\001)sh197.123 193.681 mo(\001)sh197.123 193.643 mo(\001)sh197.123 193.608 mo(\001)sh197.123 193.573 mo(\001)sh197.123 193.54 mo(\001)sh197.123 193.508 mo(\001)sh200.086 289.129 mo(\001)sh200.086 228.637 mo(\001)sh200.086 215.033 mo(\001)sh200.086 208.919 mo(\001)sh200.086 205.45 mo(\001)sh200.086 203.234 mo(\001)sh200.086 201.735 mo(\001)sh200.086 200.712 mo(\001)sh200.086 199.945 mo(\001)sh200.086 199.248 mo(\001)sh200.086 198.624 mo(\001)sh200.086 198.091 mo(\001)sh200.086 197.638 mo(\001)sh200.086 197.252 mo(\001)sh200.086 196.919 mo(\001)sh200.086 196.628 mo(\001)sh200.086 196.372 mo(\001)sh200.086 196.145 mo(\001)sh200.086 195.941 mo(\001)sh200.086 195.757 mo(\001)sh200.086 195.591 mo(\001)sh200.086 195.44 mo(\001)sh200.086 195.301 mo(\001)sh200.086 195.173 mo(\001)sh200.086 195.055 mo(\001)sh200.086 194.946 mo(\001)sh200.086 194.844 mo(\001)sh200.086 194.749 mo(\001)sh200.086 194.66 mo(\001)sh200.086 194.577 mo(\001)sh200.086 194.499 mo(\001)sh200.086 194.425 mo(\001)sh200.086 194.356 mo(\001)sh200.086 194.29 mo(\001)sh200.086 194.228 mo(\001)sh200.086 194.168 mo(\001)sh200.086 194.112 mo(\001)sh200.086 194.058 mo(\001)sh200.086 194.007 mo(\001)sh200.086 193.958 mo(\001)sh200.086 193.912 mo(\001)sh200.086 193.867 mo(\001)sh200.086 193.824 mo(\001)sh200.086 193.783 mo(\001)sh200.086 193.744 mo(\001)sh200.086 193.705 mo(\001)sh200.086 193.669 mo(\001)sh200.086 193.634 mo(\001)sh200.086 193.6 mo(\001)sh200.086 193.567 mo(\001)sh203.05 290.991 mo(\001)sh203.05 229.358 mo(\001)sh203.05 215.496 mo(\001)sh203.05 209.268 mo(\001)sh203.05 205.734 mo(\001)sh203.05 203.476 mo(\001)sh203.05 201.948 mo(\001)sh203.05 200.906 mo(\001)sh203.05 200.124 mo(\001)sh203.05 199.414 mo(\001)sh203.05 198.778 mo(\001)sh203.05 198.235 mo(\001)sh203.05 197.774 mo(\001)sh203.05 197.381 mo(\001)sh203.05 197.041 mo(\001)sh203.05 196.745 mo(\001)sh203.05 196.484 mo(\001)sh203.05 196.252 mo(\001)sh203.05 196.045 mo(\001)sh203.05 195.858 mo(\001)sh203.05 195.688 mo(\001)sh203.05 195.534 mo(\001)sh203.05 195.392 mo(\001)sh203.05 195.262 mo(\001)sh203.05 195.142 mo(\001)sh203.05 195.031 mo(\001)sh203.05 194.927 mo(\001)sh203.05 194.83 mo(\001)sh203.05 194.74 mo(\001)sh203.05 194.655 mo(\001)sh203.05 194.576 mo(\001)sh203.05 194.501 mo(\001)sh203.05 194.43 mo(\001)sh203.05 194.363 mo(\001)sh203.05 194.299 mo(\001)sh203.05 194.238 mo(\001)sh203.05 194.181 mo(\001)sh203.05 194.127 mo(\001)sh203.05 194.074 mo(\001)sh203.05 194.025 mo(\001)sh203.05 193.977 mo(\001)sh203.05 193.932 mo(\001)sh203.05 193.888 mo(\001)sh203.05 193.846 mo(\001)sh203.05 193.805 mo(\001)sh203.05 193.767 mo(\001)sh203.05 193.729 mo(\001)sh203.05 193.694 mo(\001)sh203.05 193.659 mo(\001)sh203.05 193.625 mo(\001)sh206.012 292.853 mo(\001)sh206.012 230.079 mo(\001)sh206.012 215.96 mo(\001)sh206.012 209.617 mo(\001)sh206.012 206.017 mo(\001)sh206.012 203.717 mo(\001)sh206.012 202.161 mo(\001)sh206.012 201.1 mo(\001)sh206.012 200.303 mo(\001)sh206.012 199.58 mo(\001)sh206.012 198.933 mo(\001)sh206.012 198.379 mo(\001)sh206.012 197.91 mo(\001)sh206.012 197.509 mo(\001)sh206.012 197.164 mo(\001)sh206.012 196.862 mo(\001)sh206.012 196.596 mo(\001)sh206.012 196.36 mo(\001)sh206.012 196.148 mo(\001)sh206.012 195.959 mo(\001)sh206.012 195.785 mo(\001)sh206.012 195.628 mo(\001)sh206.012 195.484 mo(\001)sh206.012 195.352 mo(\001)sh206.012 195.229 mo(\001)sh206.012 195.116 mo(\001)sh206.012 195.01 mo(\001)sh206.012 194.912 mo(\001)sh206.012 194.82 mo(\001)sh206.012 194.733 mo(\001)sh206.012 194.652 mo(\001)sh206.012 194.576 mo(\001)sh206.012 194.504 mo(\001)sh206.012 194.435 mo(\001)sh206.012 194.37 mo(\001)sh206.012 194.309 mo(\001)sh206.012 194.25 mo(\001)sh206.012 194.195 mo(\001)sh206.012 194.142 mo(\001)sh206.012 194.091 mo(\001)sh206.012 194.043 mo(\001)sh206.012 193.996 mo(\001)sh206.012 193.951 mo(\001)sh206.012 193.909 mo(\001)sh206.012 193.868 mo(\001)sh206.012 193.829 mo(\001)sh206.012 193.79 mo(\001)sh206.012 193.754 mo(\001)sh206.012 193.719 mo(\001)sh206.012 193.685 mo(\001)sh208.975 294.715 mo(\001)sh208.975 230.799 mo(\001)sh208.975 216.424 mo(\001)sh208.975 209.965 mo(\001)sh208.975 206.3 mo(\001)sh208.975 203.958 mo(\001)sh208.975 202.375 mo(\001)sh208.975 201.293 mo(\001)sh208.975 200.483 mo(\001)sh208.975 199.746 mo(\001)sh208.975 199.087 mo(\001)sh208.975 198.524 mo(\001)sh208.975 198.046 mo(\001)sh208.975 197.637 mo(\001)sh208.975 197.286 mo(\001)sh208.975 196.978 mo(\001)sh208.975 196.708 mo(\001)sh208.975 196.468 mo(\001)sh208.975 196.252 mo(\001)sh208.975 196.059 mo(\001)sh208.975 195.883 mo(\001)sh208.975 195.723 mo(\001)sh208.975 195.576 mo(\001)sh208.975 195.44 mo(\001)sh208.975 195.316 mo(\001)sh208.975 195.201 mo(\001)sh208.975 195.093 mo(\001)sh208.975 194.993 mo(\001)sh208.975 194.899 mo(\001)sh208.975 194.812 mo(\001)sh208.975 194.729 mo(\001)sh208.975 194.65 mo(\001)sh208.975 194.577 mo(\001)sh208.975 194.508 mo(\001)sh208.975 194.442 mo(\001)sh208.975 194.379 mo(\001)sh208.975 194.32 mo(\001)sh208.975 194.263 mo(\001)sh208.975 194.209 mo(\001)sh208.975 194.157 mo(\001)sh208.975 194.108 mo(\001)sh208.975 194.061 mo(\001)sh208.975 194.015 mo(\001)sh208.975 193.972 mo(\001)sh208.975 193.93 mo(\001)sh208.975 193.89 mo(\001)sh208.975 193.851 mo(\001)sh208.975 193.814 mo(\001)sh208.975 193.778 mo(\001)sh208.975 193.744 mo(\001)sh211.939 296.577 mo(\001)sh211.939 231.52 mo(\001)sh211.939 216.888 mo(\001)sh211.939 210.314 mo(\001)sh211.939 206.583 mo(\001)sh211.939 204.199 mo(\001)sh211.939 202.588 mo(\001)sh211.939 201.487 mo(\001)sh211.939 200.662 mo(\001)sh211.939 199.913 mo(\001)sh211.939 199.242 mo(\001)sh211.939 198.668 mo(\001)sh211.939 198.181 mo(\001)sh211.939 197.766 mo(\001)sh211.939 197.408 mo(\001)sh211.939 197.095 mo(\001)sh211.939 196.82 mo(\001)sh211.939 196.575 mo(\001)sh211.939 196.356 mo(\001)sh211.939 196.159 mo(\001)sh211.939 195.98 mo(\001)sh211.939 195.817 mo(\001)sh211.939 195.667 mo(\001)sh211.939 195.53 mo(\001)sh211.939 195.403 mo(\001)sh211.939 195.285 mo(\001)sh211.939 195.176 mo(\001)sh211.939 195.074 mo(\001)sh211.939 194.979 mo(\001)sh211.939 194.889 mo(\001)sh211.939 194.805 mo(\001)sh211.939 194.726 mo(\001)sh211.939 194.651 mo(\001)sh211.939 194.58 mo(\001)sh211.939 194.513 mo(\001)sh211.939 194.449 mo(\001)sh211.939 194.389 mo(\001)sh211.939 194.331 mo(\001)sh211.939 194.276 mo(\001)sh211.939 194.223 mo(\001)sh211.939 194.174 mo(\001)sh211.939 194.125 mo(\001)sh211.939 194.079 mo(\001)sh211.939 194.035 mo(\001)sh211.939 193.992 mo(\001)sh211.939 193.951 mo(\001)sh211.939 193.912 mo(\001)sh211.939 193.875 mo(\001)sh211.939 193.838 mo(\001)sh211.939 193.802 mo(\001)sh214.902 298.44 mo(\001)sh214.902 232.24 mo(\001)sh214.902 217.352 mo(\001)sh214.902 210.663 mo(\001)sh214.902 206.866 mo(\001)sh214.902 204.441 mo(\001)sh214.902 202.801 mo(\001)sh214.902 201.681 mo(\001)sh214.902 200.841 mo(\001)sh214.902 200.078 mo(\001)sh214.902 199.396 mo(\001)sh214.902 198.812 mo(\001)sh214.902 198.317 mo(\001)sh214.902 197.895 mo(\001)sh214.902 197.53 mo(\001)sh214.902 197.212 mo(\001)sh214.902 196.932 mo(\001)sh214.902 196.683 mo(\001)sh214.902 196.46 mo(\001)sh214.902 196.259 mo(\001)sh214.902 196.077 mo(\001)sh214.902 195.911 mo(\001)sh214.902 195.759 mo(\001)sh214.902 195.619 mo(\001)sh214.902 195.49 mo(\001)sh214.902 195.37 mo(\001)sh214.902 195.259 mo(\001)sh214.902 195.156 mo(\001)sh214.902 195.059 mo(\001)sh214.902 194.967 mo(\001)sh214.902 194.882 mo(\001)sh214.902 194.801 mo(\001)sh214.902 194.725 mo(\001)sh214.902 194.653 mo(\001)sh214.902 194.585 mo(\001)sh214.902 194.52 mo(\001)sh214.902 194.458 mo(\001)sh214.902 194.4 mo(\001)sh214.902 194.344 mo(\001)sh214.902 194.29 mo(\001)sh214.902 194.239 mo(\001)sh214.902 194.19 mo(\001)sh214.902 194.143 mo(\001)sh214.902 194.098 mo(\001)sh214.902 194.055 mo(\001)sh214.902 194.013 mo(\001)sh214.902 193.973 mo(\001)sh214.902 193.935 mo(\001)sh214.902 193.897 mo(\001)sh214.902 193.861 mo(\001)sh217.864 300.301 mo(\001)sh217.864 232.961 mo(\001)sh217.864 217.816 mo(\001)sh217.864 211.012 mo(\001)sh217.864 207.149 mo(\001)sh217.864 204.682 mo(\001)sh217.864 203.014 mo(\001)sh217.864 201.875 mo(\001)sh217.864 201.02 mo(\001)sh217.864 200.245 mo(\001)sh217.864 199.55 mo(\001)sh217.864 198.956 mo(\001)sh217.864 198.453 mo(\001)sh217.864 198.023 mo(\001)sh217.864 197.652 mo(\001)sh217.864 197.329 mo(\001)sh217.864 197.044 mo(\001)sh217.864 196.79 mo(\001)sh217.864 196.564 mo(\001)sh217.864 196.359 mo(\001)sh217.864 196.174 mo(\001)sh217.864 196.005 mo(\001)sh217.864 195.851 mo(\001)sh217.864 195.709 mo(\001)sh217.864 195.577 mo(\001)sh217.864 195.455 mo(\001)sh217.864 195.343 mo(\001)sh217.864 195.236 mo(\001)sh217.864 195.138 mo(\001)sh217.864 195.045 mo(\001)sh217.864 194.958 mo(\001)sh217.864 194.876 mo(\001)sh217.864 194.799 mo(\001)sh217.864 194.726 mo(\001)sh217.864 194.656 mo(\001)sh217.864 194.59 mo(\001)sh217.864 194.528 mo(\001)sh217.864 194.467 mo(\001)sh217.864 194.411 mo(\001)sh217.864 194.357 mo(\001)sh217.864 194.305 mo(\001)sh217.864 194.254 mo(\001)sh217.864 194.207 mo(\001)sh217.864 194.161 mo(\001)sh217.864 194.117 mo(\001)sh217.864 194.075 mo(\001)sh217.864 194.034 mo(\001)sh217.864 193.994 mo(\001)sh217.864 193.957 mo(\001)sh217.864 193.921 mo(\001)sh220.828 302.163 mo(\001)sh220.828 233.682 mo(\001)sh220.828 218.28 mo(\001)sh220.828 211.36 mo(\001)sh220.828 207.433 mo(\001)sh220.828 204.924 mo(\001)sh220.828 203.227 mo(\001)sh220.828 202.068 mo(\001)sh220.828 201.2 mo(\001)sh220.828 200.41 mo(\001)sh220.828 199.705 mo(\001)sh220.828 199.101 mo(\001)sh220.828 198.589 mo(\001)sh220.828 198.152 mo(\001)sh220.828 197.774 mo(\001)sh220.828 197.445 mo(\001)sh220.828 197.155 mo(\001)sh220.828 196.898 mo(\001)sh220.828 196.667 mo(\001)sh220.828 196.459 mo(\001)sh220.828 196.271 mo(\001)sh220.828 196.099 mo(\001)sh220.828 195.943 mo(\001)sh220.828 195.798 mo(\001)sh220.828 195.664 mo(\001)sh220.828 195.541 mo(\001)sh220.828 195.425 mo(\001)sh220.828 195.318 mo(\001)sh220.828 195.218 mo(\001)sh220.828 195.123 mo(\001)sh220.828 195.035 mo(\001)sh220.828 194.952 mo(\001)sh220.828 194.873 mo(\001)sh220.828 194.798 mo(\001)sh220.828 194.727 mo(\001)sh220.828 194.66 mo(\001)sh220.828 194.597 mo(\001)sh220.828 194.536 mo(\001)sh220.828 194.478 mo(\001)sh220.828 194.423 mo(\001)sh220.828 194.37 mo(\001)sh220.828 194.319 mo(\001)sh220.828 194.271 mo(\001)sh220.828 194.224 mo(\001)sh220.828 194.18 mo(\001)sh220.828 194.136 mo(\001)sh220.828 194.095 mo(\001)sh220.828 194.055 mo(\001)sh220.828 194.016 mo(\001)sh220.828 193.979 mo(\001)sh223.791 304.026 mo(\001)sh223.791 234.403 mo(\001)sh223.791 218.744 mo(\001)sh223.791 211.709 mo(\001)sh223.791 207.716 mo(\001)sh223.791 205.165 mo(\001)sh223.791 203.44 mo(\001)sh223.791 202.262 mo(\001)sh223.791 201.379 mo(\001)sh223.791 200.577 mo(\001)sh223.791 199.859 mo(\001)sh223.791 199.245 mo(\001)sh223.791 198.725 mo(\001)sh223.791 198.28 mo(\001)sh223.791 197.896 mo(\001)sh223.791 197.562 mo(\001)sh223.791 197.268 mo(\001)sh223.791 197.006 mo(\001)sh223.791 196.771 mo(\001)sh223.791 196.56 mo(\001)sh223.791 196.368 mo(\001)sh223.791 196.194 mo(\001)sh223.791 196.034 mo(\001)sh223.791 195.887 mo(\001)sh223.791 195.752 mo(\001)sh223.791 195.626 mo(\001)sh223.791 195.508 mo(\001)sh223.791 195.399 mo(\001)sh223.791 195.297 mo(\001)sh223.791 195.201 mo(\001)sh223.791 195.111 mo(\001)sh223.791 195.026 mo(\001)sh223.791 194.946 mo(\001)sh223.791 194.87 mo(\001)sh223.791 194.799 mo(\001)sh223.791 194.731 mo(\001)sh223.791 194.666 mo(\001)sh223.791 194.605 mo(\001)sh223.791 194.545 mo(\001)sh223.791 194.489 mo(\001)sh223.791 194.435 mo(\001)sh223.791 194.384 mo(\001)sh223.791 194.335 mo(\001)sh223.791 194.287 mo(\001)sh223.791 194.242 mo(\001)sh223.791 194.198 mo(\001)sh223.791 194.156 mo(\001)sh223.791 194.115 mo(\001)sh223.791 194.076 mo(\001)sh223.791 194.038 mo(\001)sh226.753 305.887 mo(\001)sh226.753 235.123 mo(\001)sh226.753 219.208 mo(\001)sh226.753 212.058 mo(\001)sh226.753 207.999 mo(\001)sh226.753 205.406 mo(\001)sh226.753 203.653 mo(\001)sh226.753 202.456 mo(\001)sh226.753 201.559 mo(\001)sh226.753 200.743 mo(\001)sh226.753 200.013 mo(\001)sh226.753 199.389 mo(\001)sh226.753 198.861 mo(\001)sh226.753 198.409 mo(\001)sh226.753 198.018 mo(\001)sh226.753 197.679 mo(\001)sh226.753 197.379 mo(\001)sh226.753 197.113 mo(\001)sh226.753 196.875 mo(\001)sh226.753 196.661 mo(\001)sh226.753 196.466 mo(\001)sh226.753 196.289 mo(\001)sh226.753 196.126 mo(\001)sh226.753 195.977 mo(\001)sh226.753 195.838 mo(\001)sh226.753 195.71 mo(\001)sh226.753 195.591 mo(\001)sh226.753 195.48 mo(\001)sh226.753 195.376 mo(\001)sh226.753 195.279 mo(\001)sh226.753 195.188 mo(\001)sh226.753 195.102 mo(\001)sh226.753 195.02 mo(\001)sh226.753 194.943 mo(\001)sh226.753 194.87 mo(\001)sh226.753 194.801 mo(\001)sh226.753 194.735 mo(\001)sh226.753 194.672 mo(\001)sh226.753 194.613 mo(\001)sh226.753 194.555 mo(\001)sh226.753 194.501 mo(\001)sh226.753 194.449 mo(\001)sh226.753 194.398 mo(\001)sh226.753 194.35 mo(\001)sh226.753 194.304 mo(\001)sh226.753 194.26 mo(\001)sh226.753 194.217 mo(\001)sh226.753 194.175 mo(\001)sh226.753 194.136 mo(\001)sh226.753 194.098 mo(\001)sh229.716 307.749 mo(\001)sh229.716 235.844 mo(\001)sh229.716 219.672 mo(\001)sh229.716 212.406 mo(\001)sh229.716 208.281 mo(\001)sh229.716 205.648 mo(\001)sh229.716 203.866 mo(\001)sh229.716 202.649 mo(\001)sh229.716 201.738 mo(\001)sh229.716 200.909 mo(\001)sh229.716 200.167 mo(\001)sh229.716 199.534 mo(\001)sh229.716 198.996 mo(\001)sh229.716 198.537 mo(\001)sh229.716 198.141 mo(\001)sh229.716 197.795 mo(\001)sh229.716 197.491 mo(\001)sh229.716 197.221 mo(\001)sh229.716 196.979 mo(\001)sh229.716 196.761 mo(\001)sh229.716 196.563 mo(\001)sh229.716 196.383 mo(\001)sh229.716 196.218 mo(\001)sh229.716 196.066 mo(\001)sh229.716 195.925 mo(\001)sh229.716 195.795 mo(\001)sh229.716 195.675 mo(\001)sh229.716 195.562 mo(\001)sh229.716 195.456 mo(\001)sh229.716 195.358 mo(\001)sh229.716 195.264 mo(\001)sh229.716 195.177 mo(\001)sh229.716 195.094 mo(\001)sh229.716 195.016 mo(\001)sh229.716 194.942 mo(\001)sh229.716 194.871 mo(\001)sh229.716 194.804 mo(\001)sh229.716 194.741 mo(\001)sh229.716 194.68 mo(\001)sh229.716 194.622 mo(\001)sh229.716 194.566 mo(\001)sh229.716 194.513 mo(\001)sh229.716 194.462 mo(\001)sh229.716 194.413 mo(\001)sh229.716 194.367 mo(\001)sh229.716 194.321 mo(\001)sh229.716 194.278 mo(\001)sh229.716 194.235 mo(\001)sh229.716 194.196 mo(\001)sh229.716 194.156 mo(\001)sh232.68 309.612 mo(\001)sh232.68 236.565 mo(\001)sh232.68 220.136 mo(\001)sh232.68 212.754 mo(\001)sh232.68 208.565 mo(\001)sh232.68 205.889 mo(\001)sh232.68 204.079 mo(\001)sh232.68 202.843 mo(\001)sh232.68 201.917 mo(\001)sh232.68 201.075 mo(\001)sh232.68 200.322 mo(\001)sh232.68 199.678 mo(\001)sh232.68 199.132 mo(\001)sh232.68 198.665 mo(\001)sh232.68 198.263 mo(\001)sh232.68 197.912 mo(\001)sh232.68 197.603 mo(\001)sh232.68 197.329 mo(\001)sh232.68 197.082 mo(\001)sh232.68 196.861 mo(\001)sh232.68 196.66 mo(\001)sh232.68 196.477 mo(\001)sh232.68 196.309 mo(\001)sh232.68 196.155 mo(\001)sh232.68 196.012 mo(\001)sh232.68 195.88 mo(\001)sh232.68 195.758 mo(\001)sh232.68 195.643 mo(\001)sh232.68 195.536 mo(\001)sh232.68 195.435 mo(\001)sh232.68 195.341 mo(\001)sh232.68 195.252 mo(\001)sh232.68 195.168 mo(\001)sh232.68 195.089 mo(\001)sh232.68 195.013 mo(\001)sh232.68 194.942 mo(\001)sh232.68 194.873 mo(\001)sh232.68 194.809 mo(\001)sh232.68 194.747 mo(\001)sh232.68 194.688 mo(\001)sh232.68 194.632 mo(\001)sh232.68 194.577 mo(\001)sh232.68 194.526 mo(\001)sh232.68 194.476 mo(\001)sh232.68 194.428 mo(\001)sh232.68 194.382 mo(\001)sh232.68 194.339 mo(\001)sh232.68 194.296 mo(\001)sh232.68 194.255 mo(\001)sh232.68 194.215 mo(\001)sh235.643 311.473 mo(\001)sh235.643 237.286 mo(\001)sh235.643 220.6 mo(\001)sh235.643 213.103 mo(\001)sh235.643 208.848 mo(\001)sh235.643 206.131 mo(\001)sh235.643 204.292 mo(\001)sh235.643 203.037 mo(\001)sh235.643 202.097 mo(\001)sh235.643 201.241 mo(\001)sh235.643 200.476 mo(\001)sh235.643 199.822 mo(\001)sh235.643 199.268 mo(\001)sh235.643 198.794 mo(\001)sh235.643 198.385 mo(\001)sh235.643 198.029 mo(\001)sh235.643 197.715 mo(\001)sh235.643 197.436 mo(\001)sh235.643 197.186 mo(\001)sh235.643 196.961 mo(\001)sh235.643 196.757 mo(\001)sh235.643 196.571 mo(\001)sh235.643 196.401 mo(\001)sh235.643 196.244 mo(\001)sh235.643 196.099 mo(\001)sh235.643 195.965 mo(\001)sh235.643 195.84 mo(\001)sh235.643 195.724 mo(\001)sh235.643 195.615 mo(\001)sh235.643 195.514 mo(\001)sh235.643 195.417 mo(\001)sh235.643 195.327 mo(\001)sh235.643 195.242 mo(\001)sh235.643 195.161 mo(\001)sh235.643 195.084 mo(\001)sh235.643 195.012 mo(\001)sh235.643 194.943 mo(\001)sh235.643 194.877 mo(\001)sh235.643 194.815 mo(\001)sh235.643 194.754 mo(\001)sh235.643 194.697 mo(\001)sh235.643 194.642 mo(\001)sh235.643 194.589 mo(\001)sh235.643 194.539 mo(\001)sh235.643 194.491 mo(\001)sh235.643 194.444 mo(\001)sh235.643 194.4 mo(\001)sh235.643 194.356 mo(\001)sh235.643 194.315 mo(\001)sh235.643 194.274 mo(\001)sh238.605 313.335 mo(\001)sh238.605 238.006 mo(\001)sh238.605 221.064 mo(\001)sh238.605 213.452 mo(\001)sh238.605 209.131 mo(\001)sh238.605 206.372 mo(\001)sh238.605 204.505 mo(\001)sh238.605 203.231 mo(\001)sh238.605 202.276 mo(\001)sh238.605 201.408 mo(\001)sh238.605 200.63 mo(\001)sh238.605 199.967 mo(\001)sh238.605 199.404 mo(\001)sh238.605 198.922 mo(\001)sh238.605 198.507 mo(\001)sh238.605 198.146 mo(\001)sh238.605 197.827 mo(\001)sh238.605 197.543 mo(\001)sh238.605 197.29 mo(\001)sh238.605 197.061 mo(\001)sh238.605 196.854 mo(\001)sh238.605 196.666 mo(\001)sh238.605 196.493 mo(\001)sh238.605 196.334 mo(\001)sh238.605 196.186 mo(\001)sh238.605 196.051 mo(\001)sh238.605 195.924 mo(\001)sh238.605 195.806 mo(\001)sh238.605 195.695 mo(\001)sh238.605 195.591 mo(\001)sh238.605 195.494 mo(\001)sh238.605 195.402 mo(\001)sh238.605 195.315 mo(\001)sh238.605 195.233 mo(\001)sh238.605 195.156 mo(\001)sh238.605 195.082 mo(\001)sh238.605 195.012 mo(\001)sh238.605 194.946 mo(\001)sh238.605 194.882 mo(\001)sh238.605 194.821 mo(\001)sh238.605 194.763 mo(\001)sh238.605 194.707 mo(\001)sh238.605 194.653 mo(\001)sh238.605 194.602 mo(\001)sh238.605 194.553 mo(\001)sh238.605 194.506 mo(\001)sh238.605 194.46 mo(\001)sh238.605 194.416 mo(\001)sh238.605 194.374 mo(\001)sh238.605 194.333 mo(\001)sh241.569 315.198 mo(\001)sh241.569 238.726 mo(\001)sh241.569 221.528 mo(\001)sh241.569 213.801 mo(\001)sh241.569 209.414 mo(\001)sh241.569 206.613 mo(\001)sh241.569 204.718 mo(\001)sh241.569 203.425 mo(\001)sh241.569 202.455 mo(\001)sh241.569 201.573 mo(\001)sh241.569 200.785 mo(\001)sh241.569 200.111 mo(\001)sh241.569 199.539 mo(\001)sh241.569 199.051 mo(\001)sh241.569 198.63 mo(\001)sh241.569 198.263 mo(\001)sh241.569 197.939 mo(\001)sh241.569 197.651 mo(\001)sh241.569 197.394 mo(\001)sh241.569 197.162 mo(\001)sh241.569 196.951 mo(\001)sh241.569 196.76 mo(\001)sh241.569 196.585 mo(\001)sh241.569 196.423 mo(\001)sh241.569 196.273 mo(\001)sh241.569 196.135 mo(\001)sh241.569 196.007 mo(\001)sh241.569 195.887 mo(\001)sh241.569 195.775 mo(\001)sh241.569 195.669 mo(\001)sh241.569 195.571 mo(\001)sh241.569 195.477 mo(\001)sh241.569 195.389 mo(\001)sh241.569 195.306 mo(\001)sh241.569 195.227 mo(\001)sh241.569 195.153 mo(\001)sh241.569 195.081 mo(\001)sh241.569 195.013 mo(\001)sh241.569 194.949 mo(\001)sh241.569 194.887 mo(\001)sh241.569 194.828 mo(\001)sh241.569 194.772 mo(\001)sh241.569 194.717 mo(\001)sh241.569 194.666 mo(\001)sh241.569 194.615 mo(\001)sh241.569 194.568 mo(\001)sh241.569 194.521 mo(\001)sh241.569 194.476 mo(\001)sh241.569 194.434 mo(\001)sh241.569 194.392 mo(\001)sh244.532 317.06 mo(\001)sh244.532 239.447 mo(\001)sh244.532 221.992 mo(\001)sh244.532 214.149 mo(\001)sh244.532 209.697 mo(\001)sh244.532 206.854 mo(\001)sh244.532 204.932 mo(\001)sh244.532 203.618 mo(\001)sh244.532 202.634 mo(\001)sh244.532 201.74 mo(\001)sh244.532 200.939 mo(\001)sh244.532 200.255 mo(\001)sh244.532 199.675 mo(\001)sh244.532 199.18 mo(\001)sh244.532 198.752 mo(\001)sh244.532 198.379 mo(\001)sh244.532 198.051 mo(\001)sh244.532 197.759 mo(\001)sh244.532 197.497 mo(\001)sh244.532 197.262 mo(\001)sh244.532 197.049 mo(\001)sh244.532 196.854 mo(\001)sh244.532 196.676 mo(\001)sh244.532 196.512 mo(\001)sh244.532 196.361 mo(\001)sh244.532 196.22 mo(\001)sh244.532 196.09 mo(\001)sh244.532 195.968 mo(\001)sh244.532 195.854 mo(\001)sh244.532 195.748 mo(\001)sh244.532 195.647 mo(\001)sh244.532 195.553 mo(\001)sh244.532 195.463 mo(\001)sh244.532 195.379 mo(\001)sh244.532 195.299 mo(\001)sh244.532 195.223 mo(\001)sh244.532 195.151 mo(\001)sh244.532 195.082 mo(\001)sh244.532 195.016 mo(\001)sh244.532 194.953 mo(\001)sh244.532 194.894 mo(\001)sh244.532 194.836 mo(\001)sh244.532 194.782 mo(\001)sh244.532 194.728 mo(\001)sh244.532 194.678 mo(\001)sh244.532 194.629 mo(\001)sh244.532 194.582 mo(\001)sh244.532 194.537 mo(\001)sh244.532 194.493 mo(\001)sh244.532 194.451 mo(\001)sh247.494 318.921 mo(\001)sh247.494 240.168 mo(\001)sh247.494 222.456 mo(\001)sh247.494 214.498 mo(\001)sh247.494 209.981 mo(\001)sh247.494 207.096 mo(\001)sh247.494 205.145 mo(\001)sh247.494 203.812 mo(\001)sh247.494 202.814 mo(\001)sh247.494 201.906 mo(\001)sh247.494 201.094 mo(\001)sh247.494 200.399 mo(\001)sh247.494 199.811 mo(\001)sh247.494 199.308 mo(\001)sh247.494 198.874 mo(\001)sh247.494 198.496 mo(\001)sh247.494 198.162 mo(\001)sh247.494 197.866 mo(\001)sh247.494 197.601 mo(\001)sh247.494 197.363 mo(\001)sh247.494 197.146 mo(\001)sh247.494 196.948 mo(\001)sh247.494 196.768 mo(\001)sh247.494 196.601 mo(\001)sh247.494 196.447 mo(\001)sh247.494 196.305 mo(\001)sh247.494 196.173 mo(\001)sh247.494 196.049 mo(\001)sh247.494 195.934 mo(\001)sh247.494 195.825 mo(\001)sh247.494 195.724 mo(\001)sh247.494 195.628 mo(\001)sh247.494 195.537 mo(\001)sh247.494 195.452 mo(\001)sh247.494 195.371 mo(\001)sh247.494 195.293 mo(\001)sh247.494 195.22 mo(\001)sh247.494 195.15 mo(\001)sh247.494 195.084 mo(\001)sh247.494 195.02 mo(\001)sh247.494 194.959 mo(\001)sh247.494 194.9 mo(\001)sh247.494 194.845 mo(\001)sh247.494 194.791 mo(\001)sh247.494 194.74 mo(\001)sh247.494 194.69 mo(\001)sh247.494 194.643 mo(\001)sh247.494 194.597 mo(\001)sh247.494 194.553 mo(\001)sh247.494 194.51 mo(\001)sh250.458 320.784 mo(\001)sh250.458 240.889 mo(\001)sh250.458 222.919 mo(\001)sh250.458 214.847 mo(\001)sh250.458 210.264 mo(\001)sh250.458 207.337 mo(\001)sh250.458 205.358 mo(\001)sh250.458 204.006 mo(\001)sh250.458 202.993 mo(\001)sh250.458 202.072 mo(\001)sh250.458 201.248 mo(\001)sh250.458 200.544 mo(\001)sh250.458 199.947 mo(\001)sh250.458 199.437 mo(\001)sh250.458 198.996 mo(\001)sh250.458 198.613 mo(\001)sh250.458 198.275 mo(\001)sh250.458 197.974 mo(\001)sh250.458 197.705 mo(\001)sh250.458 197.463 mo(\001)sh250.458 197.243 mo(\001)sh250.458 197.042 mo(\001)sh250.458 196.859 mo(\001)sh250.458 196.691 mo(\001)sh250.458 196.535 mo(\001)sh250.458 196.39 mo(\001)sh250.458 196.256 mo(\001)sh250.458 196.13 mo(\001)sh250.458 196.014 mo(\001)sh250.458 195.904 mo(\001)sh250.458 195.8 mo(\001)sh250.458 195.703 mo(\001)sh250.458 195.611 mo(\001)sh250.458 195.524 mo(\001)sh250.458 195.442 mo(\001)sh250.458 195.364 mo(\001)sh250.458 195.289 mo(\001)sh250.458 195.218 mo(\001)sh250.458 195.151 mo(\001)sh250.458 195.087 mo(\001)sh250.458 195.025 mo(\001)sh250.458 194.965 mo(\001)sh250.458 194.909 mo(\001)sh250.458 194.855 mo(\001)sh250.458 194.803 mo(\001)sh250.458 194.752 mo(\001)sh250.458 194.704 mo(\001)sh250.458 194.657 mo(\001)sh250.458 194.612 mo(\001)sh250.458 194.569 mo(\001)sh253.421 322.646 mo(\001)sh253.421 241.609 mo(\001)sh253.421 223.383 mo(\001)sh253.421 215.195 mo(\001)sh253.421 210.547 mo(\001)sh253.421 207.579 mo(\001)sh253.421 205.571 mo(\001)sh253.421 204.199 mo(\001)sh253.421 203.172 mo(\001)sh253.421 202.238 mo(\001)sh253.421 201.402 mo(\001)sh253.421 200.688 mo(\001)sh253.421 200.082 mo(\001)sh253.421 199.565 mo(\001)sh253.421 199.119 mo(\001)sh253.421 198.729 mo(\001)sh253.421 198.386 mo(\001)sh253.421 198.082 mo(\001)sh253.421 197.809 mo(\001)sh253.421 197.563 mo(\001)sh253.421 197.34 mo(\001)sh253.421 197.137 mo(\001)sh253.421 196.951 mo(\001)sh253.421 196.78 mo(\001)sh253.421 196.621 mo(\001)sh253.421 196.475 mo(\001)sh253.421 196.339 mo(\001)sh253.421 196.212 mo(\001)sh253.421 196.093 mo(\001)sh253.421 195.981 mo(\001)sh253.421 195.877 mo(\001)sh253.421 195.778 mo(\001)sh253.421 195.685 mo(\001)sh253.421 195.596 mo(\001)sh253.421 195.513 mo(\001)sh253.421 195.434 mo(\001)sh253.421 195.358 mo(\001)sh253.421 195.287 mo(\001)sh253.421 195.218 mo(\001)sh253.421 195.153 mo(\001)sh253.421 195.09 mo(\001)sh253.421 195.03 mo(\001)sh253.421 194.973 mo(\001)sh253.421 194.918 mo(\001)sh253.421 194.864 mo(\001)sh253.421 194.814 mo(\001)sh253.421 194.765 mo(\001)sh253.421 194.717 mo(\001)sh253.421 194.672 mo(\001)sh253.421 194.628 mo(\001)sh256.384 324.507 mo(\001)sh256.384 242.33 mo(\001)sh256.384 223.847 mo(\001)sh256.384 215.544 mo(\001)sh256.384 210.83 mo(\001)sh256.384 207.82 mo(\001)sh256.384 205.783 mo(\001)sh256.384 204.393 mo(\001)sh256.384 203.351 mo(\001)sh256.384 202.404 mo(\001)sh256.384 201.557 mo(\001)sh256.384 200.832 mo(\001)sh256.384 200.218 mo(\001)sh256.384 199.693 mo(\001)sh256.384 199.241 mo(\001)sh256.384 198.846 mo(\001)sh256.384 198.498 mo(\001)sh256.384 198.189 mo(\001)sh256.384 197.912 mo(\001)sh256.384 197.663 mo(\001)sh256.384 197.437 mo(\001)sh256.384 197.231 mo(\001)sh256.384 197.042 mo(\001)sh256.384 196.869 mo(\001)sh256.384 196.709 mo(\001)sh256.384 196.56 mo(\001)sh256.384 196.422 mo(\001)sh256.384 196.293 mo(\001)sh256.384 196.173 mo(\001)sh256.384 196.06 mo(\001)sh256.384 195.953 mo(\001)sh256.384 195.853 mo(\001)sh256.384 195.758 mo(\001)sh256.384 195.669 mo(\001)sh256.384 195.584 mo(\001)sh256.384 195.504 mo(\001)sh256.384 195.428 mo(\001)sh256.384 195.355 mo(\001)sh256.384 195.285 mo(\001)sh256.384 195.219 mo(\001)sh256.384 195.155 mo(\001)sh256.384 195.095 mo(\001)sh256.384 195.036 mo(\001)sh256.384 194.98 mo(\001)sh256.384 194.927 mo(\001)sh256.384 194.875 mo(\001)sh256.384 194.825 mo(\001)sh256.384 194.778 mo(\001)sh256.384 194.731 mo(\001)sh256.384 194.687 mo(\001)shgrestore
gsave
258.288 325.313 mo
262.806 325.313 li
262.806 322.3 li
258.288 322.3 li
cp
clp
RQARRB+Mathematica3*1 [3.76563 0 0 -3.76569 0 0 ]msf259.347 326.37 mo(\001)shgrestore
gsave
8.25 361 mo
279.375 361 li
279.375 181 li
8.25 181 li
cp
clp
RQARRB+Mathematica3*1 [3.76563 0 0 -3.76569 0 0 ]msf259.347 243.05 mo(\001)sh259.347 224.311 mo(\001)sh259.347 215.892 mo(\001)sh259.347 211.113 mo(\001)sh259.347 208.062 mo(\001)sh259.347 205.997 mo(\001)sh259.347 204.588 mo(\001)sh259.347 203.531 mo(\001)sh259.347 202.571 mo(\001)sh259.347 201.711 mo(\001)sh259.347 200.977 mo(\001)sh259.347 200.354 mo(\001)sh259.347 199.822 mo(\001)sh259.347 199.363 mo(\001)sh259.347 198.963 mo(\001)sh259.347 198.61 mo(\001)sh259.347 198.297 mo(\001)sh259.347 198.016 mo(\001)sh259.347 197.764 mo(\001)sh259.347 197.534 mo(\001)sh259.347 197.326 mo(\001)sh259.347 197.134 mo(\001)sh259.347 196.958 mo(\001)sh259.347 196.796 mo(\001)sh259.347 196.645 mo(\001)sh259.347 196.505 mo(\001)sh259.347 196.375 mo(\001)sh259.347 196.253 mo(\001)sh259.347 196.138 mo(\001)sh259.347 196.03 mo(\001)sh259.347 195.929 mo(\001)sh259.347 195.832 mo(\001)sh259.347 195.742 mo(\001)sh259.347 195.656 mo(\001)sh259.347 195.575 mo(\001)sh259.347 195.497 mo(\001)sh259.347 195.423 mo(\001)sh259.347 195.353 mo(\001)sh259.347 195.286 mo(\001)sh259.347 195.221 mo(\001)sh259.347 195.16 mo(\001)sh259.347 195.1 mo(\001)sh259.347 195.044 mo(\001)sh259.347 194.99 mo(\001)sh259.347 194.937 mo(\001)sh259.347 194.886 mo(\001)sh259.347 194.838 mo(\001)sh259.347 194.791 mo(\001)sh259.347 194.746 mo(\001)sh262.31 243.771 mo(\001)sh262.31 224.775 mo(\001)sh262.31 216.241 mo(\001)sh262.31 211.397 mo(\001)sh262.31 208.303 mo(\001)sh262.31 206.21 mo(\001)sh262.31 204.781 mo(\001)sh262.31 203.71 mo(\001)sh262.31 202.737 mo(\001)sh262.31 201.866 mo(\001)sh262.31 201.122 mo(\001)sh262.31 200.49 mo(\001)sh262.31 199.95 mo(\001)sh262.31 199.485 mo(\001)sh262.31 199.08 mo(\001)sh262.31 198.722 mo(\001)sh262.31 198.404 mo(\001)sh262.31 198.12 mo(\001)sh262.31 197.864 mo(\001)sh262.31 197.632 mo(\001)sh262.31 197.42 mo(\001)sh262.31 197.226 mo(\001)sh262.31 197.048 mo(\001)sh262.31 196.883 mo(\001)sh262.31 196.73 mo(\001)sh262.31 196.588 mo(\001)sh262.31 196.456 mo(\001)sh262.31 196.332 mo(\001)sh262.31 196.216 mo(\001)sh262.31 196.106 mo(\001)sh262.31 196.004 mo(\001)sh262.31 195.907 mo(\001)sh262.31 195.815 mo(\001)sh262.31 195.728 mo(\001)sh262.31 195.645 mo(\001)sh262.31 195.566 mo(\001)sh262.31 195.491 mo(\001)sh262.31 195.42 mo(\001)sh262.31 195.352 mo(\001)sh262.31 195.286 mo(\001)sh262.31 195.224 mo(\001)sh262.31 195.164 mo(\001)sh262.31 195.107 mo(\001)sh262.31 195.051 mo(\001)sh262.31 194.999 mo(\001)sh262.31 194.947 mo(\001)sh262.31 194.898 mo(\001)sh262.31 194.851 mo(\001)sh262.31 194.805 mo(\001)sh265.273 244.492 mo(\001)sh265.273 225.239 mo(\001)sh265.273 216.59 mo(\001)sh265.273 211.68 mo(\001)sh265.273 208.544 mo(\001)sh265.273 206.423 mo(\001)sh265.273 204.975 mo(\001)sh265.273 203.889 mo(\001)sh265.273 202.903 mo(\001)sh265.273 202.02 mo(\001)sh265.273 201.265 mo(\001)sh265.273 200.625 mo(\001)sh265.273 200.079 mo(\001)sh265.273 199.608 mo(\001)sh265.273 199.196 mo(\001)sh265.273 198.834 mo(\001)sh265.273 198.512 mo(\001)sh265.273 198.224 mo(\001)sh265.273 197.964 mo(\001)sh265.273 197.729 mo(\001)sh265.273 197.514 mo(\001)sh265.273 197.317 mo(\001)sh265.273 197.137 mo(\001)sh265.273 196.969 mo(\001)sh265.273 196.815 mo(\001)sh265.273 196.671 mo(\001)sh265.273 196.537 mo(\001)sh265.273 196.411 mo(\001)sh265.273 196.294 mo(\001)sh265.273 196.183 mo(\001)sh265.273 196.078 mo(\001)sh265.273 195.981 mo(\001)sh265.273 195.887 mo(\001)sh265.273 195.799 mo(\001)sh265.273 195.715 mo(\001)sh265.273 195.636 mo(\001)sh265.273 195.56 mo(\001)sh265.273 195.487 mo(\001)sh265.273 195.418 mo(\001)sh265.273 195.352 mo(\001)sh265.273 195.289 mo(\001)sh265.273 195.228 mo(\001)sh265.273 195.169 mo(\001)sh265.273 195.114 mo(\001)sh265.273 195.06 mo(\001)sh265.273 195.008 mo(\001)sh265.273 194.959 mo(\001)sh265.273 194.91 mo(\001)sh265.273 194.864 mo(\001)sh268.236 245.212 mo(\001)sh268.236 225.704 mo(\001)sh268.236 216.938 mo(\001)sh268.236 211.963 mo(\001)sh268.236 208.785 mo(\001)sh268.236 206.636 mo(\001)sh268.236 205.169 mo(\001)sh268.236 204.069 mo(\001)sh268.236 203.069 mo(\001)sh268.236 202.174 mo(\001)sh268.236 201.41 mo(\001)sh268.236 200.762 mo(\001)sh268.236 200.207 mo(\001)sh268.236 199.73 mo(\001)sh268.236 199.313 mo(\001)sh268.236 198.946 mo(\001)sh268.236 198.62 mo(\001)sh268.236 198.327 mo(\001)sh268.236 198.065 mo(\001)sh268.236 197.826 mo(\001)sh268.236 197.608 mo(\001)sh268.236 197.409 mo(\001)sh268.236 197.226 mo(\001)sh268.236 197.057 mo(\001)sh268.236 196.9 mo(\001)sh268.236 196.754 mo(\001)sh268.236 196.619 mo(\001)sh268.236 196.491 mo(\001)sh268.236 196.372 mo(\001)sh268.236 196.259 mo(\001)sh268.236 196.154 mo(\001)sh268.236 196.054 mo(\001)sh268.236 195.959 mo(\001)sh268.236 195.871 mo(\001)sh268.236 195.786 mo(\001)sh268.236 195.705 mo(\001)sh268.236 195.627 mo(\001)sh268.236 195.554 mo(\001)sh268.236 195.484 mo(\001)sh268.236 195.417 mo(\001)sh268.236 195.353 mo(\001)sh268.236 195.291 mo(\001)sh268.236 195.233 mo(\001)sh268.236 195.176 mo(\001)sh268.236 195.121 mo(\001)sh268.236 195.069 mo(\001)sh268.236 195.019 mo(\001)sh268.236 194.97 mo(\001)sh268.236 194.922 mo(\001)sh271.199 245.933 mo(\001)sh271.199 226.168 mo(\001)sh271.199 217.287 mo(\001)sh271.199 212.246 mo(\001)sh271.199 209.027 mo(\001)sh271.199 206.849 mo(\001)sh271.199 205.362 mo(\001)sh271.199 204.248 mo(\001)sh271.199 203.235 mo(\001)sh271.199 202.329 mo(\001)sh271.199 201.554 mo(\001)sh271.199 200.897 mo(\001)sh271.199 200.336 mo(\001)sh271.199 199.852 mo(\001)sh271.199 199.429 mo(\001)sh271.199 199.058 mo(\001)sh271.199 198.727 mo(\001)sh271.199 198.431 mo(\001)sh271.199 198.165 mo(\001)sh271.199 197.923 mo(\001)sh271.199 197.703 mo(\001)sh271.199 197.501 mo(\001)sh271.199 197.315 mo(\001)sh271.199 197.144 mo(\001)sh271.199 196.985 mo(\001)sh271.199 196.837 mo(\001)sh271.199 196.699 mo(\001)sh271.199 196.57 mo(\001)sh271.199 196.45 mo(\001)sh271.199 196.336 mo(\001)sh271.199 196.229 mo(\001)sh271.199 196.128 mo(\001)sh271.199 196.033 mo(\001)sh271.199 195.941 mo(\001)sh271.199 195.856 mo(\001)sh271.199 195.773 mo(\001)sh271.199 195.696 mo(\001)sh271.199 195.621 mo(\001)sh271.199 195.551 mo(\001)sh271.199 195.483 mo(\001)sh271.199 195.418 mo(\001)sh271.199 195.355 mo(\001)sh271.199 195.296 mo(\001)sh271.199 195.238 mo(\001)sh271.199 195.183 mo(\001)sh271.199 195.13 mo(\001)sh271.199 195.078 mo(\001)sh271.199 195.029 mo(\001)sh271.199 194.982 mo(\001)sh274.162 246.654 mo(\001)sh274.162 226.632 mo(\001)sh274.162 217.636 mo(\001)sh274.162 212.529 mo(\001)sh274.162 209.268 mo(\001)sh274.162 207.062 mo(\001)sh274.162 205.556 mo(\001)sh274.162 204.427 mo(\001)sh274.162 203.401 mo(\001)sh274.162 202.483 mo(\001)sh274.162 201.698 mo(\001)sh274.162 201.033 mo(\001)sh274.162 200.465 mo(\001)sh274.162 199.974 mo(\001)sh274.162 199.546 mo(\001)sh274.162 199.169 mo(\001)sh274.162 198.835 mo(\001)sh274.162 198.535 mo(\001)sh274.162 198.265 mo(\001)sh274.162 198.02 mo(\001)sh274.162 197.797 mo(\001)sh274.162 197.592 mo(\001)sh274.162 197.405 mo(\001)sh274.162 197.231 mo(\001)sh274.162 197.07 mo(\001)sh274.162 196.921 mo(\001)sh274.162 196.78 mo(\001)sh274.162 196.65 mo(\001)sh274.162 196.527 mo(\001)sh274.162 196.413 mo(\001)sh274.162 196.305 mo(\001)sh274.162 196.202 mo(\001)sh274.162 196.105 mo(\001)sh274.162 196.013 mo(\001)sh274.162 195.926 mo(\001)sh274.162 195.843 mo(\001)sh274.162 195.764 mo(\001)sh274.162 195.689 mo(\001)sh274.162 195.617 mo(\001)sh274.162 195.548 mo(\001)sh274.162 195.483 mo(\001)sh274.162 195.42 mo(\001)sh274.162 195.359 mo(\001)sh274.162 195.301 mo(\001)sh274.162 195.245 mo(\001)sh274.162 195.191 mo(\001)sh274.162 195.139 mo(\001)sh274.162 195.089 mo(\001)sh274.162 195.041 mo(\001)shgrestore
gsave
44.4 325.313 mo
277.116 325.313 li
277.116 181.463 li
44.4 181.463 li
cp
clp
44.4 189.313 mo
44.4715 189.358 li
44.5431 189.403 li
44.6854 189.492 li
44.9709 189.67 li
45.5417 190.026 li
46.6842 190.737 li
48.9677 192.145 li
53.9203 195.15 li
58.5437 197.894 li
63.0775 200.527 li
67.9947 203.318 li
72.5842 205.863 li
77.5578 208.555 li
82.4403 211.132 li
86.9952 213.475 li
91.9342 215.95 li
96.5449 218.199 li
101.064 220.345 li
105.969 222.607 li
110.545 224.654 li
115.506 226.804 li
120.375 228.842 li
124.917 230.678 li
129.842 232.597 li
134.439 234.318 li
139.421 236.106 li
144.312 237.782 li
148.875 239.271 li
153.822 240.804 li
158.441 242.154 li
162.969 243.401 li
167.882 244.664 li
172.466 245.757 li
177.434 246.842 li
182.312 247.805 li
186.862 248.606 li
191.796 249.365 li
191.867 249.376 li
191.939 249.386 li
192.083 249.406 li
192.371 249.447 li
192.947 249.526 li
194.098 249.679 li
196.401 249.967 li
196.472 249.975 li
196.542 249.984 li
196.683 250 li
196.966 250.033 li
197.53 250.098 li
198.659 250.222 li
198.729 250.23 li
198.8 250.237 li
198.941 250.253 li
199.223 250.283 li
199.787 250.341 li
200.916 250.451 li
200.993 250.459 li
201.069 250.466 li
201.222 250.481 li
201.528 250.509 li
202.141 250.564 li
203.366 250.669 li
203.442 250.675 li
203.519 250.682 li
203.672 250.694 li
203.978 250.718 li
204.59 250.765 li
205.815 250.854 li
205.887 250.858 li
205.958 250.863 li
206.101 250.873 li
206.387 250.892 li
206.958 250.928 li
207.029 250.933 li
207.101 250.937 li
207.244 250.945 li
207.529 250.963 li
208.101 250.995 li
208.244 251.003 li
208.386 251.011 li
208.672 251.026 li
209.243 251.055 li
210.387 251.107 li
210.463 251.11 li
210.541 251.113 li
210.696 251.119 li
211.006 251.131 li
211.625 251.154 li
211.702 251.157 li
211.78 251.159 li
211.935 251.165 li
212.244 251.174 li
212.864 251.192 li
212.941 251.195 li
213.019 251.197 li
213.174 251.201 li
213.483 251.208 li
213.561 251.21 li
213.638 251.212 li
213.793 251.215 li
214.102 251.222 li
214.258 251.225 li
214.413 251.227 li
214.49 251.229 li
214.567 251.23 li
214.722 251.232 li
214.8 251.234 li
214.877 251.235 li
215.032 251.237 li
215.341 251.241 li
215.414 251.242 li
215.486 251.243 li
215.631 251.244 li
215.703 251.245 li
215.775 251.246 li
215.92 251.247 li
215.992 251.247 li
216.064 251.248 li
216.137 251.249 li
216.209 251.249 li
216.281 251.25 li
216.354 251.25 li
216.426 251.25 li
216.498 251.25 li
216.57 251.251 li
216.715 251.251 li
216.787 251.252 li
217.077 251.252 li
217.149 251.253 li
217.293 251.253 li
217.366 251.252 li
217.655 251.252 li
217.727 251.251 li
217.872 251.251 li
217.944 251.25 li
218.016 251.25 li
218.089 251.25 li
218.233 251.249 li
218.306 251.249 li
218.378 251.248 li
218.523 251.247 li
218.595 251.247 li
218.667 251.246 li
218.812 251.244 li
218.884 251.244 li
218.956 251.243 li
219.101 251.241 li
219.173 251.24 li
219.246 251.239 li
219.39 251.238 li
219.462 251.236 li
219.535 251.235 li
219.679 251.233 li
219.969 251.228 li
220.039 251.227 li
220.11 251.226 li
220.252 251.223 li
220.536 251.217 li
220.606 251.216 li
220.677 251.214 li
220.819 251.211 li
221.103 251.204 li
221.174 251.202 li
221.244 251.2 li
221.386 251.196 li
221.67 251.188 li
222.237 251.171 li
222.308 251.168 li
222.379 251.166 li
222.52 251.161 li
222.804 251.151 li
223.371 251.129 li
223.513 251.123 li
223.654 251.117 li
223.938 251.105 li
224.505 251.079 li
224.582 251.075 li
224.659 251.071 li
224.813 251.063 li
225.12 251.047 li
225.735 251.013 li
225.812 251.009 li
225.889 251.005 li
226.042 250.996 li
226.351 250.977 li
226.965 250.938 li
227.042 250.933 li
227.119 250.927 li
227.273 250.918 li
227.58 250.896 li
228.196 250.851 li
229.426 250.754 li
229.497 250.748 li
229.569 250.742 li
229.712 250.729 li
229.999 250.704 li
230.573 250.652 li
231.722 250.542 li
231.793 250.534 li
231.865 250.527 li
232.009 250.512 li
232.296 250.482 li
232.87 250.42 li
234.018 250.289 li
234.173 250.271 li
234.329 250.253 li
234.64 250.214 li
235.262 250.136 li
236.506 249.97 li
236.584 249.959 li
236.662 249.948 li
236.817 249.926 li
237.128 249.882 li
237.751 249.792 li
238.995 249.6 li
239.071 249.588 li
239.148 249.576 li
239.3 249.551 li
239.605 249.502 li
240.216 249.4 li
241.438 249.187 li
243.88 248.722 li
243.952 248.708 li
244.023 248.694 li
244.166 248.665 li
244.45 248.606 li
245.02 248.488 li
246.159 248.242 li
248.438 247.712 li
248.516 247.694 li
248.593 247.675 li
248.747 247.637 li
249.056 247.561 li
249.674 247.406 li
250.909 247.084 li
253.38 246.395 li
257.995 244.943 li
262.517 243.296 li
267.424 241.242 li
272.004 239.057 li
272.084 239.016 li
272.164 238.976 li
272.324 238.894 li
272.643 238.731 li
273.282 238.399 li
274.56 237.718 li
274.639 237.675 li
274.719 237.631 li
274.88 237.545 li
275.199 237.369 li
275.838 237.015 li
275.917 236.971 li
275.997 236.926 li
276.157 236.836 li
276.477 236.655 li
276.557 236.61 li
276.637 236.564 li
276.796 236.473 li
276.876 236.427 li
277.036 236.335 li
277.116 236.289 li
0 .990631 1 .000396735 cmyk
2.472 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
grestore
gsave
8.25 360.71 mo
279.375 360.71 li
279.375 181.463 li
8.25 181.463 li
cp
clp
277.116 325.368 mo
44.4 325.368 li
44.4 325.368 mo
44.4 181.538 li
44.4 181.538 mo
277.116 181.538 li
277.116 181.538 mo
277.116 325.368 li
1 /0 /CSD get_res sepcs
1 sep
.2 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
grestore
gsave
8.25 361 mo
279.375 361 li
279.375 181 li
8.25 181 li
cp
clp
44.4 325.368 mo
44.4 322.614 li
1 /0 /CSD get_res sepcs
1 sep
.2 lw
0 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KETQMX+Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KETQMX+Times-Roman def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRC+Times-Roman /KETQMX+Times-Roman findfont ct_VMDictPut/RQARRC+Times-Roman*1 [48{/.notdef}rp /zero 207{/.notdef}rp]RQARRC+Times-Roman nfRQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf42.1406 334.405 mo(0)sh102.579 325.368 mo
102.579 322.614 li
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KETQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRC+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRC+Times-Roman /Encoding getdup 46 /period putdup 50 /two putdup 53 /five putpop%ADOEndSubsetFont
/RQARRC+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five 202{/.notdef}rp]RQARRC+Times-Roman nfRQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf94.6711 334.405 mo(0.25)sh160.758 325.368 mo
160.758 322.614 li
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
RQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf155.109 334.405 mo(0.5)sh218.937 325.368 mo
218.937 322.614 li
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KETQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRC+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7A73D94A9F40BC631635D93782351ED8A5F0B041154B50ADFD67B52AFA0970AEE10CFF4587FA64B7C1AB4D8B074E00A1BB2BDDE2ECD9CC66A> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRC+Times-Roman /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/RQARRC+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]RQARRC+Times-Roman nfRQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf211.029 334.405 mo(0.75)sh277.116 325.368 mo
277.116 322.614 li
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KETQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRC+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRC+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/RQARRC+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]RQARRC+Times-Roman nfRQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf274.856 334.405 mo(1)sh44.4 305.931 mo
47.1534 305.931 li
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
RQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf30.8438 308.19 mo(1.2)sh44.4 267.058 mo
47.1534 267.058 li
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KETQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRC+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRC+Times-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/RQARRC+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five /.notdef /seven 200{/.notdef}rp]RQARRC+Times-Roman nfRQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf30.8438 269.317 mo(1.3)sh44.4 228.186 mo
47.1534 228.186 li
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KETQMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRC+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRC+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/RQARRC+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven 200{/.notdef}rp]RQARRC+Times-Roman nfRQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf30.8438 230.445 mo(1.4)sh44.4 189.313 mo
47.1534 189.313 li
gsave
[.753125 0 0 -.753138 8.25 361 ]ct
@
grestore newpath
RQARRC+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf30.8438 191.573 mo(1.5)sh%ADOBeginSubsetFont: LGDRMX+Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LGDRMX+Times-Italic def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 86 /V putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/V <1C60D8A8C9B7D8BE3608624D2E2C88F5CF4A70D70F922254294D4246E4992890E83912C9D277D839E8549B7E23CB1C1DB720D7BF2ED2D492CC859DBA8E17665B85A68E7999B2A89726750B2B5414E8362200332AF4E80BD3F832BC7BBE3202B23A5B0AFC0583925A8233FF3358669834B822CFD7B900D78F2BFCBB39D4AD42C8121D36> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRD+Times-Italic /LGDRMX+Times-Italic findfont ct_VMDictPut/RQARRD+Times-Italic*1 [86{/.notdef}rp /V 169{/.notdef}rp]RQARRD+Times-Italic nfRQARRD+Times-Italic*1 [18.075 0 0 -18.0753 0 0 ]msf150.033 356.481 mo(V)sh156.374 342.69 mo
150.725 342.69 li
150.725 343.396 li
163.529 343.396 li
163.529 342.69 li
157.88 342.69 li
ef
%ADOBeginSubsetFont: NXJAAA+Mathematica1 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /NXJAAA+Mathematica1 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Nu putdup 2 /Omega putdef/UniqueID 5095641 def/FontBBox {-120 -220 1544 923} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 -0 444 468 662 677] def/OtherBlues [-209 -203] def/BlueScale 0.0416717 def/StdHW [105.845] def/StdVW [74.4189] def/StemSnapH [65.5429 105.845] def/StemSnapV [58.4069 74.4189] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Nu <1C60D8A8C9B74F36160043BEECF3E5C758D2EB92BB98F2DD9E5E4E0C64312697868A81EFF17CA27779B07D119653AAB4FB5FCDACB27D7A6D0A0C677900F63C1C06D8A7F522CDE1DF369F1BEA9C4651B8F3FA7AF9408821317A3ED4B87474DC2D8AFDD73D546F0920BFFC62A21A50FA2FC1E8621C> |-/Omega <1C60D8A8C9B6269C545E80EBD2C5AF738CF9980B8999FEEF1136515CC36CE92F099B7CB37D440E68058AC72D651E96090932C94688C77020047990EDFD8A8487DBF248A19E7A587CB1915E4F80777FB1B5B6589590F4907D0324D921DD008CB510361571F752E52BDAF1E8411823CD7BB55F03A7B6913B5C3227CCFFA08BC6EF7C834C59D611AA9F45BD08998BD205D977FDB72D1582EB5E4A8827B59E5AA41E192D5DB17C1814F060> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRE+Mathematica1 /NXJAAA+Mathematica1 findfont ct_VMDictPut/RQARRE+Mathematica1*1 [/.notdef /Nu /Omega 253{/.notdef}rp]RQARRE+Mathematica1 nfRQARRE+Mathematica1*1 [18.075 0 0 -18.0753 0 0 ]msf163.152 356.481 mo(\001)shRQARRE+Mathematica1*1 [0 -18.0753 -18.075 0 0 0 ]msf21.8062 271.85 mo(\002)sh%ADOBeginSubsetFont: PZQAAA+Mathematica2 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /PZQAAA+Mathematica2 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Slash1 putdef/UniqueID 5095653 def/FontBBox {-13 -4075 2499 2436} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-587 -586 888 893] def/BlueScale 0.199996 def/StdHW [0] def/StdVW [0] def/StemSnapH [0] def/StemSnapV [0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/Slash1 <1C60D8A8C9B82F05F6484DDAF768983B429CE2BE2E9BAF7B> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRF+Mathematica2 /PZQAAA+Mathematica2 findfont ct_VMDictPut/RQARRF+Mathematica2*1 [/.notdef /Slash1 254{/.notdef}rp]RQARRF+Mathematica2 nfRQARRF+Mathematica2*1 [0 -18.0753 -18.075 0 0 0 ]msf21.8062 259.362 mo(\001)shRQARRE+Mathematica1*1 [0 -18.0753 -18.075 0 0 0 ]msf21.8062 253.618 mo(\002)sh%ADOBeginSubsetFont: LGDRMX+Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRD+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRD+Times-Italic /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/RQARRD+Times-Italic*1 [86{/.notdef}rp /V 12{/.notdef}rp /c 156{/.notdef}rp]RQARRD+Times-Italic nfRQARRD+Times-Italic*1 [0 -12.8335 -12.8333 0 0 0 ]msf24.6305 241.128 mo(c)shgrestore
gsave
45.4 506.063 mo
278.116 506.063 li
278.116 362.213 li
45.4 362.213 li
cp
clp
45.4 367.615 mo
278.116 367.615 li
1 /0 /CSD get_res sepcs
1 sep
3.09 lw
0 lc
0 lj
3.25 ml
[13 10 ] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
grestore
gsave
45.4 370.498 mo
47.6594 370.498 li
47.6594 365.226 li
45.4 365.226 li
cp
clp
%ADOBeginSubsetFont: UQKBAA+Mathematica3 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /UQKBAA+Mathematica3 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /SolidCircle putdef/UniqueID 5095645 def/FontBBox {-109 -231 966 869} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-107 -91 505 527 596 612] def/BlueScale 0.0454559 def/StdHW [34] def/StdVW [34] def/StemSnapH [34 66] def/StemSnapV [34 65] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/SolidCircle <1C60D8A8C9B60287CF08F7BF563CAAD6E08EFD6DAA142CC7220408DECF2B61045B377CC2E5343FEE4BB07E6944D948E0191385507B98AE> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRG+Mathematica3 /UQKBAA+Mathematica3 findfont ct_VMDictPut/RQARRG+Mathematica3*1 [/.notdef /SolidCircle 254{/.notdef}rp]RQARRG+Mathematica3 nfRQARRG+Mathematica3*1 [3.76563 0 0 -3.76569 0 0 ]msf44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)sh44.0459 368.745 mo(\001)shgrestore
gsave
9.25 540 mo
280.375 540 li
280.375 361.75 li
9.25 361.75 li
cp
clp
RQARRG+Mathematica3*1 [3.76563 0 0 -3.76569 0 0 ]msf47.0087 370.476 mo(\001)sh47.0087 370.013 mo(\001)sh47.0087 369.913 mo(\001)sh47.0087 369.869 mo(\001)sh47.0087 369.845 mo(\001)sh47.0087 369.83 mo(\001)sh47.0087 369.821 mo(\001)sh47.0087 369.813 mo(\001)sh47.0087 369.806 mo(\001)sh47.0087 369.8 mo(\001)sh49.9722 372.207 mo(\001)sh49.9722 371.282 mo(\001)sh49.9722 371.081 mo(\001)sh49.9722 370.992 mo(\001)sh49.9722 370.944 mo(\001)sh49.9722 370.916 mo(\001)sh49.9722 370.898 mo(\001)sh49.9722 370.881 mo(\001)sh49.9722 370.867 mo(\001)sh49.9722 370.855 mo(\001)sh52.935 373.938 mo(\001)sh52.935 372.551 mo(\001)sh52.935 372.249 mo(\001)sh52.935 372.116 mo(\001)sh52.935 372.044 mo(\001)sh52.935 372.002 mo(\001)sh52.935 371.975 mo(\001)sh52.935 371.949 mo(\001)sh52.935 371.928 mo(\001)sh52.935 371.91 mo(\001)sh55.8978 375.669 mo(\001)sh55.8978 373.819 mo(\001)sh55.8978 373.416 mo(\001)sh55.8978 373.24 mo(\001)sh55.8978 373.143 mo(\001)sh55.8978 373.088 mo(\001)sh55.8978 373.051 mo(\001)sh55.8978 373.018 mo(\001)sh55.8978 372.988 mo(\001)sh55.8978 372.966 mo(\001)sh58.8606 377.4 mo(\001)sh58.8606 375.087 mo(\001)sh58.8606 374.584 mo(\001)sh58.8606 374.363 mo(\001)sh58.8606 374.243 mo(\001)sh58.8606 374.173 mo(\001)sh58.8606 374.127 mo(\001)sh58.8606 374.086 mo(\001)sh58.8606 374.049 mo(\001)sh58.8606 374.021 mo(\001)sh61.8242 379.131 mo(\001)sh61.8242 376.356 mo(\001)sh61.8242 375.752 mo(\001)sh61.8242 375.487 mo(\001)sh61.8242 375.343 mo(\001)sh61.8242 375.259 mo(\001)sh61.8242 375.204 mo(\001)sh61.8242 375.154 mo(\001)sh61.8242 375.111 mo(\001)sh61.8242 375.076 mo(\001)sh64.7869 380.862 mo(\001)sh64.7869 377.625 mo(\001)sh64.7869 376.92 mo(\001)sh64.7869 376.611 mo(\001)sh64.7869 376.442 mo(\001)sh64.7869 376.344 mo(\001)sh64.7869 376.28 mo(\001)sh64.7869 376.221 mo(\001)sh64.7869 376.171 mo(\001)sh64.7869 376.131 mo(\001)sh67.7497 382.593 mo(\001)sh67.7497 378.893 mo(\001)sh67.7497 378.088 mo(\001)sh67.7497 377.735 mo(\001)sh67.7497 377.542 mo(\001)sh67.7497 377.43 mo(\001)sh67.7497 377.356 mo(\001)sh67.7497 377.289 mo(\001)sh67.7497 377.232 mo(\001)sh67.7497 377.186 mo(\001)sh70.7133 384.324 mo(\001)sh70.7133 380.161 mo(\001)sh70.7133 379.256 mo(\001)sh70.7133 378.858 mo(\001)sh70.7133 378.641 mo(\001)sh70.7133 378.516 mo(\001)sh70.7133 378.433 mo(\001)sh70.7133 378.357 mo(\001)sh70.7133 378.293 mo(\001)sh70.7133 378.241 mo(\001)sh73.6761 386.054 mo(\001)sh73.6761 381.429 mo(\001)sh73.6761 380.423 mo(\001)sh73.6761 379.982 mo(\001)sh73.6761 379.741 mo(\001)sh73.6761 379.601 mo(\001)sh73.6761 379.51 mo(\001)sh73.6761 379.425 mo(\001)sh73.6761 379.354 mo(\001)sh73.6761 379.297 mo(\001)sh76.6389 387.786 mo(\001)sh76.6389 382.698 mo(\001)sh76.6389 381.591 mo(\001)sh76.6389 381.106 mo(\001)sh76.6389 380.84 mo(\001)sh76.6389 380.687 mo(\001)sh76.6389 380.586 mo(\001)sh76.6389 380.493 mo(\001)sh76.6389 380.415 mo(\001)sh76.6389 380.352 mo(\001)sh79.6024 389.517 mo(\001)sh79.6024 383.967 mo(\001)sh79.6024 382.759 mo(\001)sh79.6024 382.229 mo(\001)sh79.6024 381.94 mo(\001)sh79.6024 381.772 mo(\001)sh79.6024 381.662 mo(\001)sh79.6024 381.562 mo(\001)sh79.6024 381.475 mo(\001)sh79.6024 381.407 mo(\001)sh82.5652 391.248 mo(\001)sh82.5652 385.235 mo(\001)sh82.5652 383.927 mo(\001)sh82.5652 383.353 mo(\001)sh82.5652 383.04 mo(\001)sh82.5652 382.858 mo(\001)sh82.5652 382.738 mo(\001)sh82.5652 382.63 mo(\001)sh82.5652 382.537 mo(\001)sh82.5652 382.462 mo(\001)sh85.528 392.979 mo(\001)sh85.528 386.503 mo(\001)sh85.528 385.095 mo(\001)sh85.528 384.477 mo(\001)sh85.528 384.139 mo(\001)sh85.528 383.943 mo(\001)sh85.528 383.815 mo(\001)sh85.528 383.698 mo(\001)sh85.528 383.598 mo(\001)sh85.528 383.517 mo(\001)sh88.4916 394.71 mo(\001)sh88.4916 387.772 mo(\001)sh88.4916 386.262 mo(\001)sh88.4916 385.6 mo(\001)sh88.4916 385.239 mo(\001)sh88.4916 385.029 mo(\001)sh88.4916 384.892 mo(\001)sh88.4916 384.766 mo(\001)sh88.4916 384.658 mo(\001)sh88.4916 384.572 mo(\001)sh91.4544 396.441 mo(\001)sh91.4544 389.041 mo(\001)sh91.4544 387.43 mo(\001)sh91.4544 386.724 mo(\001)sh91.4544 386.338 mo(\001)sh91.4544 386.115 mo(\001)sh91.4544 385.968 mo(\001)sh91.4544 385.834 mo(\001)sh91.4544 385.719 mo(\001)sh91.4544 385.627 mo(\001)sh94.4171 398.172 mo(\001)sh94.4171 390.309 mo(\001)sh94.4171 388.598 mo(\001)sh94.4171 387.848 mo(\001)sh94.4171 387.438 mo(\001)sh94.4171 387.201 mo(\001)sh94.4171 387.044 mo(\001)sh94.4171 386.902 mo(\001)sh94.4171 386.78 mo(\001)sh94.4171 386.682 mo(\001)sh97.3799 399.902 mo(\001)sh97.3799 391.577 mo(\001)sh97.3799 389.766 mo(\001)sh97.3799 388.971 mo(\001)sh97.3799 388.538 mo(\001)sh97.3799 388.286 mo(\001)sh97.3799 388.121 mo(\001)sh97.3799 387.97 mo(\001)sh97.3799 387.841 mo(\001)sh97.3799 387.737 mo(\001)sh100.343 401.634 mo(\001)sh100.343 392.846 mo(\001)sh100.343 390.934 mo(\001)sh100.343 390.096 mo(\001)sh100.343 389.637 mo(\001)sh100.343 389.371 mo(\001)sh100.343 389.197 mo(\001)sh100.343 389.038 mo(\001)sh100.343 388.902 mo(\001)sh100.343 388.792 mo(\001)sh103.306 403.365 mo(\001)sh103.306 394.115 mo(\001)sh103.306 392.101 mo(\001)sh103.306 391.219 mo(\001)sh103.306 390.737 mo(\001)sh103.306 390.457 mo(\001)sh103.306 390.273 mo(\001)sh103.306 390.106 mo(\001)sh103.306 389.962 mo(\001)sh103.306 389.847 mo(\001)sh106.269 405.095 mo(\001)sh106.269 395.383 mo(\001)sh106.269 393.27 mo(\001)sh106.269 392.343 mo(\001)sh106.269 391.836 mo(\001)sh106.269 391.543 mo(\001)sh106.269 391.35 mo(\001)sh106.269 391.174 mo(\001)sh106.269 391.024 mo(\001)sh106.269 390.902 mo(\001)sh109.233 406.827 mo(\001)sh109.233 396.651 mo(\001)sh109.233 394.437 mo(\001)sh109.233 393.467 mo(\001)sh109.233 392.936 mo(\001)sh109.233 392.629 mo(\001)sh109.233 392.427 mo(\001)sh109.233 392.242 mo(\001)sh109.233 392.084 mo(\001)sh109.233 391.958 mo(\001)sh112.195 408.557 mo(\001)sh112.195 397.919 mo(\001)sh112.195 395.605 mo(\001)sh112.195 394.59 mo(\001)sh112.195 394.035 mo(\001)sh112.195 393.714 mo(\001)sh112.195 393.503 mo(\001)sh112.195 393.31 mo(\001)sh112.195 393.145 mo(\001)sh112.195 393.013 mo(\001)sh115.158 410.288 mo(\001)sh115.158 399.188 mo(\001)sh115.158 396.773 mo(\001)sh115.158 395.714 mo(\001)sh115.158 395.135 mo(\001)sh115.158 394.8 mo(\001)sh115.158 394.579 mo(\001)sh115.158 394.378 mo(\001)sh115.158 394.206 mo(\001)sh115.158 394.068 mo(\001)sh118.122 412.02 mo(\001)sh118.122 400.457 mo(\001)sh118.122 397.94 mo(\001)sh118.122 396.838 mo(\001)sh118.122 396.235 mo(\001)sh118.122 395.885 mo(\001)sh118.122 395.656 mo(\001)sh118.122 395.446 mo(\001)sh118.122 395.267 mo(\001)sh118.122 395.123 mo(\001)sh121.085 413.75 mo(\001)sh121.085 401.725 mo(\001)sh121.085 399.109 mo(\001)sh121.085 397.962 mo(\001)sh121.085 397.334 mo(\001)sh121.085 396.971 mo(\001)sh121.085 396.732 mo(\001)sh121.085 396.514 mo(\001)sh121.085 396.328 mo(\001)sh121.085 396.178 mo(\001)sh124.047 415.481 mo(\001)sh124.047 402.993 mo(\001)sh124.047 400.277 mo(\001)sh124.047 399.085 mo(\001)sh124.047 398.434 mo(\001)sh124.047 398.056 mo(\001)sh124.047 397.809 mo(\001)sh124.047 397.582 mo(\001)sh124.047 397.388 mo(\001)sh124.047 397.233 mo(\001)sh127.011 417.212 mo(\001)sh127.011 404.262 mo(\001)sh127.011 401.444 mo(\001)sh127.011 400.209 mo(\001)sh127.011 399.533 mo(\001)sh127.011 399.142 mo(\001)sh127.011 398.885 mo(\001)sh127.011 398.65 mo(\001)sh127.011 398.45 mo(\001)sh127.011 398.288 mo(\001)sh129.974 418.943 mo(\001)sh129.974 405.531 mo(\001)sh129.974 402.612 mo(\001)sh129.974 401.333 mo(\001)sh129.974 400.632 mo(\001)sh129.974 400.228 mo(\001)sh129.974 399.962 mo(\001)sh129.974 399.719 mo(\001)sh129.974 399.511 mo(\001)sh129.974 399.344 mo(\001)sh132.936 420.674 mo(\001)sh132.936 406.799 mo(\001)sh132.936 403.78 mo(\001)sh132.936 402.456 mo(\001)sh132.936 401.732 mo(\001)sh132.936 401.313 mo(\001)sh132.936 401.038 mo(\001)sh132.936 400.786 mo(\001)sh132.936 400.571 mo(\001)sh132.936 400.399 mo(\001)sh135.9 422.405 mo(\001)sh135.9 408.067 mo(\001)sh135.9 404.948 mo(\001)sh135.9 403.58 mo(\001)sh135.9 402.831 mo(\001)sh135.9 402.399 mo(\001)sh135.9 402.114 mo(\001)sh135.9 401.854 mo(\001)sh135.9 401.632 mo(\001)sh135.9 401.454 mo(\001)sh138.863 424.136 mo(\001)sh138.863 409.336 mo(\001)sh138.863 406.116 mo(\001)sh138.863 404.704 mo(\001)sh138.863 403.931 mo(\001)sh138.863 403.484 mo(\001)sh138.863 403.19 mo(\001)sh138.863 402.922 mo(\001)sh138.863 402.693 mo(\001)sh138.863 402.509 mo(\001)sh141.826 425.867 mo(\001)sh141.826 410.604 mo(\001)sh141.826 407.283 mo(\001)sh141.826 405.827 mo(\001)sh141.826 405.03 mo(\001)sh141.826 404.57 mo(\001)sh141.826 404.267 mo(\001)sh141.826 403.99 mo(\001)sh141.826 403.754 mo(\001)sh141.826 403.564 mo(\001)sh144.788 427.598 mo(\001)sh144.788 411.873 mo(\001)sh144.788 408.451 mo(\001)sh144.788 406.951 mo(\001)sh144.788 406.13 mo(\001)sh144.788 405.656 mo(\001)sh144.788 405.344 mo(\001)sh144.788 405.058 mo(\001)sh144.788 404.815 mo(\001)sh144.788 404.619 mo(\001)sh147.752 429.329 mo(\001)sh147.752 413.141 mo(\001)sh147.752 409.619 mo(\001)sh147.752 408.075 mo(\001)sh147.752 407.23 mo(\001)sh147.752 406.742 mo(\001)sh147.752 406.42 mo(\001)sh147.752 406.126 mo(\001)sh147.752 405.876 mo(\001)sh147.752 405.674 mo(\001)sh150.715 431.06 mo(\001)sh150.715 414.409 mo(\001)sh150.715 410.787 mo(\001)sh150.715 409.198 mo(\001)sh150.715 408.329 mo(\001)sh150.715 407.827 mo(\001)sh150.715 407.496 mo(\001)sh150.715 407.194 mo(\001)sh150.715 406.937 mo(\001)sh150.715 406.73 mo(\001)sh153.678 432.791 mo(\001)sh153.678 415.678 mo(\001)sh153.678 411.955 mo(\001)sh153.678 410.322 mo(\001)sh153.678 409.429 mo(\001)sh153.678 408.912 mo(\001)sh153.678 408.573 mo(\001)sh153.678 408.263 mo(\001)sh153.678 407.998 mo(\001)sh153.678 407.785 mo(\001)sh156.641 434.522 mo(\001)sh156.641 416.947 mo(\001)sh156.641 413.122 mo(\001)sh156.641 411.446 mo(\001)sh156.641 410.528 mo(\001)sh156.641 409.998 mo(\001)sh156.641 409.65 mo(\001)sh156.641 409.331 mo(\001)sh156.641 409.058 mo(\001)sh156.641 408.84 mo(\001)sh159.604 436.253 mo(\001)sh159.604 418.215 mo(\001)sh159.604 414.29 mo(\001)sh159.604 412.569 mo(\001)sh159.604 411.628 mo(\001)sh159.604 411.083 mo(\001)sh159.604 410.726 mo(\001)sh159.604 410.399 mo(\001)sh159.604 410.119 mo(\001)sh159.604 409.895 mo(\001)sh162.567 437.984 mo(\001)sh162.567 419.483 mo(\001)sh162.567 415.458 mo(\001)sh162.567 413.693 mo(\001)sh162.567 412.728 mo(\001)sh162.567 412.169 mo(\001)sh162.567 411.802 mo(\001)sh162.567 411.467 mo(\001)sh162.567 411.18 mo(\001)sh162.567 410.949 mo(\001)sh165.53 439.715 mo(\001)sh165.53 420.752 mo(\001)sh165.53 416.626 mo(\001)sh165.53 414.817 mo(\001)sh165.53 413.827 mo(\001)sh165.53 413.255 mo(\001)sh165.53 412.879 mo(\001)sh165.53 412.535 mo(\001)sh165.53 412.241 mo(\001)sh165.53 412.005 mo(\001)sh168.493 441.446 mo(\001)sh168.493 422.021 mo(\001)sh168.493 417.794 mo(\001)sh168.493 415.94 mo(\001)sh168.493 414.927 mo(\001)sh168.493 414.341 mo(\001)sh168.493 413.955 mo(\001)sh168.493 413.603 mo(\001)sh168.493 413.302 mo(\001)sh168.493 413.06 mo(\001)sh171.456 443.177 mo(\001)sh171.456 423.289 mo(\001)sh171.456 418.961 mo(\001)sh171.456 417.064 mo(\001)sh171.456 416.026 mo(\001)sh171.456 415.426 mo(\001)sh171.456 415.031 mo(\001)sh171.456 414.671 mo(\001)sh171.456 414.363 mo(\001)sh171.456 414.115 mo(\001)sh174.419 444.908 mo(\001)sh174.419 424.557 mo(\001)sh174.419 420.129 mo(\001)sh174.419 418.188 mo(\001)sh174.419 417.126 mo(\001)sh174.419 416.512 mo(\001)sh174.419 416.108 mo(\001)sh174.419 415.739 mo(\001)sh174.419 415.424 mo(\001)sh174.419 415.17 mo(\001)sh177.382 446.639 mo(\001)sh177.382 425.826 mo(\001)sh177.382 421.297 mo(\001)sh177.382 419.311 mo(\001)sh177.382 418.225 mo(\001)sh177.382 417.597 mo(\001)sh177.382 417.185 mo(\001)sh177.382 416.807 mo(\001)sh177.382 416.484 mo(\001)sh177.382 416.225 mo(\001)sh180.345 448.37 mo(\001)sh180.345 427.094 mo(\001)sh180.345 422.465 mo(\001)sh180.345 420.435 mo(\001)sh180.345 419.325 mo(\001)sh180.345 418.683 mo(\001)sh180.345 418.261 mo(\001)sh180.345 417.875 mo(\001)sh180.345 417.545 mo(\001)sh180.345 417.28 mo(\001)sh183.308 450.101 mo(\001)sh183.308 428.363 mo(\001)sh183.308 423.633 mo(\001)sh183.308 421.559 mo(\001)sh183.308 420.425 mo(\001)sh183.308 419.769 mo(\001)sh183.308 419.337 mo(\001)sh183.308 418.943 mo(\001)sh183.308 418.607 mo(\001)sh183.308 418.335 mo(\001)sh186.271 451.832 mo(\001)sh186.271 429.631 mo(\001)sh186.271 424.8 mo(\001)sh186.271 422.683 mo(\001)sh186.271 421.524 mo(\001)sh186.271 420.854 mo(\001)sh186.271 420.413 mo(\001)sh186.271 420.011 mo(\001)sh186.271 419.667 mo(\001)sh186.271 419.391 mo(\001)sh189.234 453.563 mo(\001)sh189.234 430.9 mo(\001)sh189.234 425.969 mo(\001)sh189.234 423.806 mo(\001)sh189.234 422.624 mo(\001)sh189.234 421.94 mo(\001)sh189.234 421.49 mo(\001)sh189.234 421.079 mo(\001)sh189.234 420.728 mo(\001)sh189.234 420.446 mo(\001)sh192.197 455.293 mo(\001)sh192.197 432.168 mo(\001)sh192.197 427.137 mo(\001)sh192.197 424.93 mo(\001)sh192.197 423.723 mo(\001)sh192.197 423.025 mo(\001)sh192.197 422.566 mo(\001)sh192.197 422.147 mo(\001)sh192.197 421.789 mo(\001)sh192.197 421.501 mo(\001)sh195.16 457.025 mo(\001)sh195.16 433.437 mo(\001)sh195.16 428.304 mo(\001)sh195.16 426.054 mo(\001)sh195.16 424.823 mo(\001)sh195.16 424.111 mo(\001)sh195.16 423.643 mo(\001)sh195.16 423.215 mo(\001)sh195.16 422.85 mo(\001)sh195.16 422.556 mo(\001)sh198.123 458.756 mo(\001)sh198.123 434.705 mo(\001)sh198.123 429.472 mo(\001)sh198.123 427.177 mo(\001)sh198.123 425.922 mo(\001)sh198.123 425.196 mo(\001)sh198.123 424.72 mo(\001)sh198.123 424.283 mo(\001)sh198.123 423.911 mo(\001)sh198.123 423.611 mo(\001)sh201.086 460.486 mo(\001)sh201.086 435.973 mo(\001)sh201.086 430.639 mo(\001)sh201.086 428.301 mo(\001)sh201.086 427.022 mo(\001)sh201.086 426.282 mo(\001)sh201.086 425.796 mo(\001)sh201.086 425.352 mo(\001)sh201.086 424.971 mo(\001)sh201.086 424.666 mo(\001)sh204.05 462.218 mo(\001)sh204.05 437.242 mo(\001)sh204.05 431.807 mo(\001)sh204.05 429.425 mo(\001)sh204.05 428.122 mo(\001)sh204.05 427.368 mo(\001)sh204.05 426.872 mo(\001)sh204.05 426.42 mo(\001)sh204.05 426.032 mo(\001)sh204.05 425.721 mo(\001)sh207.012 463.948 mo(\001)sh207.012 438.51 mo(\001)sh207.012 432.976 mo(\001)sh207.012 430.548 mo(\001)sh207.012 429.221 mo(\001)sh207.012 428.453 mo(\001)sh207.012 427.948 mo(\001)sh207.012 427.487 mo(\001)sh207.012 427.094 mo(\001)sh207.012 426.777 mo(\001)sh209.975 465.679 mo(\001)sh209.975 439.779 mo(\001)sh209.975 434.143 mo(\001)sh209.975 431.672 mo(\001)sh209.975 430.321 mo(\001)sh209.975 429.539 mo(\001)sh209.975 429.025 mo(\001)sh209.975 428.555 mo(\001)sh209.975 428.154 mo(\001)sh209.975 427.832 mo(\001)sh212.939 467.411 mo(\001)sh212.939 441.047 mo(\001)sh212.939 435.311 mo(\001)sh212.939 432.796 mo(\001)sh212.939 431.42 mo(\001)sh212.939 430.624 mo(\001)sh212.939 430.102 mo(\001)sh212.939 429.623 mo(\001)sh212.939 429.215 mo(\001)sh212.939 428.887 mo(\001)sh215.902 469.141 mo(\001)sh215.902 442.316 mo(\001)sh215.902 436.478 mo(\001)sh215.902 433.919 mo(\001)sh215.902 432.52 mo(\001)sh215.902 431.71 mo(\001)sh215.902 431.178 mo(\001)sh215.902 430.691 mo(\001)sh215.902 430.276 mo(\001)sh215.902 429.942 mo(\001)sh218.864 470.872 mo(\001)sh218.864 443.584 mo(\001)sh218.864 437.647 mo(\001)sh218.864 435.043 mo(\001)sh218.864 433.62 mo(\001)sh218.864 432.796 mo(\001)sh218.864 432.254 mo(\001)sh218.864 431.759 mo(\001)sh218.864 431.337 mo(\001)sh218.864 430.997 mo(\001)sh221.828 472.603 mo(\001)sh221.828 444.853 mo(\001)sh221.828 438.815 mo(\001)sh221.828 436.167 mo(\001)sh221.828 434.719 mo(\001)sh221.828 433.882 mo(\001)sh221.828 433.331 mo(\001)sh221.828 432.827 mo(\001)sh221.828 432.398 mo(\001)sh221.828 432.052 mo(\001)sh224.791 474.334 mo(\001)sh224.791 446.121 mo(\001)sh224.791 439.982 mo(\001)sh224.791 437.291 mo(\001)sh224.791 435.819 mo(\001)sh224.791 434.967 mo(\001)sh224.791 434.407 mo(\001)sh224.791 433.896 mo(\001)sh224.791 433.458 mo(\001)sh224.791 433.107 mo(\001)sh227.753 476.065 mo(\001)sh227.753 447.39 mo(\001)sh227.753 441.15 mo(\001)sh227.753 438.415 mo(\001)sh227.753 436.918 mo(\001)sh227.753 436.052 mo(\001)sh227.753 435.484 mo(\001)sh227.753 434.964 mo(\001)sh227.753 434.52 mo(\001)sh227.753 434.163 mo(\001)sh230.716 477.796 mo(\001)sh230.716 448.658 mo(\001)sh230.716 442.318 mo(\001)sh230.716 439.538 mo(\001)sh230.716 438.018 mo(\001)sh230.716 437.138 mo(\001)sh230.716 436.56 mo(\001)sh230.716 436.032 mo(\001)sh230.716 435.58 mo(\001)sh230.716 435.218 mo(\001)sh233.68 479.527 mo(\001)sh233.68 449.926 mo(\001)sh233.68 443.486 mo(\001)sh233.68 440.662 mo(\001)sh233.68 439.117 mo(\001)sh233.68 438.223 mo(\001)sh233.68 437.637 mo(\001)sh233.68 437.1 mo(\001)sh233.68 436.641 mo(\001)sh233.68 436.273 mo(\001)sh236.643 481.258 mo(\001)sh236.643 451.195 mo(\001)sh236.643 444.654 mo(\001)sh236.643 441.786 mo(\001)sh236.643 440.217 mo(\001)sh236.643 439.31 mo(\001)sh236.643 438.713 mo(\001)sh236.643 438.168 mo(\001)sh236.643 437.702 mo(\001)sh236.643 437.327 mo(\001)sh239.605 482.989 mo(\001)sh239.605 452.464 mo(\001)sh239.605 445.821 mo(\001)sh239.605 442.91 mo(\001)sh239.605 441.317 mo(\001)sh239.605 440.395 mo(\001)sh239.605 439.789 mo(\001)sh239.605 439.236 mo(\001)sh239.605 438.763 mo(\001)sh239.605 438.382 mo(\001)sh242.569 484.72 mo(\001)sh242.569 453.732 mo(\001)sh242.569 446.989 mo(\001)sh242.569 444.033 mo(\001)sh242.569 442.416 mo(\001)sh242.569 441.481 mo(\001)sh242.569 440.865 mo(\001)sh242.569 440.304 mo(\001)sh242.569 439.824 mo(\001)sh242.569 439.438 mo(\001)sh245.532 486.451 mo(\001)sh245.532 455 mo(\001)sh245.532 448.157 mo(\001)sh245.532 445.157 mo(\001)sh245.532 443.516 mo(\001)sh245.532 442.566 mo(\001)sh245.532 441.942 mo(\001)sh245.532 441.372 mo(\001)sh245.532 440.884 mo(\001)sh245.532 440.493 mo(\001)sh248.494 488.182 mo(\001)sh248.494 456.269 mo(\001)sh248.494 449.325 mo(\001)sh248.494 446.281 mo(\001)sh248.494 444.615 mo(\001)sh248.494 443.652 mo(\001)sh248.494 443.019 mo(\001)sh248.494 442.44 mo(\001)sh248.494 441.945 mo(\001)sh248.494 441.548 mo(\001)sh251.458 489.913 mo(\001)sh251.458 457.537 mo(\001)sh251.458 450.493 mo(\001)sh251.458 447.404 mo(\001)sh251.458 445.715 mo(\001)sh251.458 444.737 mo(\001)sh251.458 444.095 mo(\001)sh251.458 443.508 mo(\001)sh251.458 443.007 mo(\001)sh251.458 442.603 mo(\001)sh254.421 491.644 mo(\001)sh254.421 458.806 mo(\001)sh254.421 451.66 mo(\001)sh254.421 448.528 mo(\001)sh254.421 446.815 mo(\001)sh254.421 445.823 mo(\001)sh254.421 445.171 mo(\001)sh254.421 444.576 mo(\001)sh254.421 444.067 mo(\001)sh254.421 443.658 mo(\001)sh257.384 493.375 mo(\001)sh257.384 460.074 mo(\001)sh257.384 452.828 mo(\001)sh257.384 449.652 mo(\001)sh257.384 447.914 mo(\001)sh257.384 446.909 mo(\001)sh257.384 446.248 mo(\001)sh257.384 445.644 mo(\001)sh257.384 445.128 mo(\001)sh257.384 444.713 mo(\001)sh260.347 495.106 mo(\001)sh260.347 461.343 mo(\001)sh260.347 453.996 mo(\001)sh260.347 450.775 mo(\001)sh260.347 449.014 mo(\001)sh260.347 447.994 mo(\001)sh260.347 447.324 mo(\001)sh260.347 446.712 mo(\001)sh260.347 446.189 mo(\001)sh260.347 445.768 mo(\001)sh263.31 496.837 mo(\001)sh263.31 462.611 mo(\001)sh263.31 455.164 mo(\001)sh263.31 451.899 mo(\001)sh263.31 450.113 mo(\001)sh263.31 449.08 mo(\001)sh263.31 448.401 mo(\001)sh263.31 447.78 mo(\001)sh263.31 447.25 mo(\001)sh263.31 446.824 mo(\001)sh266.273 498.568 mo(\001)sh266.273 463.88 mo(\001)sh266.273 456.332 mo(\001)sh266.273 453.023 mo(\001)sh266.273 451.213 mo(\001)sh266.273 450.165 mo(\001)sh266.273 449.477 mo(\001)sh266.273 448.848 mo(\001)sh266.273 448.311 mo(\001)sh266.273 447.879 mo(\001)sh269.235 500.299 mo(\001)sh269.235 465.148 mo(\001)sh269.235 457.499 mo(\001)sh269.235 454.146 mo(\001)sh269.235 452.312 mo(\001)sh269.235 451.251 mo(\001)sh269.235 450.554 mo(\001)sh269.235 449.916 mo(\001)sh269.235 449.371 mo(\001)sh269.235 448.934 mo(\001)sh272.199 502.03 mo(\001)sh272.199 466.416 mo(\001)sh272.199 458.667 mo(\001)sh272.199 455.27 mo(\001)sh272.199 453.412 mo(\001)sh272.199 452.337 mo(\001)sh272.199 451.63 mo(\001)sh272.199 450.985 mo(\001)sh272.199 450.433 mo(\001)sh272.199 449.989 mo(\001)sh275.162 503.761 mo(\001)sh275.162 467.685 mo(\001)sh275.162 459.836 mo(\001)sh275.162 456.394 mo(\001)sh275.162 454.512 mo(\001)sh275.162 453.423 mo(\001)sh275.162 452.706 mo(\001)sh275.162 452.053 mo(\001)sh275.162 451.494 mo(\001)sh275.162 451.044 mo(\001)shgrestore
gsave
45.4 506.063 mo
278.116 506.063 li
278.116 362.213 li
45.4 362.213 li
cp
clp
45.4 367.615 mo
45.5431 367.701 li
45.6854 367.787 li
45.9709 367.958 li
46.5417 368.301 li
47.6842 368.985 li
49.9677 370.348 li
54.9203 373.286 li
59.5437 376.007 li
64.0775 378.654 li
68.9947 381.502 li
73.5842 384.141 li
78.5578 386.979 li
83.4403 389.746 li
87.9952 392.309 li
92.9342 395.07 li
97.5449 397.632 li
102.064 400.128 li
106.969 402.822 li
111.545 405.32 li
116.506 408.014 li
121.375 410.646 li
125.917 413.088 li
130.842 415.726 li
135.439 418.177 li
140.421 420.822 li
145.312 423.408 li
149.875 425.813 li
154.822 428.412 li
159.441 430.832 li
163.969 433.198 li
168.882 435.759 li
173.466 438.143 li
178.434 440.723 li
183.312 443.252 li
187.862 445.608 li
192.796 448.161 li
197.401 450.543 li
211.387 457.776 li
216.341 460.342 li
220.969 462.74 li
225.505 465.095 li
230.426 467.653 li
235.018 470.047 li
239.995 472.647 li
244.88 475.208 li
249.438 477.605 li
254.38 480.214 li
258.995 482.66 li
263.517 485.069 li
268.424 487.696 li
273.084 490.204 li
273.164 490.247 li
273.324 490.334 li
274.282 490.851 li
275.56 491.543 li
275.719 491.629 li
275.88 491.716 li
276.838 492.236 li
276.917 492.279 li
276.997 492.322 li
277.157 492.41 li
277.477 492.583 li
277.557 492.626 li
277.637 492.669 li
277.796 492.756 li
277.876 492.8 li
277.956 492.843 li
278.036 492.886 li
278.116 492.93 li
0 .990631 1 .000396735 cmyk
2.472 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
grestore
gsave
9.25 540 mo
280.375 540 li
280.375 362.213 li
9.25 362.213 li
cp
clp
278.116 506.117 mo
45.4 506.117 li
45.4 506.117 mo
45.4 362.288 li
45.4 362.288 mo
278.116 362.288 li
278.116 362.288 mo
278.116 506.117 li
1 /0 /CSD get_res sepcs
1 sep
.2 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
grestore
gsave
9.25 540 mo
280.375 540 li
280.375 361.75 li
9.25 361.75 li
cp
clp
45.4 506.117 mo
45.4 503.368 li
1 /0 /CSD get_res sepcs
1 sep
.2 lw
0 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
%ADOBeginSubsetFont: PHDRMX+Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /PHDRMX+Times-Roman def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRH+Times-Roman /PHDRMX+Times-Roman findfont ct_VMDictPut/RQARRH+Times-Roman*1 [48{/.notdef}rp /zero 207{/.notdef}rp]RQARRH+Times-Roman nfRQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf43.1406 515.155 mo(0)sh103.579 506.117 mo
103.579 503.368 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
%ADOBeginSubsetFont: PHDRMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRH+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRH+Times-Roman /Encoding getdup 46 /period putdup 50 /two putdup 53 /five putpop%ADOEndSubsetFont
/RQARRH+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five 202{/.notdef}rp]RQARRH+Times-Roman nfRQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf95.6711 515.155 mo(0.25)sh161.758 506.117 mo
161.758 503.368 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
RQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf156.109 515.155 mo(0.5)sh219.937 506.117 mo
219.937 503.368 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
%ADOBeginSubsetFont: PHDRMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRH+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7A73D94A9F40BC631635D93782351ED8A5F0B041154B50ADFD67B52AFA0970AEE10CFF4587FA64B7C1AB4D8B074E00A1BB2BDDE2ECD9CC66A> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRH+Times-Roman /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/RQARRH+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]RQARRH+Times-Roman nfRQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf212.029 515.155 mo(0.75)sh278.116 506.117 mo
278.116 503.368 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
%ADOBeginSubsetFont: PHDRMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRH+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRH+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/RQARRH+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]RQARRH+Times-Roman nfRQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf275.856 515.155 mo(1)sh45.4 500.79 mo
48.1489 500.79 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
%ADOBeginSubsetFont: PHDRMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRH+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRH+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/RQARRH+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /.notdef /seven 200{/.notdef}rp]RQARRH+Times-Roman nfRQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf31.8438 503.049 mo(0.4)sh45.4 474.155 mo
48.1489 474.155 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
RQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf31.8438 476.414 mo(0.5)sh45.4 447.52 mo
48.1489 447.52 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
%ADOBeginSubsetFont: PHDRMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRH+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRH+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/RQARRH+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /seven 200{/.notdef}rp]RQARRH+Times-Roman nfRQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf31.8438 449.78 mo(0.6)sh45.4 420.886 mo
48.1489 420.886 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
RQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf31.8438 423.145 mo(0.7)sh45.4 394.25 mo
48.1489 394.25 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
%ADOBeginSubsetFont: PHDRMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRH+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRH+Times-Roman /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/RQARRH+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /seven /eight 199{/.notdef}rp]RQARRH+Times-Roman nfRQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf31.8438 396.509 mo(0.8)sh45.4 367.615 mo
48.1489 367.615 li
gsave
[.753125 0 0 -.753138 9.25 541.75 ]ct
@
grestore newpath
%ADOBeginSubsetFont: PHDRMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRH+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7A73DB9A896D23FCC66190904632D73F98CB9610A16993F6B122D7E1E78C0FD3CFB4BA7B04573F85C6AAF2DBC5FF0782821FB24CB9148C8554B2F1030920B61B0FCD80181994622E333F98E453CE9ADDE1282743A6D28C02F5A1E762172EE000BA8345C747F4D035036F2F72356957E99A085687800E644D881E70A8EFBE3A3E6E4B170FA116E5327D2CD42DA986FA6C800B44A5CE5DF369C3295EA45945F8EE425ED3E5B812A8DD33EE2E3340844A5314FF5267F47524653D6A9344C2AEC57094DFAB247907C47ADE2EB> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRH+Times-Roman /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/RQARRH+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /seven /eight /nine 198{/.notdef}rp]RQARRH+Times-Roman nfRQARRH+Times-Roman*1 [9.0375 0 0 -9.03766 0 0 ]msf31.8438 369.875 mo(0.9)sh%ADOBeginSubsetFont: TMTQMX+Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TMTQMX+Times-Italic def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 86 /V putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/V <1C60D8A8C9B7D8BE3608624D2E2C88F5CF4A70D70F922254294D4246E4992890E83912C9D277D839E8549B7E23CB1C1DB720D7BF2ED2D492CC859DBA8E17665B85A68E7999B2A89726750B2B5414E8362200332AF4E80BD3F832BC7BBE3202B23A5B0AFC0583925A8233FF3358669834B822CFD7B900D78F2BFCBB39D4AD42C8121D36> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRI+Times-Italic /TMTQMX+Times-Italic findfont ct_VMDictPut/RQARRI+Times-Italic*1 [86{/.notdef}rp /V 169{/.notdef}rp]RQARRI+Times-Italic nfRQARRI+Times-Italic*1 [18.075 0 0 -18.0753 0 0 ]msf151.033 537.231 mo(V)sh157.374 523.44 mo
151.725 523.44 li
151.725 524.146 li
164.529 524.146 li
164.529 523.44 li
158.88 523.44 li
ef
%ADOBeginSubsetFont: CGQPMX+Mathematica1 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /CGQPMX+Mathematica1 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Nu putdup 2 /Omega putdef/UniqueID 5095641 def/FontBBox {-120 -220 1544 923} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 -0 444 468 662 677] def/OtherBlues [-209 -203] def/BlueScale 0.0416717 def/StdHW [105.845] def/StdVW [74.4189] def/StemSnapH [65.5429 105.845] def/StemSnapV [58.4069 74.4189] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Nu <1C60D8A8C9B74F36160043BEECF3E5C758D2EB92BB98F2DD9E5E4E0C64312697868A81EFF17CA27779B07D119653AAB4FB5FCDACB27D7A6D0A0C677900F63C1C06D8A7F522CDE1DF369F1BEA9C4651B8F3FA7AF9408821317A3ED4B87474DC2D8AFDD73D546F0920BFFC62A21A50FA2FC1E8621C> |-/Omega <1C60D8A8C9B6269C545E80EBD2C5AF738CF9980B8999FEEF1136515CC36CE92F099B7CB37D440E68058AC72D651E96090932C94688C77020047990EDFD8A8487DBF248A19E7A587CB1915E4F80777FB1B5B6589590F4907D0324D921DD008CB510361571F752E52BDAF1E8411823CD7BB55F03A7B6913B5C3227CCFFA08BC6EF7C834C59D611AA9F45BD08998BD205D977FDB72D1582EB5E4A8827B59E5AA41E192D5DB17C1814F060> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRJ+Mathematica1 /CGQPMX+Mathematica1 findfont ct_VMDictPut/RQARRJ+Mathematica1*1 [/.notdef /Nu /Omega 253{/.notdef}rp]RQARRJ+Mathematica1 nfRQARRJ+Mathematica1*1 [18.075 0 0 -18.0753 0 0 ]msf164.152 537.231 mo(\001)shRQARRJ+Mathematica1*1 [0 -18.0753 -18.075 0 0 0 ]msf22.8062 452.6 mo(\002)sh%ADOBeginSubsetFont: KPPPMX+Mathematica2 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /KPPPMX+Mathematica2 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Slash1 putdef/UniqueID 5095653 def/FontBBox {-13 -4075 2499 2436} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-587 -586 888 893] def/BlueScale 0.199996 def/StdHW [0] def/StdVW [0] def/StemSnapH [0] def/StemSnapV [0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/Slash1 <1C60D8A8C9B82F05F6484DDAF768983B429CE2BE2E9BAF7B> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRK+Mathematica2 /KPPPMX+Mathematica2 findfont ct_VMDictPut/RQARRK+Mathematica2*1 [/.notdef /Slash1 254{/.notdef}rp]RQARRK+Mathematica2 nfRQARRK+Mathematica2*1 [0 -18.0753 -18.075 0 0 0 ]msf22.8062 440.112 mo(\001)shRQARRJ+Mathematica1*1 [0 -18.0753 -18.075 0 0 0 ]msf22.8062 434.368 mo(\002)sh%ADOBeginSubsetFont: TMTQMX+Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARRI+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARRI+Times-Italic /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/RQARRI+Times-Italic*1 [86{/.notdef}rp /V 12{/.notdef}rp /c 156{/.notdef}rp]RQARRI+Times-Italic nfRQARRI+Times-Italic*1 [0 -12.8335 -12.8333 0 0 0 ]msf25.6305 421.878 mo(c)shgrestore
gsave
3 23.1251 mo
27 23.1251 li
27 2.00012 li
3 2.00012 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: RKTAAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /RKTAAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF39716A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB99C4AAA689F9E967FCE15709E3204C4D> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRL+CMR10 /RKTAAA+CMR10 findfont ct_VMDictPut/RQARRL+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]RQARRL+CMR10 nfRQARRL+CMR10*1 [20.4945 0 0 -20.4772 0 0 ]msf1.18341 17.7856 mo(\()sh%ADOBeginSubsetFont: RAIRMX+CMBX10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /RAIRMX+CMBX10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMBX10.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 97 /a putdef/UniqueID 5000768 def/FontBBox {-56 -250 1164 750} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 0 444 453 655 676 686 697] def/OtherBlues [-201 -194] def/BlueScale 0.0437899 def/StdHW [47] def/StdVW [114] def/StemSnapH [40 47] def/StemSnapV [114 142] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/a <1C60D8A8C9B7ECD93D27CE21AEBDD246A2EDAD1DDC54B7649B57A058C4CEA277FC7C7DD1C54BF98C83F3437D2585B3176D3588C21C426C9FC5084597B0EE27FF6384D04BF5179105567277093FE3A7D89B6E20CA29F205D88EE708F35BA52A592F3114C76F2AEBE12F78DFF3CF334BF6BF3784A24BCC510B9D034022939656D3F0E72A04719CE534F9C6F812FB41760C92C0DEE132926EAAEEF4B214975AB0F111454B7F8C48E52804CD3043606B4744A9B7A5C05D68166578280569DD9419F371D26399> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRM+CMBX10 /RAIRMX+CMBX10 findfont ct_VMDictPut/RQARRM+CMBX10*1 [97{/.notdef}rp /a 158{/.notdef}rp]RQARRM+CMBX10 nfRQARRM+CMBX10*1 [20.4945 0 0 -20.4772 0 0 ]msf9.15277 17.7856 mo(a)shRQARRL+CMR10*1 [20.4945 0 0 -20.4772 0 0 ]msf20.611 17.7856 mo(\))shgrestore
gsave
3 204.125 mo
28.625 204.125 li
28.625 183 li
3 183 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: PRJBAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /PRJBAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF39716A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB99C4AAA689F9E967FCE15709E3204C4D> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRN+CMR10 /PRJBAA+CMR10 findfont ct_VMDictPut/RQARRN+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]RQARRN+CMR10 nfRQARRN+CMR10*1 [20.4234 0 0 -20.4772 0 0 ]msf1.51276 198.786 mo(\()sh%ADOBeginSubsetFont: REPAAA+CMBX10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /REPAAA+CMBX10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMBX10.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 98 /b putdef/UniqueID 5000768 def/FontBBox {-56 -250 1164 750} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 0 444 453 655 676 686 697] def/OtherBlues [-201 -194] def/BlueScale 0.0437899 def/StdHW [47] def/StdVW [114] def/StemSnapH [40 47] def/StemSnapV [114 142] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/b <1C60D8A8C9B673A51B05B6E56F745CE7C024405D3C43D80F6BB15FB57ADE959D972A08B8926CB8BC50944564F7F339BA7DD1F7649710A3599EAC97E92D0ADEEEFC88F6CB3EBE8A833802DF4C7C2CF6EE987CCD68380FDAD347796FC4643A49B8127D188D6DA631C5F9201516A7F4D1481FCFA3F47AD5A2D4FA1715724AB5B10BC0164AE41129C80A4C200CAEB26DBE63C0A9C58078CC92E895704723B3D69FA62B53DCE9E868B6E97305CFDF> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRO+CMBX10 /REPAAA+CMBX10 findfont ct_VMDictPut/RQARRO+CMBX10*1 [98{/.notdef}rp /b 157{/.notdef}rp]RQARRO+CMBX10 nfRQARRO+CMBX10*1 [20.4234 0 0 -20.4772 0 0 ]msf9.45447 198.786 mo(b)shRQARRN+CMR10*1 [20.4234 0 0 -20.4772 0 0 ]msf22.5027 198.786 mo(\))shgrestore
gsave
3 385.875 mo
25.875 385.875 li
25.875 364.75 li
3 364.75 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: WZKQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /WZKQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF39716A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB99C4AAA689F9E967FCE15709E3204C4D> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRP+CMR10 /WZKQMX+CMR10 findfont ct_VMDictPut/RQARRP+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]RQARRP+CMR10 nfRQARRP+CMR10*1 [20.5105 0 0 -20.4772 0 0 ]msf1.3313 380.535 mo(\()sh%ADOBeginSubsetFont: WXBQMX+CMBX10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /WXBQMX+CMBX10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMBX10.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 99 /c putdef/UniqueID 5000768 def/FontBBox {-56 -250 1164 750} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 0 444 453 655 676 686 697] def/OtherBlues [-201 -194] def/BlueScale 0.0437899 def/StdHW [47] def/StdVW [114] def/StemSnapH [40 47] def/StemSnapV [114 142] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/c <1C60D8A8C9B7BC12C9ABAC13990515E5F338614AEE2B183A75B790E893FA95C772F30731E80EF57F7B892FC9A6C4997402207CA010D0FB6316CE59F196EEB072A635A6BC06043EFF13931B03C8E8466CDDF2A6432B85002F78A80C6782483084C67AAA751A0628BE17528744586797E420509A23> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRQ+CMBX10 /WXBQMX+CMBX10 findfont ct_VMDictPut/RQARRQ+CMBX10*1 [99{/.notdef}rp /c 156{/.notdef}rp]RQARRQ+CMBX10 nfRQARRQ+CMBX10*1 [20.5105 0 0 -20.4772 0 0 ]msf9.30688 380.535 mo(c)shRQARRP+CMR10*1 [20.5105 0 0 -20.4772 0 0 ]msf19.7901 380.535 mo(\))shgrestore
gsave
65.375 87.625 mo
104.375 87.625 li
104.375 74.6251 li
65.375 74.6251 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: MGLRMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /MGLRMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 78 /N putdef/UniqueID 5087385 def/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/N <1C60D8A8C9B6D671D38ABEF2C3AA4E9EF85233BCD577CC743D9BB72B06D1C34EFFA73A8EEC485E47CB4255799230CE3B52ECA9DACF132C28D5023DE40AA93657FA765A68F9927890D6A99C6ADF1E426E5FE9E35D2F713DB32E49B7FA52859C2DFDFC8F7B5800FF94410ECD75C51D563B72E4CE7BF6A0DA5B3E0B6FCD8798546F59FCAF14A879752BEB0E6C22EAB4A84FE3B041C4B97C68333C4FFAD5D2E857731FA926D2CD6D6B1870856FC4382AD902F4984DB02DEAEC75932D49CD323CFF2FF5AF76629AD4B11E478073E034E2B4E9B43505D56042DA33A6E78FEA4BCD4A0F11525678055021280A500CE9ADDA6E49D3632C3DA6662AF4C4449F02> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRR+CMMI10 /MGLRMX+CMMI10 findfont ct_VMDictPut/RQARRR+CMMI10*1 [78{/.notdef}rp /N 177{/.notdef}rp]RQARRR+CMMI10 nfRQARRR+CMMI10*1 [15.0403 0 0 -15.0403 0 0 ]msf65.1125 84.9609 mo(N)sh%ADOBeginSubsetFont: PFZAAA+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /PFZAAA+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 116 /t putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/t <1C60D8A8C9B76C9024B562E6ACACC3BBFBFEA0392D5F04472FA97061AAE4DC52A3F98A11D8D54F25E4E1258444AF5132275DA6C5E3D0885B5B2A4654CEE34242292B9FEE69B16E5DD8A918634DD3321B8DE0F4A8FC34CE141D352DCEC7C4316AD4FCDE9B4AA88B17F80EB64AF3D0551FB1E213394E362152BE7414F5D1A1399F0E6D948396CBDF7FCCB9AE5C344B> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRS+CMMI7 /PFZAAA+CMMI7 findfont ct_VMDictPut/RQARRS+CMMI7*1 [116{/.notdef}rp /t 139{/.notdef}rp]RQARRS+CMMI7 nfRQARRS+CMMI7*1 [10.5282 0 0 -10.5282 0 0 ]msf77.196 87.2178 mo(t)sh%ADOBeginSubsetFont: CXGBAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /CXGBAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 53 /five putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA257DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CBF9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB77472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRT+CMR10 /CXGBAA+CMR10 findfont ct_VMDictPut/RQARRT+CMR10*1 [53{/.notdef}rp /five 7{/.notdef}rp /equal 194{/.notdef}rp]RQARRT+CMR10 nfRQARRT+CMR10*1 [15.0403 0 0 -15.0403 0 0 ]msf84.1631 84.9609 mo(=5)[13.3677 0 ]xshgrestore
gsave
65.375 450.5 mo
112.375 450.5 li
112.375 437.5 li
65.375 437.5 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: YIIQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /YIIQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 78 /N putdef/UniqueID 5087385 def/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/N <1C60D8A8C9B6D671D38ABEF2C3AA4E9EF85233BCD577CC743D9BB72B06D1C34EFFA73A8EEC485E47CB4255799230CE3B52ECA9DACF132C28D5023DE40AA93657FA765A68F9927890D6A99C6ADF1E426E5FE9E35D2F713DB32E49B7FA52859C2DFDFC8F7B5800FF94410ECD75C51D563B72E4CE7BF6A0DA5B3E0B6FCD8798546F59FCAF14A879752BEB0E6C22EAB4A84FE3B041C4B97C68333C4FFAD5D2E857731FA926D2CD6D6B1870856FC4382AD902F4984DB02DEAEC75932D49CD323CFF2FF5AF76629AD4B11E478073E034E2B4E9B43505D56042DA33A6E78FEA4BCD4A0F11525678055021280A500CE9ADDA6E49D3632C3DA6662AF4C4449F02> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRU+CMMI10 /YIIQMX+CMMI10 findfont ct_VMDictPut/RQARRU+CMMI10*1 [78{/.notdef}rp /N 177{/.notdef}rp]RQARRU+CMMI10 nfRQARRU+CMMI10*1 [15.0506 0 0 -15.0403 0 0 ]msf65.2096 447.836 mo(N)sh%ADOBeginSubsetFont: QVPAAA+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /QVPAAA+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 116 /t putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/t <1C60D8A8C9B76C9024B562E6ACACC3BBFBFEA0392D5F04472FA97061AAE4DC52A3F98A11D8D54F25E4E1258444AF5132275DA6C5E3D0885B5B2A4654CEE34242292B9FEE69B16E5DD8A918634DD3321B8DE0F4A8FC34CE141D352DCEC7C4316AD4FCDE9B4AA88B17F80EB64AF3D0551FB1E213394E362152BE7414F5D1A1399F0E6D948396CBDF7FCCB9AE5C344B> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRV+CMMI7 /QVPAAA+CMMI7 findfont ct_VMDictPut/RQARRV+CMMI7*1 [116{/.notdef}rp /t 139{/.notdef}rp]RQARRV+CMMI7 nfRQARRV+CMMI7*1 [10.5354 0 0 -10.5282 0 0 ]msf77.3029 450.093 mo(t)sh%ADOBeginSubsetFont: MHHQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /MHHQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF025DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668D97ECF27E58978E82B8932F2635747B0D240AA> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRW+CMR10 /MHHQMX+CMR10 findfont ct_VMDictPut/RQARRW+CMR10*1 [48{/.notdef}rp /zero /one 11{/.notdef}rp /equal 194{/.notdef}rp]RQARRW+CMR10 nfRQARRW+CMR10*1 [15.0506 0 0 -15.0403 0 0 ]msf84.2733 447.836 mo(=10)[13.3769 7.52536 0 ]xshgrestore
gsave
65.375 266.75 mo
112.375 266.75 li
112.375 253.75 li
65.375 253.75 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: STERMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /STERMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 78 /N putdef/UniqueID 5087385 def/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/N <1C60D8A8C9B6D671D38ABEF2C3AA4E9EF85233BCD577CC743D9BB72B06D1C34EFFA73A8EEC485E47CB4255799230CE3B52ECA9DACF132C28D5023DE40AA93657FA765A68F9927890D6A99C6ADF1E426E5FE9E35D2F713DB32E49B7FA52859C2DFDFC8F7B5800FF94410ECD75C51D563B72E4CE7BF6A0DA5B3E0B6FCD8798546F59FCAF14A879752BEB0E6C22EAB4A84FE3B041C4B97C68333C4FFAD5D2E857731FA926D2CD6D6B1870856FC4382AD902F4984DB02DEAEC75932D49CD323CFF2FF5AF76629AD4B11E478073E034E2B4E9B43505D56042DA33A6E78FEA4BCD4A0F11525678055021280A500CE9ADDA6E49D3632C3DA6662AF4C4449F02> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRX+CMMI10 /STERMX+CMMI10 findfont ct_VMDictPut/RQARRX+CMMI10*1 [78{/.notdef}rp /N 177{/.notdef}rp]RQARRX+CMMI10 nfRQARRX+CMMI10*1 [15.0506 0 0 -15.0403 0 0 ]msf65.2096 264.086 mo(N)sh%ADOBeginSubsetFont: GNTQMX+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /GNTQMX+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 116 /t putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/t <1C60D8A8C9B76C9024B562E6ACACC3BBFBFEA0392D5F04472FA97061AAE4DC52A3F98A11D8D54F25E4E1258444AF5132275DA6C5E3D0885B5B2A4654CEE34242292B9FEE69B16E5DD8A918634DD3321B8DE0F4A8FC34CE141D352DCEC7C4316AD4FCDE9B4AA88B17F80EB64AF3D0551FB1E213394E362152BE7414F5D1A1399F0E6D948396CBDF7FCCB9AE5C344B> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRY+CMMI7 /GNTQMX+CMMI7 findfont ct_VMDictPut/RQARRY+CMMI7*1 [116{/.notdef}rp /t 139{/.notdef}rp]RQARRY+CMMI7 nfRQARRY+CMMI7*1 [10.5354 0 0 -10.5282 0 0 ]msf77.3029 266.343 mo(t)sh%ADOBeginSubsetFont: CGHQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /CGHQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 53 /five putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA257DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CBF9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB77472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARRZ+CMR10 /CGHQMX+CMR10 findfont ct_VMDictPut/RQARRZ+CMR10*1 [48{/.notdef}rp /zero 4{/.notdef}rp /five 7{/.notdef}rp /equal 194{/.notdef}rp]RQARRZ+CMR10 nfRQARRZ+CMR10*1 [15.0506 0 0 -15.0403 0 0 ]msf84.2733 264.086 mo(=50)[13.3769 7.52536 0 ]xshgrestore
gsave
56.755 135.635 mo
151.995 135.635 li
151.995 120.417 li
56.755 120.417 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: PZFQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /PZFQMX+CMMI10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 69 /E putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437929 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D239BCB61DC78D83A8F223F832> |-/E <1C60D8A8C9B6177404106CAF965141780A3169E0E51FB498B39631979289FE59D7C56480822ECDA6B9254C24924A8B73A24155F39A737A9244DC782D8C6A6A3BD0A905E5D1F011649259A74E1CAD29A1D8E72F81F09B4C7EECA4FFCFAEB3B1E6346CD6A3D954E38DE31F2A1F351DE9C3279D3BD0707BFECC7B59C010693956FA43F9D76D2D5AE29B7B4A7BC612A50EB461CD1514B7B648A599EA86165FA5A4E003B2D394C7C044D03DD15C624FCCA439C3E5318F9E4A407BDFE3B43DC9F7E49965BBD7AE8C3EB73C6B79F04E8C58C59F20EF8F521424F93F0641BD42D5E61E58F889154054E7C906D96931054DD69096ED84D5E307FCA9D9C16C1D12FD79> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSA+CMMI10 /PZFQMX+CMMI10 findfont ct_VMDictPut/RQARSA+CMMI10*1 [46{/.notdef}rp /period 22{/.notdef}rp /E 186{/.notdef}rp]RQARSA+CMMI10 nfRQARSA+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf56.4352 132.517 mo(E)sh%ADOBeginSubsetFont: KLQAAA+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /KLQAAA+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 90 /Z putdup 99 /c putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Z <1C60D8A8C9B6FF86896B7328288CDE91291009136DE2797A54CC6CD7C8C592B625D81665476F5AE4FBA2ADD40B65182181142DE0B2FF353582277FB273288944873BB5B2BA1620C6F4F13E3C21F36874AD2EB970ABB54635802E69D40E131F8E886F40FAB7BF5E47BBEFE90C4F7B5DA3C6D4D2CD0279281512C1D9AAF46AF5778DE96162B409D02743D372A2159A94DD1F> |-/c <1C60D8A8C9B7BDE3EC3ABB5B9E4D77D5F4B7CF1A9A1589B92953F9542F6EA00667346ED0079A977D3E8084C8E03FCE1586ECB7D09BC0B53B8E4D0440EBD003F28C32C50BBFE460E69C243E05D30C001A3416E896635514B4ED69008FA242430B0A7C0680C332412646B1EA5BC4F5CAE570E1D93C518FF1CD01E6CF> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSB+CMMI7 /KLQAAA+CMMI7 findfont ct_VMDictPut/RQARSB+CMMI7*1 [90{/.notdef}rp /Z 8{/.notdef}rp /c 156{/.notdef}rp]RQARSB+CMMI7 nfRQARSB+CMMI7*1 [12.3251 0 0 -12.3251 0 0 ]msf69.4323 135.159 mo(Z)sh%ADOBeginSubsetFont: ZARQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /ZARQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 53 /five putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA257DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CBF9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB77472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSC+CMR10 /ZARQMX+CMR10 findfont ct_VMDictPut/RQARSC+CMR10*1 [48{/.notdef}rp /zero 4{/.notdef}rp /five 7{/.notdef}rp /equal 194{/.notdef}rp]RQARSC+CMR10 nfRQARSC+CMR10*1 [17.6073 0 0 -17.6073 0 0 ]msf82.7261 132.517 mo(=)sh%ADOBeginSubsetFont: WLIBAA+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /WLIBAA+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /minus putdef/UniqueID 5096651 def/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-24 0 683 705] def/OtherBlues [-135 -124] def/BlueScale 0.0437899 def/StdHW [40] def/StdVW [40] def/StemSnapH [40 56] def/StemSnapV [40 56] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9CA66334C70459EFC1D8016D52F4ACC8D584A> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSD+CMSY10 /WLIBAA+CMSY10 findfont ct_VMDictPut/RQARSD+CMSY10*1 [127{/.notdef}rp /minus 128{/.notdef}rp]RQARSD+CMSY10 nfRQARSD+CMSY10*1 [17.6073 0 0 -17.6073 0 0 ]msf98.3759 132.517 mo(\177)shRQARSC+CMR10*1 [17.6073 0 0 -17.6073 0 0 ]msf112.071 132.517 mo(0)shRQARSA+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf120.876 132.517 mo(.)shRQARSC+CMR10*1 [17.6073 0 0 -17.6073 0 0 ]msf125.766 132.517 mo(5)sh%ADOBeginSubsetFont: VCKBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /VCKBAA+CMMI10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /omega putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437929 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/omega <1C60D8A8C9B663CCDCD38BB615B5A9927D0AC8F3BEF99308F53E6E11EF6FDEC2A41598615AD97858C1C11CB2852335C8D037EC343F7FB2C8BB19CE76FD6F3CFC450758B31E07C66BA64F6059F9713685D367F90360A0A6D6D36DC65850B1914FCA760767E999EE65C6CD28F426EBA0E29CA50A7962F3BDF64398160F81EDCC71E779153676C2979CD0C26D1D704FD8A8A9077DF794C92C4969318F1308BFC9C44847FB6EBD1C8DAB4B80C252D428DD48E8F0> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSE+CMMI10 /VCKBAA+CMMI10 findfont ct_VMDictPut/RQARSE+CMMI10*1 [127{/.notdef}rp /omega 128{/.notdef}rp]RQARSE+CMMI10 nfRQARSE+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf134.569 132.517 mo(\177)shRQARSB+CMMI7*1 [12.3251 0 0 -12.3251 0 0 ]msf145.53 135.159 mo(c)shgrestore
gsave
56.755 496.747 mo
137.758 496.747 li
137.758 481.528 li
56.755 481.528 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: UDCRMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /UDCRMX+CMMI10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 69 /E putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437929 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D239BCB61DC78D83A8F223F832> |-/E <1C60D8A8C9B6177404106CAF965141780A3169E0E51FB498B39631979289FE59D7C56480822ECDA6B9254C24924A8B73A24155F39A737A9244DC782D8C6A6A3BD0A905E5D1F011649259A74E1CAD29A1D8E72F81F09B4C7EECA4FFCFAEB3B1E6346CD6A3D954E38DE31F2A1F351DE9C3279D3BD0707BFECC7B59C010693956FA43F9D76D2D5AE29B7B4A7BC612A50EB461CD1514B7B648A599EA86165FA5A4E003B2D394C7C044D03DD15C624FCCA439C3E5318F9E4A407BDFE3B43DC9F7E49965BBD7AE8C3EB73C6B79F04E8C58C59F20EF8F521424F93F0641BD42D5E61E58F889154054E7C906D96931054DD69096ED84D5E307FCA9D9C16C1D12FD79> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSF+CMMI10 /UDCRMX+CMMI10 findfont ct_VMDictPut/RQARSF+CMMI10*1 [46{/.notdef}rp /period 22{/.notdef}rp /E 186{/.notdef}rp]RQARSF+CMMI10 nfRQARSF+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf56.2124 493.628 mo(E)sh%ADOBeginSubsetFont: DOBAAA+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /DOBAAA+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 90 /Z putdup 99 /c putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Z <1C60D8A8C9B6FF86896B7328288CDE91291009136DE2797A54CC6CD7C8C592B625D81665476F5AE4FBA2ADD40B65182181142DE0B2FF353582277FB273288944873BB5B2BA1620C6F4F13E3C21F36874AD2EB970ABB54635802E69D40E131F8E886F40FAB7BF5E47BBEFE90C4F7B5DA3C6D4D2CD0279281512C1D9AAF46AF5778DE96162B409D02743D372A2159A94DD1F> |-/c <1C60D8A8C9B7BDE3EC3ABB5B9E4D77D5F4B7CF1A9A1589B92953F9542F6EA00667346ED0079A977D3E8084C8E03FCE1586ECB7D09BC0B53B8E4D0440EBD003F28C32C50BBFE460E69C243E05D30C001A3416E896635514B4ED69008FA242430B0A7C0680C332412646B1EA5BC4F5CAE570E1D93C518FF1CD01E6CF> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSG+CMMI7 /DOBAAA+CMMI7 findfont ct_VMDictPut/RQARSG+CMMI7*1 [90{/.notdef}rp /Z 8{/.notdef}rp /c 156{/.notdef}rp]RQARSG+CMMI7 nfRQARSG+CMMI7*1 [12.3251 0 0 -12.3251 0 0 ]msf69.2094 496.27 mo(Z)sh%ADOBeginSubsetFont: NCSPMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /NCSPMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF025DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668D97ECF27E58978E82B8932F2635747B0D240AA> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSH+CMR10 /NCSPMX+CMR10 findfont ct_VMDictPut/RQARSH+CMR10*1 [48{/.notdef}rp /zero /one 11{/.notdef}rp /equal 194{/.notdef}rp]RQARSH+CMR10 nfRQARSH+CMR10*1 [17.6073 0 0 -17.6073 0 0 ]msf82.5033 493.628 mo(=0)[15.6492 0 ]xshRQARSF+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf106.958 493.628 mo(.)shRQARSH+CMR10*1 [17.6073 0 0 -17.6073 0 0 ]msf111.85 493.628 mo(1)sh%ADOBeginSubsetFont: NWSPMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NWSPMX+CMMI10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /omega putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437929 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/omega <1C60D8A8C9B663CCDCD38BB615B5A9927D0AC8F3BEF99308F53E6E11EF6FDEC2A41598615AD97858C1C11CB2852335C8D037EC343F7FB2C8BB19CE76FD6F3CFC450758B31E07C66BA64F6059F9713685D367F90360A0A6D6D36DC65850B1914FCA760767E999EE65C6CD28F426EBA0E29CA50A7962F3BDF64398160F81EDCC71E779153676C2979CD0C26D1D704FD8A8A9077DF794C92C4969318F1308BFC9C44847FB6EBD1C8DAB4B80C252D428DD48E8F0> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARSI+CMMI10 /NWSPMX+CMMI10 findfont ct_VMDictPut/RQARSI+CMMI10*1 [127{/.notdef}rp /omega 128{/.notdef}rp]RQARSI+CMMI10 nfRQARSI+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf120.653 493.628 mo(\177)shRQARSG+CMMI7*1 [12.3251 0 0 -12.3251 0 0 ]msf131.612 496.27 mo(c)shgrestore
gsave
56.755 314.302 mo
151.995 314.302 li
151.995 299.083 li
56.755 299.083 li
cp
clp
0 0 0 1 cmyk
RQARSA+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf56.4352 311.183 mo(E)shRQARSB+CMMI7*1 [12.3251 0 0 -12.3251 0 0 ]msf69.4323 313.825 mo(Z)shRQARSC+CMR10*1 [17.6073 0 0 -17.6073 0 0 ]msf82.7261 311.183 mo(=)shRQARSD+CMSY10*1 [17.6073 0 0 -17.6073 0 0 ]msf98.3759 311.183 mo(\177)shRQARSC+CMR10*1 [17.6073 0 0 -17.6073 0 0 ]msf112.071 311.183 mo(0)shRQARSA+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf120.876 311.183 mo(.)shRQARSC+CMR10*1 [17.6073 0 0 -17.6073 0 0 ]msf125.766 311.183 mo(5)shRQARSE+CMMI10*1 [17.6073 0 0 -17.6073 0 0 ]msf134.569 311.183 mo(\177)shRQARSB+CMMI7*1 [12.3251 0 0 -12.3251 0 0 ]msf145.53 313.825 mo(c)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/RQARRO+CMBX10*1 uf/RQARRO+CMBX10 uf/REPAAA+CMBX10 uf/RQARRN+CMR10*1 uf/RQARRN+CMR10 uf/PRJBAA+CMR10 uf/RQARRM+CMBX10*1 uf/RQARRM+CMBX10 uf/RAIRMX+CMBX10 uf/RQARRU+CMMI10*1 uf/RQARRU+CMMI10 uf/YIIQMX+CMMI10 uf/RQARRV+CMMI7*1 uf/RQARRV+CMMI7 uf/QVPAAA+CMMI7 uf/RQARRF+Mathematica2*1 uf/RQARRF+Mathematica2 uf/PZQAAA+Mathematica2 uf/RQARRL+CMR10*1 uf/RQARRL+CMR10 uf/RKTAAA+CMR10 uf/RQARRK+Mathematica2*1 uf/RQARRK+Mathematica2 uf/KPPPMX+Mathematica2 uf/RQARRC+Times-Roman*1 uf/RQARRC+Times-Roman uf/KETQMX+Times-Roman uf/RQARRS+CMMI7*1 uf/RQARRS+CMMI7 uf/PFZAAA+CMMI7 uf/RQARRT+CMR10*1 uf/RQARRT+CMR10 uf/CXGBAA+CMR10 uf/RQARRR+CMMI10*1 uf/RQARRR+CMMI10 uf/MGLRMX+CMMI10 uf/RQARSG+CMMI7*1 uf/RQARSG+CMMI7 uf/DOBAAA+CMMI7 uf/RQARSF+CMMI10*1 uf/RQARSF+CMMI10 uf/UDCRMX+CMMI10 uf/RQARSE+CMMI10*1 uf/RQARSE+CMMI10 uf/VCKBAA+CMMI10 uf/RQARSD+CMSY10*1 uf/RQARSD+CMSY10 uf/WLIBAA+CMSY10 uf/RQARRE+Mathematica1*1 uf/RQARRE+Mathematica1 uf/NXJAAA+Mathematica1 uf/RQARRD+Times-Italic*1 uf/RQARRD+Times-Italic uf/LGDRMX+Times-Italic uf/RQARSI+CMMI10*1 uf/RQARSI+CMMI10 uf/NWSPMX+CMMI10 uf/RQARSH+CMR10*1 uf/RQARSH+CMR10 uf/NCSPMX+CMR10 uf/RQARRQ+CMBX10*1 uf/RQARRQ+CMBX10 uf/WXBQMX+CMBX10 uf/RQARRP+CMR10*1 uf/RQARRP+CMR10 uf/WZKQMX+CMR10 uf/RQARRH+Times-Roman*1 uf/RQARRH+Times-Roman uf/PHDRMX+Times-Roman uf/RQARRZ+CMR10*1 uf/RQARRZ+CMR10 uf/CGHQMX+CMR10 uf/RQARRY+CMMI7*1 uf/RQARRY+CMMI7 uf/GNTQMX+CMMI7 uf/RQARRB+Mathematica3*1 uf/RQARRB+Mathematica3 uf/RBCAAA+Mathematica3 uf/RQARRJ+Mathematica1*1 uf/RQARRJ+Mathematica1 uf/CGQPMX+Mathematica1 uf/RQARQW+Mathematica3*1 uf/RQARQW+Mathematica3 uf/GHTAAA+Mathematica3 uf/RQARQZ+Mathematica1*1 uf/RQARQZ+Mathematica1 uf/TCJRMX+Mathematica1 uf/RQARQY+Times-Italic*1 uf/RQARQY+Times-Italic uf/BCJRMX+Times-Italic uf/RQARRI+Times-Italic*1 uf/RQARRI+Times-Italic uf/TMTQMX+Times-Italic uf/RQARRX+CMMI10*1 uf/RQARRX+CMMI10 uf/STERMX+CMMI10 uf/RQARRW+CMR10*1 uf/RQARRW+CMR10 uf/MHHQMX+CMR10 uf/RQARQX+Times-Roman*1 uf/RQARQX+Times-Roman uf/ZPTQMX+Times-Roman uf/RQARRA+Mathematica2*1 uf/RQARRA+Mathematica2 uf/LMEQMX+Mathematica2 uf/RQARRG+Mathematica3*1 uf/RQARRG+Mathematica3 uf/UQKBAA+Mathematica3 uf/RQARSB+CMMI7*1 uf/RQARSB+CMMI7 uf/KLQAAA+CMMI7 uf/RQARSC+CMR10*1 uf/RQARSC+CMR10 uf/ZARQMX+CMR10 uf/RQARSA+CMMI10*1 uf/RQARSA+CMMI10 uf/PZFQMX+CMMI10 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
