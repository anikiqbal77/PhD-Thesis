%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: app_slosh.pdf
%%Creator: Adobe Acrobat 10.1.10
%%For: mkhodas
%%CreationDate: 8/18/14, 4:43 PM
%%BoundingBox: 0 0 366 257
%%HiResBoundingBox: 0 0 365.4294 256.8092
%%CropBox: 0 0 365.4294 256.8092
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 972 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-08-18T21:42:06Z"
   xmp:CreatorTool="Microsoft PowerPoint"
   xmp:ModifyDate="2014-08-18T16:43:08-05:00"
   xmp:MetadataDate="2014-08-18T16:43:08-05:00"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.6.8 Quartz PDFContext"
   xmpMM:DocumentID="uuid:79f3b398-04cd-4448-b089-7bf6a53e5134"
   xmpMM:InstanceID="uuid:25f0e19b-26ce-8b44-b036-64f514ba867f">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Maxim Khodas</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -256.809 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 256.809 li
365.429 256.809 li
365.429 0 li
cp
clp
0 540 mo
720 540 li
720 6.10351e-05 li
0 6.10351e-05 li
cp
false sop
0 0 0 0 cmyk
ef
gsave
56 186.059 mo
60 186.059 li
60 177.059 li
56 177.059 li
cp
clp
.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: EMOQMX+Mathematica3 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /EMOQMX+Mathematica3 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /SolidCircle putdef/UniqueID 5095645 def/FontBBox {-109 -231 966 869} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-107 -91 505 527 596 612] def/BlueScale 0.0454559 def/StdHW [34] def/StdVW [34] def/StemSnapH [34 66] def/StemSnapV [34 65] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/SolidCircle <1C60D8A8C9B60287CF08F7BF563CAAD6E08EFD6DAA142CC7220408DECF2B61045B377CC2E5343FEE4BB07E6944D948E0191385507B98AE> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWN+Mathematica3 /EMOQMX+Mathematica3 findfont ct_VMDictPut/RQARWN+Mathematica3*1 [/.notdef /SolidCircle 254{/.notdef}rp]RQARWN+Mathematica3 nfRQARWN+Mathematica3*1 [5 0 0 -5 0 0 ]msf55.176 183.426 mo(\001)sh55.176 183.507 mo(\001)sh55.176 183.525 mo(\001)sh55.176 183.533 mo(\001)sh55.176 183.538 mo(\001)sh55.176 183.541 mo(\001)sh55.176 183.543 mo(\001)sh55.176 183.544 mo(\001)sh55.176 183.546 mo(\001)sh55.176 183.547 mo(\001)sh55.176 183.547 mo(\001)sh55.176 183.548 mo(\001)sh55.176 183.548 mo(\001)sh55.176 183.549 mo(\001)sh55.176 183.549 mo(\001)sh55.176 183.55 mo(\001)sh55.176 183.55 mo(\001)sh55.176 183.55 mo(\001)sh55.176 183.55 mo(\001)sh55.176 183.551 mo(\001)sh55.176 183.551 mo(\001)sh55.176 183.551 mo(\001)sh55.176 183.551 mo(\001)sh55.176 183.551 mo(\001)sh55.176 183.551 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.552 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.553 mo(\001)sh55.176 183.554 mo(\001)sh55.176 183.56 mo(\001)sh55.176 183.56 mo(\001)sh55.176 183.56 mo(\001)sh55.176 183.56 mo(\001)sh55.176 183.56 mo(\001)sh55.176 183.56 mo(\001)sh55.176 183.56 mo(\001)sh55.176 183.561 mo(\001)sh55.176 183.561 mo(\001)sh55.176 183.561 mo(\001)sh55.176 183.561 mo(\001)sh55.176 183.561 mo(\001)sh55.176 183.561 mo(\001)sh55.176 183.562 mo(\001)sh55.176 183.562 mo(\001)sh55.176 183.562 mo(\001)sh55.176 183.562 mo(\001)sh55.176 183.562 mo(\001)sh55.176 183.563 mo(\001)sh55.176 183.563 mo(\001)sh55.176 183.563 mo(\001)sh55.176 183.563 mo(\001)sh55.176 183.564 mo(\001)sh55.176 183.564 mo(\001)sh55.176 183.565 mo(\001)sh55.176 183.565 mo(\001)sh55.176 183.565 mo(\001)sh55.176 183.566 mo(\001)sh55.176 183.566 mo(\001)sh55.176 183.567 mo(\001)sh55.176 183.568 mo(\001)sh55.176 183.568 mo(\001)sh55.176 183.569 mo(\001)sh55.176 183.57 mo(\001)sh55.176 183.571 mo(\001)sh55.176 183.572 mo(\001)sh55.176 183.573 mo(\001)sh55.176 183.575 mo(\001)sh55.176 183.577 mo(\001)sh55.176 183.579 mo(\001)sh55.176 183.581 mo(\001)sh55.176 183.585 mo(\001)sh55.176 183.588 mo(\001)sh55.176 183.593 mo(\001)sh55.176 183.6 mo(\001)sh55.176 183.609 mo(\001)shgrestore
gsave
56 186.059 mo
60 186.059 li
60 178.059 li
56 178.059 li
cp
clp
.895628 .7673 0 0 cmyk
RQARWN+Mathematica3*1 [5 0 0 -5 0 0 ]msf55.176 183.623 mo(\001)sh55.176 183.647 mo(\001)sh55.176 183.703 mo(\001)shgrestore
gsave
56 187.059 mo
60 187.059 li
60 178.059 li
56 178.059 li
cp
clp
.895628 .7673 0 0 cmyk
RQARWN+Mathematica3*1 [5 0 0 -5 0 0 ]msf55.176 183.949 mo(\001)shgrestore
gsave
0 252.904 mo
360 252.904 li
360 7.90411 li
0 7.90411 li
cp
clp
.895628 .7673 0 0 cmyk
RQARWN+Mathematica3*1 [5 0 0 -5 0 0 ]msf59.854 180.813 mo(\001)sh59.854 181.299 mo(\001)sh59.854 181.407 mo(\001)sh59.854 181.456 mo(\001)sh59.854 181.483 mo(\001)sh59.854 181.501 mo(\001)sh59.854 181.513 mo(\001)sh59.854 181.522 mo(\001)sh59.854 181.529 mo(\001)sh59.854 181.535 mo(\001)sh59.854 181.539 mo(\001)sh59.854 181.543 mo(\001)sh59.854 181.546 mo(\001)sh59.854 181.549 mo(\001)sh59.854 181.551 mo(\001)sh59.854 181.553 mo(\001)sh59.854 181.555 mo(\001)sh59.854 181.556 mo(\001)sh59.854 181.558 mo(\001)sh59.854 181.559 mo(\001)sh59.854 181.56 mo(\001)sh59.854 181.561 mo(\001)sh59.854 181.562 mo(\001)sh59.854 181.563 mo(\001)sh59.854 181.564 mo(\001)sh59.854 181.565 mo(\001)sh59.854 181.565 mo(\001)sh59.854 181.566 mo(\001)sh59.854 181.566 mo(\001)sh59.854 181.567 mo(\001)sh59.854 181.568 mo(\001)sh59.854 181.568 mo(\001)sh59.854 181.569 mo(\001)sh59.854 181.569 mo(\001)sh59.854 181.569 mo(\001)sh59.854 181.57 mo(\001)sh59.854 181.57 mo(\001)sh59.854 181.57 mo(\001)sh59.854 181.571 mo(\001)sh59.854 181.571 mo(\001)sh59.854 181.571 mo(\001)sh59.854 181.572 mo(\001)sh59.854 181.572 mo(\001)sh59.854 181.572 mo(\001)sh59.854 181.572 mo(\001)sh59.854 181.573 mo(\001)sh59.854 181.573 mo(\001)sh59.854 181.573 mo(\001)sh59.854 181.573 mo(\001)sh59.854 181.578 mo(\001)sh59.854 181.614 mo(\001)sh59.854 181.614 mo(\001)sh59.854 181.615 mo(\001)sh59.854 181.616 mo(\001)sh59.854 181.617 mo(\001)sh59.854 181.617 mo(\001)sh59.854 181.618 mo(\001)sh59.854 181.619 mo(\001)sh59.854 181.62 mo(\001)sh59.854 181.621 mo(\001)sh59.854 181.622 mo(\001)sh59.854 181.623 mo(\001)sh59.854 181.624 mo(\001)sh59.854 181.625 mo(\001)sh59.854 181.626 mo(\001)sh59.854 181.627 mo(\001)sh59.854 181.628 mo(\001)sh59.854 181.63 mo(\001)sh59.854 181.631 mo(\001)sh59.854 181.633 mo(\001)sh59.854 181.635 mo(\001)sh59.854 181.636 mo(\001)sh59.854 181.638 mo(\001)sh59.854 181.64 mo(\001)sh59.854 181.643 mo(\001)sh59.854 181.645 mo(\001)sh59.854 181.648 mo(\001)sh59.854 181.651 mo(\001)sh59.854 181.654 mo(\001)sh59.854 181.657 mo(\001)sh59.854 181.661 mo(\001)sh59.854 181.665 mo(\001)sh59.854 181.67 mo(\001)sh59.854 181.675 mo(\001)sh59.854 181.681 mo(\001)sh59.854 181.688 mo(\001)sh59.854 181.696 mo(\001)sh59.854 181.705 mo(\001)sh59.854 181.716 mo(\001)sh59.854 181.729 mo(\001)sh59.854 181.744 mo(\001)sh59.854 181.763 mo(\001)sh59.854 181.786 mo(\001)sh59.854 181.815 mo(\001)sh59.854 181.853 mo(\001)sh59.854 181.907 mo(\001)sh59.854 181.991 mo(\001)sh59.854 182.14 mo(\001)sh59.854 182.471 mo(\001)sh59.854 183.949 mo(\001)sh64.532 178.199 mo(\001)sh64.532 179.091 mo(\001)sh64.532 179.289 mo(\001)sh64.532 179.378 mo(\001)sh64.532 179.428 mo(\001)sh64.532 179.461 mo(\001)sh64.532 179.483 mo(\001)sh64.532 179.5 mo(\001)sh64.532 179.513 mo(\001)sh64.532 179.523 mo(\001)sh64.532 179.531 mo(\001)sh64.532 179.538 mo(\001)sh64.532 179.544 mo(\001)sh64.532 179.549 mo(\001)sh64.532 179.553 mo(\001)sh64.532 179.557 mo(\001)sh64.532 179.56 mo(\001)sh64.532 179.563 mo(\001)sh64.532 179.565 mo(\001)sh64.532 179.568 mo(\001)sh64.532 179.57 mo(\001)sh64.532 179.572 mo(\001)sh64.532 179.573 mo(\001)sh64.532 179.575 mo(\001)sh64.532 179.576 mo(\001)sh64.532 179.578 mo(\001)sh64.532 179.579 mo(\001)sh64.532 179.58 mo(\001)sh64.532 179.581 mo(\001)sh64.532 179.582 mo(\001)sh64.532 179.583 mo(\001)sh64.532 179.584 mo(\001)sh64.532 179.585 mo(\001)sh64.532 179.586 mo(\001)sh64.532 179.586 mo(\001)sh64.532 179.587 mo(\001)sh64.532 179.588 mo(\001)sh64.532 179.588 mo(\001)sh64.532 179.589 mo(\001)sh64.532 179.59 mo(\001)sh64.532 179.59 mo(\001)sh64.532 179.591 mo(\001)sh64.532 179.591 mo(\001)sh64.532 179.592 mo(\001)sh64.532 179.592 mo(\001)sh64.532 179.592 mo(\001)sh64.532 179.593 mo(\001)sh64.532 179.593 mo(\001)sh64.532 179.594 mo(\001)sh64.532 179.603 mo(\001)sh64.532 179.668 mo(\001)sh64.532 179.669 mo(\001)sh64.532 179.67 mo(\001)sh64.532 179.672 mo(\001)sh64.532 179.673 mo(\001)sh64.532 179.674 mo(\001)sh64.532 179.676 mo(\001)sh64.532 179.677 mo(\001)sh64.532 179.679 mo(\001)sh64.532 179.68 mo(\001)sh64.532 179.682 mo(\001)sh64.532 179.684 mo(\001)sh64.532 179.686 mo(\001)sh64.532 179.688 mo(\001)sh64.532 179.69 mo(\001)sh64.532 179.692 mo(\001)sh64.532 179.695 mo(\001)sh64.532 179.697 mo(\001)sh64.532 179.7 mo(\001)sh64.532 179.703 mo(\001)sh64.532 179.706 mo(\001)sh64.532 179.709 mo(\001)sh64.532 179.713 mo(\001)sh64.532 179.717 mo(\001)sh64.532 179.721 mo(\001)sh64.532 179.725 mo(\001)sh64.532 179.73 mo(\001)sh64.532 179.735 mo(\001)sh64.532 179.741 mo(\001)sh64.532 179.747 mo(\001)sh64.532 179.754 mo(\001)sh64.532 179.762 mo(\001)sh64.532 179.771 mo(\001)sh64.532 179.781 mo(\001)sh64.532 179.792 mo(\001)sh64.532 179.804 mo(\001)sh64.532 179.819 mo(\001)sh64.532 179.835 mo(\001)sh64.532 179.855 mo(\001)sh64.532 179.879 mo(\001)sh64.532 179.907 mo(\001)sh64.532 179.941 mo(\001)sh64.532 179.983 mo(\001)sh64.532 180.036 mo(\001)sh64.532 180.106 mo(\001)sh64.532 180.205 mo(\001)sh64.532 180.359 mo(\001)sh64.532 180.632 mo(\001)sh64.532 181.24 mo(\001)sh64.532 183.949 mo(\001)sh69.21 175.586 mo(\001)sh69.21 176.883 mo(\001)sh69.21 177.171 mo(\001)sh69.21 177.3 mo(\001)sh69.21 177.373 mo(\001)sh69.21 177.421 mo(\001)sh69.21 177.454 mo(\001)sh69.21 177.478 mo(\001)sh69.21 177.497 mo(\001)sh69.21 177.511 mo(\001)sh69.21 177.523 mo(\001)sh69.21 177.533 mo(\001)sh69.21 177.542 mo(\001)sh69.21 177.549 mo(\001)sh69.21 177.555 mo(\001)sh69.21 177.56 mo(\001)sh69.21 177.565 mo(\001)sh69.21 177.569 mo(\001)sh69.21 177.573 mo(\001)sh69.21 177.576 mo(\001)sh69.21 177.579 mo(\001)sh69.21 177.582 mo(\001)sh69.21 177.584 mo(\001)sh69.21 177.587 mo(\001)sh69.21 177.589 mo(\001)sh69.21 177.591 mo(\001)sh69.21 177.593 mo(\001)sh69.21 177.594 mo(\001)sh69.21 177.596 mo(\001)sh69.21 177.597 mo(\001)sh69.21 177.599 mo(\001)sh69.21 177.6 mo(\001)sh69.21 177.601 mo(\001)sh69.21 177.602 mo(\001)sh69.21 177.603 mo(\001)sh69.21 177.604 mo(\001)sh69.21 177.605 mo(\001)sh69.21 177.606 mo(\001)sh69.21 177.607 mo(\001)sh69.21 177.608 mo(\001)sh69.21 177.609 mo(\001)sh69.21 177.609 mo(\001)sh69.21 177.61 mo(\001)sh69.21 177.611 mo(\001)sh69.21 177.612 mo(\001)sh69.21 177.612 mo(\001)sh69.21 177.613 mo(\001)sh69.21 177.613 mo(\001)sh69.21 177.614 mo(\001)sh69.21 177.628 mo(\001)sh69.21 177.722 mo(\001)sh69.21 177.724 mo(\001)sh69.21 177.726 mo(\001)sh69.21 177.727 mo(\001)sh69.21 177.729 mo(\001)sh69.21 177.731 mo(\001)sh69.21 177.733 mo(\001)sh69.21 177.736 mo(\001)sh69.21 177.738 mo(\001)sh69.21 177.74 mo(\001)sh69.21 177.743 mo(\001)sh69.21 177.745 mo(\001)sh69.21 177.748 mo(\001)sh69.21 177.751 mo(\001)sh69.21 177.754 mo(\001)sh69.21 177.758 mo(\001)sh69.21 177.761 mo(\001)sh69.21 177.765 mo(\001)sh69.21 177.769 mo(\001)sh69.21 177.773 mo(\001)sh69.21 177.777 mo(\001)sh69.21 177.782 mo(\001)sh69.21 177.787 mo(\001)sh69.21 177.793 mo(\001)sh69.21 177.799 mo(\001)sh69.21 177.805 mo(\001)sh69.21 177.812 mo(\001)sh69.21 177.82 mo(\001)sh69.21 177.829 mo(\001)sh69.21 177.838 mo(\001)sh69.21 177.848 mo(\001)sh69.21 177.859 mo(\001)sh69.21 177.872 mo(\001)sh69.21 177.886 mo(\001)sh69.21 177.902 mo(\001)sh69.21 177.92 mo(\001)sh69.21 177.941 mo(\001)sh69.21 177.966 mo(\001)sh69.21 177.994 mo(\001)sh69.21 178.029 mo(\001)sh69.21 178.069 mo(\001)sh69.21 178.119 mo(\001)sh69.21 178.18 mo(\001)sh69.21 178.257 mo(\001)sh69.21 178.359 mo(\001)sh69.21 178.503 mo(\001)sh69.21 178.727 mo(\001)sh69.21 179.124 mo(\001)sh69.21 180.008 mo(\001)sh69.21 183.949 mo(\001)sh73.888 172.973 mo(\001)sh73.888 174.674 mo(\001)sh73.888 175.053 mo(\001)sh73.888 175.222 mo(\001)sh73.888 175.319 mo(\001)sh73.888 175.381 mo(\001)sh73.888 175.424 mo(\001)sh73.888 175.456 mo(\001)sh73.888 175.48 mo(\001)sh73.888 175.5 mo(\001)sh73.888 175.516 mo(\001)sh73.888 175.529 mo(\001)sh73.888 175.539 mo(\001)sh73.888 175.549 mo(\001)sh73.888 175.557 mo(\001)sh73.888 175.564 mo(\001)sh73.888 175.57 mo(\001)sh73.888 175.575 mo(\001)sh73.888 175.58 mo(\001)sh73.888 175.585 mo(\001)sh73.888 175.589 mo(\001)sh73.888 175.592 mo(\001)sh73.888 175.595 mo(\001)sh73.888 175.598 mo(\001)sh73.888 175.601 mo(\001)sh73.888 175.604 mo(\001)sh73.888 175.606 mo(\001)sh73.888 175.608 mo(\001)sh73.888 175.61 mo(\001)sh73.888 175.612 mo(\001)sh73.888 175.614 mo(\001)sh73.888 175.616 mo(\001)sh73.888 175.617 mo(\001)sh73.888 175.619 mo(\001)sh73.888 175.62 mo(\001)sh73.888 175.622 mo(\001)sh73.888 175.623 mo(\001)sh73.888 175.624 mo(\001)sh73.888 175.625 mo(\001)sh73.888 175.626 mo(\001)sh73.888 175.627 mo(\001)sh73.888 175.628 mo(\001)sh73.888 175.629 mo(\001)sh73.888 175.63 mo(\001)sh73.888 175.631 mo(\001)sh73.888 175.632 mo(\001)sh73.888 175.633 mo(\001)sh73.888 175.633 mo(\001)sh73.888 175.634 mo(\001)sh73.888 175.652 mo(\001)sh73.888 175.776 mo(\001)sh73.888 175.778 mo(\001)sh73.888 175.781 mo(\001)sh73.888 175.783 mo(\001)sh73.888 175.786 mo(\001)sh73.888 175.788 mo(\001)sh73.888 175.791 mo(\001)sh73.888 175.794 mo(\001)sh73.888 175.797 mo(\001)sh73.888 175.8 mo(\001)sh73.888 175.803 mo(\001)sh73.888 175.807 mo(\001)sh73.888 175.81 mo(\001)sh73.888 175.814 mo(\001)sh73.888 175.818 mo(\001)sh73.888 175.823 mo(\001)sh73.888 175.827 mo(\001)sh73.888 175.832 mo(\001)sh73.888 175.837 mo(\001)sh73.888 175.843 mo(\001)sh73.888 175.849 mo(\001)sh73.888 175.855 mo(\001)sh73.888 175.862 mo(\001)sh73.888 175.869 mo(\001)sh73.888 175.877 mo(\001)sh73.888 175.886 mo(\001)sh73.888 175.895 mo(\001)sh73.888 175.905 mo(\001)sh73.888 175.916 mo(\001)sh73.888 175.928 mo(\001)sh73.888 175.941 mo(\001)sh73.888 175.956 mo(\001)sh73.888 175.973 mo(\001)sh73.888 175.991 mo(\001)sh73.888 176.012 mo(\001)sh73.888 176.036 mo(\001)sh73.888 176.064 mo(\001)sh73.888 176.096 mo(\001)sh73.888 176.134 mo(\001)sh73.888 176.178 mo(\001)sh73.888 176.232 mo(\001)sh73.888 176.297 mo(\001)sh73.888 176.378 mo(\001)sh73.888 176.478 mo(\001)sh73.888 176.612 mo(\001)sh73.888 176.801 mo(\001)sh73.888 177.096 mo(\001)sh73.888 177.617 mo(\001)sh73.888 178.777 mo(\001)sh73.888 183.949 mo(\001)sh78.567 170.359 mo(\001)sh78.567 172.466 mo(\001)sh78.567 172.935 mo(\001)sh78.567 173.145 mo(\001)sh78.567 173.264 mo(\001)sh78.567 173.341 mo(\001)sh78.567 173.394 mo(\001)sh78.567 173.434 mo(\001)sh78.567 173.464 mo(\001)sh78.567 173.488 mo(\001)sh78.567 173.508 mo(\001)sh78.567 173.524 mo(\001)sh78.567 173.537 mo(\001)sh78.567 173.549 mo(\001)sh78.567 173.559 mo(\001)sh78.567 173.567 mo(\001)sh78.567 173.575 mo(\001)sh78.567 173.582 mo(\001)sh78.567 173.588 mo(\001)sh78.567 173.593 mo(\001)sh78.567 173.598 mo(\001)sh78.567 173.602 mo(\001)sh78.567 173.606 mo(\001)sh78.567 173.61 mo(\001)sh78.567 173.614 mo(\001)sh78.567 173.617 mo(\001)sh78.567 173.62 mo(\001)sh78.567 173.623 mo(\001)sh78.567 173.625 mo(\001)sh78.567 173.627 mo(\001)sh78.567 173.63 mo(\001)sh78.567 173.632 mo(\001)sh78.567 173.634 mo(\001)sh78.567 173.636 mo(\001)sh78.567 173.637 mo(\001)sh78.567 173.639 mo(\001)sh78.567 173.641 mo(\001)sh78.567 173.642 mo(\001)sh78.567 173.644 mo(\001)sh78.567 173.645 mo(\001)sh78.567 173.646 mo(\001)sh78.567 173.647 mo(\001)sh78.567 173.649 mo(\001)sh78.567 173.65 mo(\001)sh78.567 173.651 mo(\001)sh78.567 173.652 mo(\001)sh78.567 173.653 mo(\001)sh78.567 173.654 mo(\001)sh78.567 173.654 mo(\001)sh78.567 173.677 mo(\001)sh78.567 173.83 mo(\001)sh78.567 173.833 mo(\001)sh78.567 173.836 mo(\001)sh78.567 173.839 mo(\001)sh78.567 173.842 mo(\001)sh78.567 173.845 mo(\001)sh78.567 173.849 mo(\001)sh78.567 173.852 mo(\001)sh78.567 173.856 mo(\001)sh78.567 173.86 mo(\001)sh78.567 173.864 mo(\001)sh78.567 173.868 mo(\001)sh78.567 173.873 mo(\001)sh78.567 173.878 mo(\001)sh78.567 173.883 mo(\001)sh78.567 173.888 mo(\001)sh78.567 173.894 mo(\001)sh78.567 173.9 mo(\001)sh78.567 173.906 mo(\001)sh78.567 173.913 mo(\001)sh78.567 173.92 mo(\001)sh78.567 173.928 mo(\001)sh78.567 173.936 mo(\001)sh78.567 173.945 mo(\001)sh78.567 173.955 mo(\001)sh78.567 173.966 mo(\001)sh78.567 173.977 mo(\001)sh78.567 173.99 mo(\001)sh78.567 174.003 mo(\001)sh78.567 174.018 mo(\001)sh78.567 174.035 mo(\001)sh78.567 174.053 mo(\001)sh78.567 174.074 mo(\001)sh78.567 174.097 mo(\001)sh78.567 174.123 mo(\001)sh78.567 174.152 mo(\001)sh78.567 174.187 mo(\001)sh78.567 174.226 mo(\001)sh78.567 174.273 mo(\001)sh78.567 174.328 mo(\001)sh78.567 174.395 mo(\001)sh78.567 174.476 mo(\001)sh78.567 174.575 mo(\001)sh78.567 174.7 mo(\001)sh78.567 174.865 mo(\001)sh78.567 175.099 mo(\001)sh78.567 175.464 mo(\001)sh78.567 176.109 mo(\001)sh78.567 177.546 mo(\001)sh78.567 183.949 mo(\001)sh83.245 167.746 mo(\001)sh83.245 170.258 mo(\001)sh83.245 170.817 mo(\001)sh83.245 171.067 mo(\001)sh83.245 171.209 mo(\001)sh83.245 171.3 mo(\001)sh83.245 171.364 mo(\001)sh83.245 171.412 mo(\001)sh83.245 171.448 mo(\001)sh83.245 171.476 mo(\001)sh83.245 171.5 mo(\001)sh83.245 171.519 mo(\001)sh83.245 171.535 mo(\001)sh83.245 171.549 mo(\001)sh83.245 171.561 mo(\001)sh83.245 171.571 mo(\001)sh83.245 171.58 mo(\001)sh83.245 171.588 mo(\001)sh83.245 171.595 mo(\001)sh83.245 171.602 mo(\001)sh83.245 171.607 mo(\001)sh83.245 171.613 mo(\001)sh83.245 171.618 mo(\001)sh83.245 171.622 mo(\001)sh83.245 171.626 mo(\001)sh83.245 171.63 mo(\001)sh83.245 171.633 mo(\001)sh83.245 171.637 mo(\001)sh83.245 171.64 mo(\001)sh83.245 171.643 mo(\001)sh83.245 171.645 mo(\001)sh83.245 171.648 mo(\001)sh83.245 171.65 mo(\001)sh83.245 171.652 mo(\001)sh83.245 171.654 mo(\001)sh83.245 171.656 mo(\001)sh83.245 171.658 mo(\001)sh83.245 171.66 mo(\001)sh83.245 171.662 mo(\001)sh83.245 171.663 mo(\001)sh83.245 171.665 mo(\001)sh83.245 171.666 mo(\001)sh83.245 171.668 mo(\001)sh83.245 171.669 mo(\001)sh83.245 171.67 mo(\001)sh83.245 171.671 mo(\001)sh83.245 171.673 mo(\001)sh83.245 171.674 mo(\001)sh83.245 171.675 mo(\001)sh83.245 171.701 mo(\001)sh83.245 171.884 mo(\001)sh83.245 171.888 mo(\001)sh83.245 171.891 mo(\001)sh83.245 171.895 mo(\001)sh83.245 171.898 mo(\001)sh83.245 171.902 mo(\001)sh83.245 171.906 mo(\001)sh83.245 171.91 mo(\001)sh83.245 171.915 mo(\001)sh83.245 171.92 mo(\001)sh83.245 171.924 mo(\001)sh83.245 171.93 mo(\001)sh83.245 171.935 mo(\001)sh83.245 171.941 mo(\001)sh83.245 171.947 mo(\001)sh83.245 171.953 mo(\001)sh83.245 171.96 mo(\001)sh83.245 171.967 mo(\001)sh83.245 171.975 mo(\001)sh83.245 171.983 mo(\001)sh83.245 171.992 mo(\001)sh83.245 172.001 mo(\001)sh83.245 172.011 mo(\001)sh83.245 172.022 mo(\001)sh83.245 172.033 mo(\001)sh83.245 172.046 mo(\001)sh83.245 172.06 mo(\001)sh83.245 172.074 mo(\001)sh83.245 172.091 mo(\001)sh83.245 172.109 mo(\001)sh83.245 172.128 mo(\001)sh83.245 172.15 mo(\001)sh83.245 172.175 mo(\001)sh83.245 172.202 mo(\001)sh83.245 172.233 mo(\001)sh83.245 172.268 mo(\001)sh83.245 172.309 mo(\001)sh83.245 172.356 mo(\001)sh83.245 172.412 mo(\001)sh83.245 172.478 mo(\001)sh83.245 172.557 mo(\001)sh83.245 172.654 mo(\001)sh83.245 172.772 mo(\001)sh83.245 172.921 mo(\001)sh83.245 173.118 mo(\001)sh83.245 173.397 mo(\001)sh83.245 173.832 mo(\001)sh83.245 174.601 mo(\001)sh83.245 176.314 mo(\001)sh83.245 183.949 mo(\001)sh87.923 165.133 mo(\001)sh87.923 168.05 mo(\001)sh87.923 168.699 mo(\001)sh87.923 168.989 mo(\001)sh87.923 169.154 mo(\001)sh87.923 169.26 mo(\001)sh87.923 169.335 mo(\001)sh87.923 169.389 mo(\001)sh87.923 169.431 mo(\001)sh87.923 169.465 mo(\001)sh87.923 169.492 mo(\001)sh87.923 169.514 mo(\001)sh87.923 169.533 mo(\001)sh87.923 169.549 mo(\001)sh87.923 169.562 mo(\001)sh87.923 169.574 mo(\001)sh87.923 169.585 mo(\001)sh87.923 169.594 mo(\001)sh87.923 169.603 mo(\001)sh87.923 169.61 mo(\001)sh87.923 169.617 mo(\001)sh87.923 169.623 mo(\001)sh87.923 169.629 mo(\001)sh87.923 169.634 mo(\001)sh87.923 169.639 mo(\001)sh87.923 169.643 mo(\001)sh87.923 169.647 mo(\001)sh87.923 169.651 mo(\001)sh87.923 169.654 mo(\001)sh87.923 169.658 mo(\001)sh87.923 169.661 mo(\001)sh87.923 169.664 mo(\001)sh87.923 169.666 mo(\001)sh87.923 169.669 mo(\001)sh87.923 169.671 mo(\001)sh87.923 169.674 mo(\001)sh87.923 169.676 mo(\001)sh87.923 169.678 mo(\001)sh87.923 169.68 mo(\001)sh87.923 169.682 mo(\001)sh87.923 169.684 mo(\001)sh87.923 169.685 mo(\001)sh87.923 169.687 mo(\001)sh87.923 169.688 mo(\001)sh87.923 169.69 mo(\001)sh87.923 169.691 mo(\001)sh87.923 169.693 mo(\001)sh87.923 169.694 mo(\001)sh87.923 169.695 mo(\001)sh87.923 169.726 mo(\001)sh87.923 169.939 mo(\001)sh87.923 169.942 mo(\001)sh87.923 169.946 mo(\001)sh87.923 169.95 mo(\001)sh87.923 169.955 mo(\001)sh87.923 169.959 mo(\001)sh87.923 169.964 mo(\001)sh87.923 169.969 mo(\001)sh87.923 169.974 mo(\001)sh87.923 169.979 mo(\001)sh87.923 169.985 mo(\001)sh87.923 169.991 mo(\001)sh87.923 169.997 mo(\001)sh87.923 170.004 mo(\001)sh87.923 170.011 mo(\001)sh87.923 170.018 mo(\001)sh87.923 170.026 mo(\001)sh87.923 170.035 mo(\001)sh87.923 170.043 mo(\001)sh87.923 170.053 mo(\001)sh87.923 170.063 mo(\001)sh87.923 170.074 mo(\001)sh87.923 170.085 mo(\001)sh87.923 170.098 mo(\001)sh87.923 170.111 mo(\001)sh87.923 170.126 mo(\001)sh87.923 170.142 mo(\001)sh87.923 170.159 mo(\001)sh87.923 170.178 mo(\001)sh87.923 170.199 mo(\001)sh87.923 170.222 mo(\001)sh87.923 170.247 mo(\001)sh87.923 170.275 mo(\001)sh87.923 170.307 mo(\001)sh87.923 170.343 mo(\001)sh87.923 170.384 mo(\001)sh87.923 170.432 mo(\001)sh87.923 170.487 mo(\001)sh87.923 170.551 mo(\001)sh87.923 170.628 mo(\001)sh87.923 170.72 mo(\001)sh87.923 170.832 mo(\001)sh87.923 170.97 mo(\001)sh87.923 171.142 mo(\001)sh87.923 171.371 mo(\001)sh87.923 171.695 mo(\001)sh87.923 172.201 mo(\001)sh87.923 173.093 mo(\001)sh87.923 175.083 mo(\001)sh87.923 183.949 mo(\001)sh92.601 162.519 mo(\001)sh92.601 165.842 mo(\001)sh92.601 166.581 mo(\001)sh92.601 166.911 mo(\001)sh92.601 167.099 mo(\001)sh92.601 167.22 mo(\001)sh92.601 167.305 mo(\001)sh92.601 167.367 mo(\001)sh92.601 167.415 mo(\001)sh92.601 167.453 mo(\001)sh92.601 167.484 mo(\001)sh92.601 167.509 mo(\001)sh92.601 167.53 mo(\001)sh92.601 167.549 mo(\001)sh92.601 167.564 mo(\001)sh92.601 167.578 mo(\001)sh92.601 167.59 mo(\001)sh92.601 167.601 mo(\001)sh92.601 167.61 mo(\001)sh92.601 167.619 mo(\001)sh92.601 167.626 mo(\001)sh92.601 167.633 mo(\001)sh92.601 167.64 mo(\001)sh92.601 167.646 mo(\001)sh92.601 167.651 mo(\001)sh92.601 167.656 mo(\001)sh92.601 167.661 mo(\001)sh92.601 167.665 mo(\001)sh92.601 167.669 mo(\001)sh92.601 167.673 mo(\001)sh92.601 167.676 mo(\001)sh92.601 167.68 mo(\001)sh92.601 167.683 mo(\001)sh92.601 167.686 mo(\001)sh92.601 167.688 mo(\001)sh92.601 167.691 mo(\001)sh92.601 167.694 mo(\001)sh92.601 167.696 mo(\001)sh92.601 167.698 mo(\001)sh92.601 167.7 mo(\001)sh92.601 167.702 mo(\001)sh92.601 167.704 mo(\001)sh92.601 167.706 mo(\001)sh92.601 167.708 mo(\001)sh92.601 167.709 mo(\001)sh92.601 167.711 mo(\001)sh92.601 167.713 mo(\001)sh92.601 167.714 mo(\001)sh92.601 167.715 mo(\001)sh92.601 167.751 mo(\001)sh92.601 167.993 mo(\001)sh92.601 167.997 mo(\001)sh92.601 168.001 mo(\001)sh92.601 168.006 mo(\001)sh92.601 168.011 mo(\001)sh92.601 168.016 mo(\001)sh92.601 168.021 mo(\001)sh92.601 168.027 mo(\001)sh92.601 168.033 mo(\001)sh92.601 168.039 mo(\001)sh92.601 168.046 mo(\001)sh92.601 168.052 mo(\001)sh92.601 168.06 mo(\001)sh92.601 168.067 mo(\001)sh92.601 168.075 mo(\001)sh92.601 168.084 mo(\001)sh92.601 168.092 mo(\001)sh92.601 168.102 mo(\001)sh92.601 168.112 mo(\001)sh92.601 168.123 mo(\001)sh92.601 168.134 mo(\001)sh92.601 168.147 mo(\001)sh92.601 168.16 mo(\001)sh92.601 168.174 mo(\001)sh92.601 168.19 mo(\001)sh92.601 168.206 mo(\001)sh92.601 168.224 mo(\001)sh92.601 168.244 mo(\001)sh92.601 168.265 mo(\001)sh92.601 168.289 mo(\001)sh92.601 168.315 mo(\001)sh92.601 168.344 mo(\001)sh92.601 168.376 mo(\001)sh92.601 168.413 mo(\001)sh92.601 168.454 mo(\001)sh92.601 168.5 mo(\001)sh92.601 168.554 mo(\001)sh92.601 168.617 mo(\001)sh92.601 168.691 mo(\001)sh92.601 168.778 mo(\001)sh92.601 168.883 mo(\001)sh92.601 169.01 mo(\001)sh92.601 169.167 mo(\001)sh92.601 169.364 mo(\001)sh92.601 169.624 mo(\001)sh92.601 169.993 mo(\001)sh92.601 170.569 mo(\001)sh92.601 171.586 mo(\001)sh92.601 173.852 mo(\001)sh92.601 183.949 mo(\001)sh97.279 159.906 mo(\001)sh97.279 163.633 mo(\001)sh97.279 164.463 mo(\001)sh97.279 164.834 mo(\001)sh97.279 165.044 mo(\001)sh97.279 165.18 mo(\001)sh97.279 165.275 mo(\001)sh97.279 165.345 mo(\001)sh97.279 165.399 mo(\001)sh97.279 165.441 mo(\001)sh97.279 165.476 mo(\001)sh97.279 165.504 mo(\001)sh97.279 165.528 mo(\001)sh97.279 165.549 mo(\001)sh97.279 165.566 mo(\001)sh97.279 165.581 mo(\001)sh97.279 165.595 mo(\001)sh97.279 165.607 mo(\001)sh97.279 165.617 mo(\001)sh97.279 165.627 mo(\001)sh97.279 165.636 mo(\001)sh97.279 165.644 mo(\001)sh97.279 165.651 mo(\001)sh97.279 165.657 mo(\001)sh97.279 165.663 mo(\001)sh97.279 165.669 mo(\001)sh97.279 165.674 mo(\001)sh97.279 165.679 mo(\001)sh97.279 165.684 mo(\001)sh97.279 165.688 mo(\001)sh97.279 165.692 mo(\001)sh97.279 165.696 mo(\001)sh97.279 165.699 mo(\001)sh97.279 165.702 mo(\001)sh97.279 165.705 mo(\001)sh97.279 165.708 mo(\001)sh97.279 165.711 mo(\001)sh97.279 165.714 mo(\001)sh97.279 165.716 mo(\001)sh97.279 165.719 mo(\001)sh97.279 165.721 mo(\001)sh97.279 165.723 mo(\001)sh97.279 165.725 mo(\001)sh97.279 165.727 mo(\001)sh97.279 165.729 mo(\001)sh97.279 165.731 mo(\001)sh97.279 165.732 mo(\001)sh97.279 165.734 mo(\001)sh97.279 165.736 mo(\001)sh97.279 165.775 mo(\001)sh97.279 166.047 mo(\001)sh97.279 166.052 mo(\001)sh97.279 166.057 mo(\001)sh97.279 166.062 mo(\001)sh97.279 166.067 mo(\001)sh97.279 166.073 mo(\001)sh97.279 166.079 mo(\001)sh97.279 166.085 mo(\001)sh97.279 166.092 mo(\001)sh97.279 166.099 mo(\001)sh97.279 166.106 mo(\001)sh97.279 166.114 mo(\001)sh97.279 166.122 mo(\001)sh97.279 166.13 mo(\001)sh97.279 166.139 mo(\001)sh97.279 166.149 mo(\001)sh97.279 166.159 mo(\001)sh97.279 166.169 mo(\001)sh97.279 166.181 mo(\001)sh97.279 166.193 mo(\001)sh97.279 166.206 mo(\001)sh97.279 166.22 mo(\001)sh97.279 166.234 mo(\001)sh97.279 166.25 mo(\001)sh97.279 166.268 mo(\001)sh97.279 166.286 mo(\001)sh97.279 166.307 mo(\001)sh97.279 166.329 mo(\001)sh97.279 166.353 mo(\001)sh97.279 166.379 mo(\001)sh97.279 166.409 mo(\001)sh97.279 166.441 mo(\001)sh97.279 166.477 mo(\001)sh97.279 166.518 mo(\001)sh97.279 166.564 mo(\001)sh97.279 166.617 mo(\001)sh97.279 166.677 mo(\001)sh97.279 166.747 mo(\001)sh97.279 166.83 mo(\001)sh97.279 166.928 mo(\001)sh97.279 167.045 mo(\001)sh97.279 167.188 mo(\001)sh97.279 167.364 mo(\001)sh97.279 167.585 mo(\001)sh97.279 167.877 mo(\001)sh97.279 168.291 mo(\001)sh97.279 168.937 mo(\001)sh97.279 170.078 mo(\001)sh97.279 172.62 mo(\001)sh97.279 183.949 mo(\001)sh101.958 157.292 mo(\001)sh101.958 161.425 mo(\001)sh101.958 162.345 mo(\001)sh101.958 162.756 mo(\001)sh101.958 162.989 mo(\001)sh101.958 163.14 mo(\001)sh101.958 163.245 mo(\001)sh101.958 163.323 mo(\001)sh101.958 163.382 mo(\001)sh101.958 163.43 mo(\001)sh101.958 163.468 mo(\001)sh101.958 163.499 mo(\001)sh101.958 163.526 mo(\001)sh101.958 163.549 mo(\001)sh101.958 163.568 mo(\001)sh101.958 163.585 mo(\001)sh101.958 163.6 mo(\001)sh101.958 163.613 mo(\001)sh101.958 163.625 mo(\001)sh101.958 163.636 mo(\001)sh101.958 163.645 mo(\001)sh101.958 163.654 mo(\001)sh101.958 163.662 mo(\001)sh101.958 163.669 mo(\001)sh101.958 163.676 mo(\001)sh101.958 163.682 mo(\001)sh101.958 163.688 mo(\001)sh101.958 163.693 mo(\001)sh101.958 163.698 mo(\001)sh101.958 163.703 mo(\001)sh101.958 163.707 mo(\001)sh101.958 163.711 mo(\001)sh101.958 163.715 mo(\001)sh101.958 163.719 mo(\001)sh101.958 163.722 mo(\001)sh101.958 163.726 mo(\001)sh101.958 163.729 mo(\001)sh101.958 163.732 mo(\001)sh101.958 163.734 mo(\001)sh101.958 163.737 mo(\001)sh101.958 163.74 mo(\001)sh101.958 163.742 mo(\001)sh101.958 163.744 mo(\001)sh101.958 163.746 mo(\001)sh101.958 163.749 mo(\001)sh101.958 163.751 mo(\001)sh101.958 163.752 mo(\001)sh101.958 163.754 mo(\001)sh101.958 163.756 mo(\001)sh101.958 163.8 mo(\001)sh101.958 164.101 mo(\001)sh101.958 164.106 mo(\001)sh101.958 164.112 mo(\001)sh101.958 164.118 mo(\001)sh101.958 164.124 mo(\001)sh101.958 164.13 mo(\001)sh101.958 164.137 mo(\001)sh101.958 164.144 mo(\001)sh101.958 164.151 mo(\001)sh101.958 164.159 mo(\001)sh101.958 164.167 mo(\001)sh101.958 164.175 mo(\001)sh101.958 164.184 mo(\001)sh101.958 164.193 mo(\001)sh101.958 164.203 mo(\001)sh101.958 164.214 mo(\001)sh101.958 164.225 mo(\001)sh101.958 164.237 mo(\001)sh101.958 164.249 mo(\001)sh101.958 164.263 mo(\001)sh101.958 164.277 mo(\001)sh101.958 164.293 mo(\001)sh101.958 164.309 mo(\001)sh101.958 164.327 mo(\001)sh101.958 164.346 mo(\001)sh101.958 164.366 mo(\001)sh101.958 164.389 mo(\001)sh101.958 164.413 mo(\001)sh101.958 164.44 mo(\001)sh101.958 164.47 mo(\001)sh101.958 164.502 mo(\001)sh101.958 164.538 mo(\001)sh101.958 164.578 mo(\001)sh101.958 164.623 mo(\001)sh101.958 164.674 mo(\001)sh101.958 164.733 mo(\001)sh101.958 164.8 mo(\001)sh101.958 164.877 mo(\001)sh101.958 164.969 mo(\001)sh101.958 165.078 mo(\001)sh101.958 165.208 mo(\001)sh101.958 165.367 mo(\001)sh101.958 165.562 mo(\001)sh101.958 165.806 mo(\001)sh101.958 166.13 mo(\001)sh101.958 166.589 mo(\001)sh101.958 167.306 mo(\001)sh101.958 168.57 mo(\001)sh101.958 171.389 mo(\001)sh101.958 183.949 mo(\001)sh106.636 154.679 mo(\001)sh106.636 159.217 mo(\001)sh106.636 160.227 mo(\001)sh106.636 160.678 mo(\001)sh106.636 160.935 mo(\001)sh106.636 161.1 mo(\001)sh106.636 161.216 mo(\001)sh106.636 161.301 mo(\001)sh106.636 161.366 mo(\001)sh106.636 161.418 mo(\001)sh106.636 161.46 mo(\001)sh106.636 161.495 mo(\001)sh106.636 161.524 mo(\001)sh106.636 161.548 mo(\001)sh106.636 161.57 mo(\001)sh106.636 161.589 mo(\001)sh106.636 161.605 mo(\001)sh106.636 161.619 mo(\001)sh106.636 161.632 mo(\001)sh106.636 161.644 mo(\001)sh106.636 161.655 mo(\001)sh106.636 161.664 mo(\001)sh106.636 161.673 mo(\001)sh106.636 161.681 mo(\001)sh106.636 161.688 mo(\001)sh106.636 161.695 mo(\001)sh106.636 161.702 mo(\001)sh106.636 161.707 mo(\001)sh106.636 161.713 mo(\001)sh106.636 161.718 mo(\001)sh106.636 161.723 mo(\001)sh106.636 161.727 mo(\001)sh106.636 161.732 mo(\001)sh106.636 161.736 mo(\001)sh106.636 161.739 mo(\001)sh106.636 161.743 mo(\001)sh106.636 161.746 mo(\001)sh106.636 161.75 mo(\001)sh106.636 161.753 mo(\001)sh106.636 161.756 mo(\001)sh106.636 161.758 mo(\001)sh106.636 161.761 mo(\001)sh106.636 161.763 mo(\001)sh106.636 161.766 mo(\001)sh106.636 161.768 mo(\001)sh106.636 161.77 mo(\001)sh106.636 161.772 mo(\001)sh106.636 161.774 mo(\001)sh106.636 161.776 mo(\001)sh106.636 161.824 mo(\001)sh106.636 162.155 mo(\001)sh106.636 162.161 mo(\001)sh106.636 162.167 mo(\001)sh106.636 162.173 mo(\001)sh106.636 162.18 mo(\001)sh106.636 162.187 mo(\001)sh106.636 162.194 mo(\001)sh106.636 162.202 mo(\001)sh106.636 162.21 mo(\001)sh106.636 162.218 mo(\001)sh106.636 162.227 mo(\001)sh106.636 162.237 mo(\001)sh106.636 162.246 mo(\001)sh106.636 162.257 mo(\001)sh106.636 162.268 mo(\001)sh106.636 162.279 mo(\001)sh106.636 162.291 mo(\001)sh106.636 162.304 mo(\001)sh106.636 162.318 mo(\001)sh106.636 162.333 mo(\001)sh106.636 162.349 mo(\001)sh106.636 162.365 mo(\001)sh106.636 162.384 mo(\001)sh106.636 162.403 mo(\001)sh106.636 162.424 mo(\001)sh106.636 162.447 mo(\001)sh106.636 162.471 mo(\001)sh106.636 162.498 mo(\001)sh106.636 162.528 mo(\001)sh106.636 162.56 mo(\001)sh106.636 162.595 mo(\001)sh106.636 162.635 mo(\001)sh106.636 162.679 mo(\001)sh106.636 162.729 mo(\001)sh106.636 162.785 mo(\001)sh106.636 162.849 mo(\001)sh106.636 162.922 mo(\001)sh106.636 163.008 mo(\001)sh106.636 163.108 mo(\001)sh106.636 163.227 mo(\001)sh106.636 163.371 mo(\001)sh106.636 163.545 mo(\001)sh106.636 163.759 mo(\001)sh106.636 164.028 mo(\001)sh106.636 164.383 mo(\001)sh106.636 164.887 mo(\001)sh106.636 165.674 mo(\001)sh106.636 167.062 mo(\001)sh106.636 170.157 mo(\001)sh106.636 183.949 mo(\001)sh111.314 152.066 mo(\001)sh111.314 157.009 mo(\001)sh111.314 158.109 mo(\001)sh111.314 158.6 mo(\001)sh111.314 158.88 mo(\001)sh111.314 159.06 mo(\001)sh111.314 159.186 mo(\001)sh111.314 159.279 mo(\001)sh111.314 159.35 mo(\001)sh111.314 159.406 mo(\001)sh111.314 159.452 mo(\001)sh111.314 159.49 mo(\001)sh111.314 159.521 mo(\001)sh111.314 159.548 mo(\001)sh111.314 159.572 mo(\001)sh111.314 159.592 mo(\001)sh111.314 159.61 mo(\001)sh111.314 159.626 mo(\001)sh111.314 159.64 mo(\001)sh111.314 159.653 mo(\001)sh111.314 159.664 mo(\001)sh111.314 159.674 mo(\001)sh111.314 159.684 mo(\001)sh111.314 159.693 mo(\001)sh111.314 159.701 mo(\001)sh111.314 159.708 mo(\001)sh111.314 159.715 mo(\001)sh111.314 159.722 mo(\001)sh111.314 159.728 mo(\001)sh111.314 159.733 mo(\001)sh111.314 159.738 mo(\001)sh111.314 159.743 mo(\001)sh111.314 159.748 mo(\001)sh111.314 159.752 mo(\001)sh111.314 159.756 mo(\001)sh111.314 159.76 mo(\001)sh111.314 159.764 mo(\001)sh111.314 159.768 mo(\001)sh111.314 159.771 mo(\001)sh111.314 159.774 mo(\001)sh111.314 159.777 mo(\001)sh111.314 159.78 mo(\001)sh111.314 159.783 mo(\001)sh111.314 159.785 mo(\001)sh111.314 159.788 mo(\001)sh111.314 159.79 mo(\001)sh111.314 159.792 mo(\001)sh111.314 159.795 mo(\001)sh111.314 159.797 mo(\001)sh111.314 159.849 mo(\001)sh111.314 160.209 mo(\001)sh111.314 160.215 mo(\001)sh111.314 160.222 mo(\001)sh111.314 160.229 mo(\001)sh111.314 160.236 mo(\001)sh111.314 160.244 mo(\001)sh111.314 160.252 mo(\001)sh111.314 160.26 mo(\001)sh111.314 160.269 mo(\001)sh111.314 160.278 mo(\001)sh111.314 160.288 mo(\001)sh111.314 160.298 mo(\001)sh111.314 160.309 mo(\001)sh111.314 160.32 mo(\001)sh111.314 160.332 mo(\001)sh111.314 160.344 mo(\001)sh111.314 160.358 mo(\001)sh111.314 160.372 mo(\001)sh111.314 160.387 mo(\001)sh111.314 160.403 mo(\001)sh111.314 160.42 mo(\001)sh111.314 160.438 mo(\001)sh111.314 160.458 mo(\001)sh111.314 160.479 mo(\001)sh111.314 160.502 mo(\001)sh111.314 160.527 mo(\001)sh111.314 160.554 mo(\001)sh111.314 160.583 mo(\001)sh111.314 160.615 mo(\001)sh111.314 160.65 mo(\001)sh111.314 160.689 mo(\001)sh111.314 160.732 mo(\001)sh111.314 160.78 mo(\001)sh111.314 160.834 mo(\001)sh111.314 160.895 mo(\001)sh111.314 160.965 mo(\001)sh111.314 161.045 mo(\001)sh111.314 161.138 mo(\001)sh111.314 161.247 mo(\001)sh111.314 161.377 mo(\001)sh111.314 161.533 mo(\001)sh111.314 161.723 mo(\001)sh111.314 161.956 mo(\001)sh111.314 162.249 mo(\001)sh111.314 162.636 mo(\001)sh111.314 163.185 mo(\001)sh111.314 164.042 mo(\001)sh111.314 165.555 mo(\001)sh111.314 168.926 mo(\001)sh111.314 183.949 mo(\001)sh115.992 149.452 mo(\001)sh115.992 154.8 mo(\001)sh115.992 155.99 mo(\001)sh115.992 156.523 mo(\001)sh115.992 156.825 mo(\001)sh115.992 157.02 mo(\001)sh115.992 157.156 mo(\001)sh115.992 157.256 mo(\001)sh115.992 157.333 mo(\001)sh115.992 157.394 mo(\001)sh115.992 157.444 mo(\001)sh115.992 157.485 mo(\001)sh115.992 157.519 mo(\001)sh115.992 157.548 mo(\001)sh115.992 157.574 mo(\001)sh115.992 157.596 mo(\001)sh115.992 157.615 mo(\001)sh115.992 157.632 mo(\001)sh115.992 157.647 mo(\001)sh115.992 157.661 mo(\001)sh115.992 157.673 mo(\001)sh115.992 157.685 mo(\001)sh115.992 157.695 mo(\001)sh115.992 157.705 mo(\001)sh115.992 157.713 mo(\001)sh115.992 157.721 mo(\001)sh115.992 157.729 mo(\001)sh115.992 157.736 mo(\001)sh115.992 157.742 mo(\001)sh115.992 157.748 mo(\001)sh115.992 157.754 mo(\001)sh115.992 157.759 mo(\001)sh115.992 157.764 mo(\001)sh115.992 157.769 mo(\001)sh115.992 157.773 mo(\001)sh115.992 157.778 mo(\001)sh115.992 157.782 mo(\001)sh115.992 157.785 mo(\001)sh115.992 157.789 mo(\001)sh115.992 157.792 mo(\001)sh115.992 157.796 mo(\001)sh115.992 157.799 mo(\001)sh115.992 157.802 mo(\001)sh115.992 157.805 mo(\001)sh115.992 157.807 mo(\001)sh115.992 157.81 mo(\001)sh115.992 157.812 mo(\001)sh115.992 157.815 mo(\001)sh115.992 157.817 mo(\001)sh115.992 157.873 mo(\001)sh115.992 158.263 mo(\001)sh115.992 158.27 mo(\001)sh115.992 158.277 mo(\001)sh115.992 158.285 mo(\001)sh115.992 158.293 mo(\001)sh115.992 158.301 mo(\001)sh115.992 158.31 mo(\001)sh115.992 158.319 mo(\001)sh115.992 158.328 mo(\001)sh115.992 158.338 mo(\001)sh115.992 158.348 mo(\001)sh115.992 158.359 mo(\001)sh115.992 158.371 mo(\001)sh115.992 158.383 mo(\001)sh115.992 158.396 mo(\001)sh115.992 158.409 mo(\001)sh115.992 158.424 mo(\001)sh115.992 158.439 mo(\001)sh115.992 158.456 mo(\001)sh115.992 158.473 mo(\001)sh115.992 158.491 mo(\001)sh115.992 158.511 mo(\001)sh115.992 158.533 mo(\001)sh115.992 158.555 mo(\001)sh115.992 158.58 mo(\001)sh115.992 158.607 mo(\001)sh115.992 158.636 mo(\001)sh115.992 158.668 mo(\001)sh115.992 158.702 mo(\001)sh115.992 158.74 mo(\001)sh115.992 158.782 mo(\001)sh115.992 158.829 mo(\001)sh115.992 158.881 mo(\001)sh115.992 158.939 mo(\001)sh115.992 159.005 mo(\001)sh115.992 159.081 mo(\001)sh115.992 159.167 mo(\001)sh115.992 159.268 mo(\001)sh115.992 159.387 mo(\001)sh115.992 159.527 mo(\001)sh115.992 159.696 mo(\001)sh115.992 159.901 mo(\001)sh115.992 160.153 mo(\001)sh115.992 160.47 mo(\001)sh115.992 160.889 mo(\001)sh115.992 161.483 mo(\001)sh115.992 162.41 mo(\001)sh115.992 164.047 mo(\001)sh115.992 167.695 mo(\001)sh115.992 183.949 mo(\001)sh120.67 146.839 mo(\001)sh120.67 152.592 mo(\001)sh120.67 153.872 mo(\001)sh120.67 154.445 mo(\001)sh120.67 154.77 mo(\001)sh120.67 154.98 mo(\001)sh120.67 155.126 mo(\001)sh120.67 155.234 mo(\001)sh120.67 155.317 mo(\001)sh120.67 155.383 mo(\001)sh120.67 155.436 mo(\001)sh120.67 155.48 mo(\001)sh120.67 155.517 mo(\001)sh120.67 155.548 mo(\001)sh120.67 155.576 mo(\001)sh120.67 155.599 mo(\001)sh120.67 155.62 mo(\001)sh120.67 155.638 mo(\001)sh120.67 155.655 mo(\001)sh120.67 155.67 mo(\001)sh120.67 155.683 mo(\001)sh120.67 155.695 mo(\001)sh120.67 155.706 mo(\001)sh120.67 155.716 mo(\001)sh120.67 155.726 mo(\001)sh120.67 155.734 mo(\001)sh120.67 155.742 mo(\001)sh120.67 155.75 mo(\001)sh120.67 155.757 mo(\001)sh120.67 155.763 mo(\001)sh120.67 155.77 mo(\001)sh120.67 155.775 mo(\001)sh120.67 155.781 mo(\001)sh120.67 155.786 mo(\001)sh120.67 155.79 mo(\001)sh120.67 155.795 mo(\001)sh120.67 155.799 mo(\001)sh120.67 155.803 mo(\001)sh120.67 155.807 mo(\001)sh120.67 155.811 mo(\001)sh120.67 155.814 mo(\001)sh120.67 155.818 mo(\001)sh120.67 155.821 mo(\001)sh120.67 155.824 mo(\001)sh120.67 155.827 mo(\001)sh120.67 155.83 mo(\001)sh120.67 155.832 mo(\001)sh120.67 155.835 mo(\001)sh120.67 155.837 mo(\001)sh120.67 155.898 mo(\001)sh120.67 156.317 mo(\001)sh120.67 156.325 mo(\001)sh120.67 156.333 mo(\001)sh120.67 156.341 mo(\001)sh120.67 156.349 mo(\001)sh120.67 156.358 mo(\001)sh120.67 156.367 mo(\001)sh120.67 156.377 mo(\001)sh120.67 156.387 mo(\001)sh120.67 156.398 mo(\001)sh120.67 156.409 mo(\001)sh120.67 156.421 mo(\001)sh120.67 156.433 mo(\001)sh120.67 156.446 mo(\001)sh120.67 156.46 mo(\001)sh120.67 156.475 mo(\001)sh120.67 156.49 mo(\001)sh120.67 156.507 mo(\001)sh120.67 156.524 mo(\001)sh120.67 156.543 mo(\001)sh120.67 156.563 mo(\001)sh120.67 156.584 mo(\001)sh120.67 156.607 mo(\001)sh120.67 156.632 mo(\001)sh120.67 156.658 mo(\001)sh120.67 156.687 mo(\001)sh120.67 156.718 mo(\001)sh120.67 156.752 mo(\001)sh120.67 156.79 mo(\001)sh120.67 156.831 mo(\001)sh120.67 156.876 mo(\001)sh120.67 156.926 mo(\001)sh120.67 156.982 mo(\001)sh120.67 157.045 mo(\001)sh120.67 157.116 mo(\001)sh120.67 157.197 mo(\001)sh120.67 157.29 mo(\001)sh120.67 157.398 mo(\001)sh120.67 157.526 mo(\001)sh120.67 157.677 mo(\001)sh120.67 157.859 mo(\001)sh120.67 158.079 mo(\001)sh120.67 158.351 mo(\001)sh120.67 158.692 mo(\001)sh120.67 159.142 mo(\001)sh120.67 159.782 mo(\001)sh120.67 160.779 mo(\001)sh120.67 162.539 mo(\001)sh120.67 166.463 mo(\001)sh120.67 183.949 mo(\001)sh125.349 144.226 mo(\001)sh125.349 150.384 mo(\001)sh125.349 151.754 mo(\001)sh125.349 152.367 mo(\001)sh125.349 152.715 mo(\001)sh125.349 152.94 mo(\001)sh125.349 153.096 mo(\001)sh125.349 153.212 mo(\001)sh125.349 153.301 mo(\001)sh125.349 153.371 mo(\001)sh125.349 153.428 mo(\001)sh125.349 153.475 mo(\001)sh125.349 153.515 mo(\001)sh125.349 153.548 mo(\001)sh125.349 153.577 mo(\001)sh125.349 153.603 mo(\001)sh125.349 153.625 mo(\001)sh125.349 153.645 mo(\001)sh125.349 153.662 mo(\001)sh125.349 153.678 mo(\001)sh125.349 153.692 mo(\001)sh125.349 153.705 mo(\001)sh125.349 153.717 mo(\001)sh125.349 153.728 mo(\001)sh125.349 153.738 mo(\001)sh125.349 153.747 mo(\001)sh125.349 153.756 mo(\001)sh125.349 153.764 mo(\001)sh125.349 153.772 mo(\001)sh125.349 153.779 mo(\001)sh125.349 153.785 mo(\001)sh125.349 153.791 mo(\001)sh125.349 153.797 mo(\001)sh125.349 153.802 mo(\001)sh125.349 153.808 mo(\001)sh125.349 153.812 mo(\001)sh125.349 153.817 mo(\001)sh125.349 153.821 mo(\001)sh125.349 153.825 mo(\001)sh125.349 153.829 mo(\001)sh125.349 153.833 mo(\001)sh125.349 153.837 mo(\001)sh125.349 153.84 mo(\001)sh125.349 153.843 mo(\001)sh125.349 153.846 mo(\001)sh125.349 153.849 mo(\001)sh125.349 153.852 mo(\001)sh125.349 153.855 mo(\001)sh125.349 153.858 mo(\001)sh125.349 153.923 mo(\001)sh125.349 154.371 mo(\001)sh125.349 154.379 mo(\001)sh125.349 154.388 mo(\001)sh125.349 154.396 mo(\001)sh125.349 154.405 mo(\001)sh125.349 154.415 mo(\001)sh125.349 154.425 mo(\001)sh125.349 154.435 mo(\001)sh125.349 154.446 mo(\001)sh125.349 154.457 mo(\001)sh125.349 154.469 mo(\001)sh125.349 154.482 mo(\001)sh125.349 154.495 mo(\001)sh125.349 154.509 mo(\001)sh125.349 154.524 mo(\001)sh125.349 154.54 mo(\001)sh125.349 154.556 mo(\001)sh125.349 154.574 mo(\001)sh125.349 154.593 mo(\001)sh125.349 154.613 mo(\001)sh125.349 154.634 mo(\001)sh125.349 154.657 mo(\001)sh125.349 154.682 mo(\001)sh125.349 154.708 mo(\001)sh125.349 154.736 mo(\001)sh125.349 154.767 mo(\001)sh125.349 154.801 mo(\001)sh125.349 154.837 mo(\001)sh125.349 154.877 mo(\001)sh125.349 154.921 mo(\001)sh125.349 154.969 mo(\001)sh125.349 155.023 mo(\001)sh125.349 155.083 mo(\001)sh125.349 155.15 mo(\001)sh125.349 155.226 mo(\001)sh125.349 155.313 mo(\001)sh125.349 155.413 mo(\001)sh125.349 155.529 mo(\001)sh125.349 155.665 mo(\001)sh125.349 155.827 mo(\001)sh125.349 156.021 mo(\001)sh125.349 156.258 mo(\001)sh125.349 156.548 mo(\001)sh125.349 156.913 mo(\001)sh125.349 157.395 mo(\001)sh125.349 158.08 mo(\001)sh125.349 159.147 mo(\001)sh125.349 161.032 mo(\001)sh125.349 165.232 mo(\001)sh125.349 183.949 mo(\001)sh130.027 141.612 mo(\001)sh130.027 148.176 mo(\001)sh130.027 149.636 mo(\001)sh130.027 150.289 mo(\001)sh130.027 150.66 mo(\001)sh130.027 150.9 mo(\001)sh130.027 151.067 mo(\001)sh130.027 151.19 mo(\001)sh130.027 151.284 mo(\001)sh130.027 151.359 mo(\001)sh130.027 151.42 mo(\001)sh130.027 151.47 mo(\001)sh130.027 151.512 mo(\001)sh130.027 151.548 mo(\001)sh130.027 151.579 mo(\001)sh130.027 151.606 mo(\001)sh130.027 151.63 mo(\001)sh130.027 151.651 mo(\001)sh130.027 151.67 mo(\001)sh130.027 151.687 mo(\001)sh130.027 151.702 mo(\001)sh130.027 151.716 mo(\001)sh130.027 151.728 mo(\001)sh130.027 151.74 mo(\001)sh130.027 151.751 mo(\001)sh130.027 151.761 mo(\001)sh130.027 151.77 mo(\001)sh130.027 151.778 mo(\001)sh130.027 151.786 mo(\001)sh130.027 151.794 mo(\001)sh130.027 151.801 mo(\001)sh130.027 151.807 mo(\001)sh130.027 151.813 mo(\001)sh130.027 151.819 mo(\001)sh130.027 151.825 mo(\001)sh130.027 151.83 mo(\001)sh130.027 151.835 mo(\001)sh130.027 151.839 mo(\001)sh130.027 151.844 mo(\001)sh130.027 151.848 mo(\001)sh130.027 151.852 mo(\001)sh130.027 151.856 mo(\001)sh130.027 151.859 mo(\001)sh130.027 151.863 mo(\001)sh130.027 151.866 mo(\001)sh130.027 151.869 mo(\001)sh130.027 151.872 mo(\001)sh130.027 151.875 mo(\001)sh130.027 151.878 mo(\001)sh130.027 151.947 mo(\001)sh130.027 152.426 mo(\001)sh130.027 152.434 mo(\001)sh130.027 152.443 mo(\001)sh130.027 152.452 mo(\001)sh130.027 152.462 mo(\001)sh130.027 152.472 mo(\001)sh130.027 152.482 mo(\001)sh130.027 152.494 mo(\001)sh130.027 152.505 mo(\001)sh130.027 152.517 mo(\001)sh130.027 152.53 mo(\001)sh130.027 152.543 mo(\001)sh130.027 152.558 mo(\001)sh130.027 152.573 mo(\001)sh130.027 152.588 mo(\001)sh130.027 152.605 mo(\001)sh130.027 152.623 mo(\001)sh130.027 152.642 mo(\001)sh130.027 152.662 mo(\001)sh130.027 152.683 mo(\001)sh130.027 152.706 mo(\001)sh130.027 152.73 mo(\001)sh130.027 152.756 mo(\001)sh130.027 152.784 mo(\001)sh130.027 152.815 mo(\001)sh130.027 152.847 mo(\001)sh130.027 152.883 mo(\001)sh130.027 152.922 mo(\001)sh130.027 152.964 mo(\001)sh130.027 153.011 mo(\001)sh130.027 153.063 mo(\001)sh130.027 153.12 mo(\001)sh130.027 153.184 mo(\001)sh130.027 153.255 mo(\001)sh130.027 153.336 mo(\001)sh130.027 153.429 mo(\001)sh130.027 153.535 mo(\001)sh130.027 153.659 mo(\001)sh130.027 153.804 mo(\001)sh130.027 153.977 mo(\001)sh130.027 154.184 mo(\001)sh130.027 154.436 mo(\001)sh130.027 154.745 mo(\001)sh130.027 155.134 mo(\001)sh130.027 155.648 mo(\001)sh130.027 156.378 mo(\001)sh130.027 157.515 mo(\001)sh130.027 159.524 mo(\001)sh130.027 164.001 mo(\001)sh130.027 183.949 mo(\001)sh134.705 138.999 mo(\001)sh134.705 145.968 mo(\001)sh134.705 147.518 mo(\001)sh134.705 148.212 mo(\001)sh134.705 148.606 mo(\001)sh134.705 148.86 mo(\001)sh134.705 149.037 mo(\001)sh134.705 149.168 mo(\001)sh134.705 149.268 mo(\001)sh134.705 149.348 mo(\001)sh134.705 149.412 mo(\001)sh134.705 149.465 mo(\001)sh134.705 149.51 mo(\001)sh134.705 149.548 mo(\001)sh134.705 149.581 mo(\001)sh134.705 149.61 mo(\001)sh134.705 149.635 mo(\001)sh134.705 149.657 mo(\001)sh134.705 149.677 mo(\001)sh134.705 149.695 mo(\001)sh134.705 149.711 mo(\001)sh134.705 149.726 mo(\001)sh134.705 149.739 mo(\001)sh134.705 149.752 mo(\001)sh134.705 149.763 mo(\001)sh134.705 149.774 mo(\001)sh134.705 149.783 mo(\001)sh134.705 149.792 mo(\001)sh134.705 149.801 mo(\001)sh134.705 149.809 mo(\001)sh134.705 149.816 mo(\001)sh134.705 149.823 mo(\001)sh134.705 149.83 mo(\001)sh134.705 149.836 mo(\001)sh134.705 149.842 mo(\001)sh134.705 149.847 mo(\001)sh134.705 149.852 mo(\001)sh134.705 149.857 mo(\001)sh134.705 149.862 mo(\001)sh134.705 149.866 mo(\001)sh134.705 149.87 mo(\001)sh134.705 149.874 mo(\001)sh134.705 149.878 mo(\001)sh134.705 149.882 mo(\001)sh134.705 149.886 mo(\001)sh134.705 149.889 mo(\001)sh134.705 149.892 mo(\001)sh134.705 149.895 mo(\001)sh134.705 149.898 mo(\001)sh134.705 149.972 mo(\001)sh134.705 150.48 mo(\001)sh134.705 150.489 mo(\001)sh134.705 150.498 mo(\001)sh134.705 150.508 mo(\001)sh134.705 150.518 mo(\001)sh134.705 150.529 mo(\001)sh134.705 150.54 mo(\001)sh134.705 150.552 mo(\001)sh134.705 150.564 mo(\001)sh134.705 150.577 mo(\001)sh134.705 150.591 mo(\001)sh134.705 150.605 mo(\001)sh134.705 150.62 mo(\001)sh134.705 150.636 mo(\001)sh134.705 150.653 mo(\001)sh134.705 150.67 mo(\001)sh134.705 150.689 mo(\001)sh134.705 150.709 mo(\001)sh134.705 150.73 mo(\001)sh134.705 150.753 mo(\001)sh134.705 150.777 mo(\001)sh134.705 150.803 mo(\001)sh134.705 150.831 mo(\001)sh134.705 150.86 mo(\001)sh134.705 150.893 mo(\001)sh134.705 150.928 mo(\001)sh134.705 150.965 mo(\001)sh134.705 151.007 mo(\001)sh134.705 151.052 mo(\001)sh134.705 151.101 mo(\001)sh134.705 151.156 mo(\001)sh134.705 151.217 mo(\001)sh134.705 151.284 mo(\001)sh134.705 151.361 mo(\001)sh134.705 151.447 mo(\001)sh134.705 151.545 mo(\001)sh134.705 151.658 mo(\001)sh134.705 151.789 mo(\001)sh134.705 151.943 mo(\001)sh134.705 152.127 mo(\001)sh134.705 152.347 mo(\001)sh134.705 152.614 mo(\001)sh134.705 152.943 mo(\001)sh134.705 153.356 mo(\001)sh134.705 153.901 mo(\001)sh134.705 154.676 mo(\001)sh134.705 155.884 mo(\001)sh134.705 158.016 mo(\001)sh134.705 162.769 mo(\001)sh134.705 183.949 mo(\001)sh139.383 136.385 mo(\001)sh139.383 143.759 mo(\001)sh139.383 145.4 mo(\001)sh139.383 146.134 mo(\001)sh139.383 146.551 mo(\001)sh139.383 146.819 mo(\001)sh139.383 147.007 mo(\001)sh139.383 147.146 mo(\001)sh139.383 147.252 mo(\001)sh139.383 147.336 mo(\001)sh139.383 147.404 mo(\001)sh139.383 147.461 mo(\001)sh139.383 147.508 mo(\001)sh139.383 147.548 mo(\001)sh139.383 147.583 mo(\001)sh139.383 147.613 mo(\001)sh139.383 147.64 mo(\001)sh139.383 147.664 mo(\001)sh139.383 147.685 mo(\001)sh139.383 147.704 mo(\001)sh139.383 147.721 mo(\001)sh139.383 147.736 mo(\001)sh139.383 147.75 mo(\001)sh139.383 147.764 mo(\001)sh139.383 147.776 mo(\001)sh139.383 147.787 mo(\001)sh139.383 147.797 mo(\001)sh139.383 147.807 mo(\001)sh139.383 147.815 mo(\001)sh139.383 147.824 mo(\001)sh139.383 147.832 mo(\001)sh139.383 147.839 mo(\001)sh139.383 147.846 mo(\001)sh139.383 147.852 mo(\001)sh139.383 147.859 mo(\001)sh139.383 147.864 mo(\001)sh139.383 147.87 mo(\001)sh139.383 147.875 mo(\001)sh139.383 147.88 mo(\001)sh139.383 147.885 mo(\001)sh139.383 147.889 mo(\001)sh139.383 147.893 mo(\001)sh139.383 147.897 mo(\001)sh139.383 147.901 mo(\001)sh139.383 147.905 mo(\001)sh139.383 147.909 mo(\001)sh139.383 147.912 mo(\001)sh139.383 147.915 mo(\001)sh139.383 147.918 mo(\001)sh139.383 147.996 mo(\001)sh139.383 148.534 mo(\001)sh139.383 148.543 mo(\001)sh139.383 148.553 mo(\001)sh139.383 148.564 mo(\001)sh139.383 148.575 mo(\001)sh139.383 148.586 mo(\001)sh139.383 148.598 mo(\001)sh139.383 148.61 mo(\001)sh139.383 148.623 mo(\001)sh139.383 148.637 mo(\001)sh139.383 148.651 mo(\001)sh139.383 148.666 mo(\001)sh139.383 148.682 mo(\001)sh139.383 148.699 mo(\001)sh139.383 148.717 mo(\001)sh139.383 148.735 mo(\001)sh139.383 148.755 mo(\001)sh139.383 148.776 mo(\001)sh139.383 148.799 mo(\001)sh139.383 148.823 mo(\001)sh139.383 148.848 mo(\001)sh139.383 148.876 mo(\001)sh139.383 148.905 mo(\001)sh139.383 148.937 mo(\001)sh139.383 148.971 mo(\001)sh139.383 149.008 mo(\001)sh139.383 149.048 mo(\001)sh139.383 149.091 mo(\001)sh139.383 149.139 mo(\001)sh139.383 149.192 mo(\001)sh139.383 149.249 mo(\001)sh139.383 149.314 mo(\001)sh139.383 149.385 mo(\001)sh139.383 149.466 mo(\001)sh139.383 149.557 mo(\001)sh139.383 149.661 mo(\001)sh139.383 149.781 mo(\001)sh139.383 149.919 mo(\001)sh139.383 150.083 mo(\001)sh139.383 150.277 mo(\001)sh139.383 150.509 mo(\001)sh139.383 150.792 mo(\001)sh139.383 151.14 mo(\001)sh139.383 151.577 mo(\001)sh139.383 152.154 mo(\001)sh139.383 152.974 mo(\001)sh139.383 154.252 mo(\001)sh139.383 156.508 mo(\001)sh139.383 161.538 mo(\001)sh139.383 183.949 mo(\001)sh144.061 133.772 mo(\001)sh144.061 141.551 mo(\001)sh144.061 143.282 mo(\001)sh144.061 144.056 mo(\001)sh144.061 144.496 mo(\001)sh144.061 144.779 mo(\001)sh144.061 144.977 mo(\001)sh144.061 145.123 mo(\001)sh144.061 145.236 mo(\001)sh144.061 145.324 mo(\001)sh144.061 145.396 mo(\001)sh144.061 145.456 mo(\001)sh144.061 145.506 mo(\001)sh144.061 145.548 mo(\001)sh144.061 145.585 mo(\001)sh144.061 145.617 mo(\001)sh144.061 145.645 mo(\001)sh144.061 145.67 mo(\001)sh144.061 145.692 mo(\001)sh144.061 145.712 mo(\001)sh144.061 145.73 mo(\001)sh144.061 145.747 mo(\001)sh144.061 145.762 mo(\001)sh144.061 145.775 mo(\001)sh144.061 145.788 mo(\001)sh144.061 145.8 mo(\001)sh144.061 145.811 mo(\001)sh144.061 145.821 mo(\001)sh144.061 145.83 mo(\001)sh144.061 145.839 mo(\001)sh144.061 145.847 mo(\001)sh144.061 145.855 mo(\001)sh144.061 145.862 mo(\001)sh144.061 145.869 mo(\001)sh144.061 145.876 mo(\001)sh144.061 145.882 mo(\001)sh144.061 145.887 mo(\001)sh144.061 145.893 mo(\001)sh144.061 145.898 mo(\001)sh144.061 145.903 mo(\001)sh144.061 145.908 mo(\001)sh144.061 145.912 mo(\001)sh144.061 145.917 mo(\001)sh144.061 145.921 mo(\001)sh144.061 145.925 mo(\001)sh144.061 145.928 mo(\001)sh144.061 145.932 mo(\001)sh144.061 145.935 mo(\001)sh144.061 145.939 mo(\001)sh144.061 146.021 mo(\001)sh144.061 146.588 mo(\001)sh144.061 146.598 mo(\001)sh144.061 146.608 mo(\001)sh144.061 146.619 mo(\001)sh144.061 146.631 mo(\001)sh144.061 146.643 mo(\001)sh144.061 146.655 mo(\001)sh144.061 146.668 mo(\001)sh144.061 146.682 mo(\001)sh144.061 146.697 mo(\001)sh144.061 146.712 mo(\001)sh144.061 146.728 mo(\001)sh144.061 146.744 mo(\001)sh144.061 146.762 mo(\001)sh144.061 146.781 mo(\001)sh144.061 146.801 mo(\001)sh144.061 146.822 mo(\001)sh144.061 146.844 mo(\001)sh144.061 146.868 mo(\001)sh144.061 146.893 mo(\001)sh144.061 146.92 mo(\001)sh144.061 146.949 mo(\001)sh144.061 146.98 mo(\001)sh144.061 147.013 mo(\001)sh144.061 147.049 mo(\001)sh144.061 147.088 mo(\001)sh144.061 147.13 mo(\001)sh144.061 147.176 mo(\001)sh144.061 147.226 mo(\001)sh144.061 147.282 mo(\001)sh144.061 147.343 mo(\001)sh144.061 147.411 mo(\001)sh144.061 147.486 mo(\001)sh144.061 147.571 mo(\001)sh144.061 147.667 mo(\001)sh144.061 147.777 mo(\001)sh144.061 147.903 mo(\001)sh144.061 148.05 mo(\001)sh144.061 148.222 mo(\001)sh144.061 148.426 mo(\001)sh144.061 148.672 mo(\001)sh144.061 148.97 mo(\001)sh144.061 149.337 mo(\001)sh144.061 149.798 mo(\001)sh144.061 150.407 mo(\001)sh144.061 151.272 mo(\001)sh144.061 152.62 mo(\001)sh144.061 155.001 mo(\001)sh144.061 160.306 mo(\001)sh144.061 183.949 mo(\001)sh148.74 131.159 mo(\001)sh148.74 139.343 mo(\001)sh148.74 141.164 mo(\001)sh148.74 141.978 mo(\001)sh148.74 142.441 mo(\001)sh148.74 142.739 mo(\001)sh148.74 142.948 mo(\001)sh148.74 143.101 mo(\001)sh148.74 143.219 mo(\001)sh148.74 143.313 mo(\001)sh148.74 143.388 mo(\001)sh148.74 143.451 mo(\001)sh148.74 143.503 mo(\001)sh148.74 143.548 mo(\001)sh148.74 143.587 mo(\001)sh148.74 143.62 mo(\001)sh148.74 143.65 mo(\001)sh148.74 143.676 mo(\001)sh148.74 143.699 mo(\001)sh148.74 143.721 mo(\001)sh148.74 143.74 mo(\001)sh148.74 143.757 mo(\001)sh148.74 143.773 mo(\001)sh148.74 143.787 mo(\001)sh148.74 143.8 mo(\001)sh148.74 143.813 mo(\001)sh148.74 143.824 mo(\001)sh148.74 143.835 mo(\001)sh148.74 143.845 mo(\001)sh148.74 143.854 mo(\001)sh148.74 143.863 mo(\001)sh148.74 143.871 mo(\001)sh148.74 143.879 mo(\001)sh148.74 143.886 mo(\001)sh148.74 143.893 mo(\001)sh148.74 143.899 mo(\001)sh148.74 143.905 mo(\001)sh148.74 143.911 mo(\001)sh148.74 143.916 mo(\001)sh148.74 143.922 mo(\001)sh148.74 143.927 mo(\001)sh148.74 143.931 mo(\001)sh148.74 143.936 mo(\001)sh148.74 143.94 mo(\001)sh148.74 143.944 mo(\001)sh148.74 143.948 mo(\001)sh148.74 143.952 mo(\001)sh148.74 143.956 mo(\001)sh148.74 143.959 mo(\001)sh148.74 144.046 mo(\001)sh148.74 144.642 mo(\001)sh148.74 144.653 mo(\001)sh148.74 144.664 mo(\001)sh148.74 144.675 mo(\001)sh148.74 144.687 mo(\001)sh148.74 144.7 mo(\001)sh148.74 144.713 mo(\001)sh148.74 144.727 mo(\001)sh148.74 144.741 mo(\001)sh148.74 144.756 mo(\001)sh148.74 144.772 mo(\001)sh148.74 144.789 mo(\001)sh148.74 144.807 mo(\001)sh148.74 144.825 mo(\001)sh148.74 144.845 mo(\001)sh148.74 144.866 mo(\001)sh148.74 144.888 mo(\001)sh148.74 144.911 mo(\001)sh148.74 144.936 mo(\001)sh148.74 144.963 mo(\001)sh148.74 144.991 mo(\001)sh148.74 145.022 mo(\001)sh148.74 145.054 mo(\001)sh148.74 145.089 mo(\001)sh148.74 145.127 mo(\001)sh148.74 145.168 mo(\001)sh148.74 145.212 mo(\001)sh148.74 145.261 mo(\001)sh148.74 145.314 mo(\001)sh148.74 145.372 mo(\001)sh148.74 145.436 mo(\001)sh148.74 145.508 mo(\001)sh148.74 145.587 mo(\001)sh148.74 145.677 mo(\001)sh148.74 145.778 mo(\001)sh148.74 145.893 mo(\001)sh148.74 146.026 mo(\001)sh148.74 146.18 mo(\001)sh148.74 146.361 mo(\001)sh148.74 146.576 mo(\001)sh148.74 146.835 mo(\001)sh148.74 147.149 mo(\001)sh148.74 147.535 mo(\001)sh148.74 148.02 mo(\001)sh148.74 148.66 mo(\001)sh148.74 149.57 mo(\001)sh148.74 150.988 mo(\001)sh148.74 153.493 mo(\001)sh148.74 159.075 mo(\001)sh148.74 183.949 mo(\001)sh153.418 128.545 mo(\001)sh153.418 137.135 mo(\001)sh153.418 139.046 mo(\001)sh153.418 139.901 mo(\001)sh153.418 140.386 mo(\001)sh153.418 140.699 mo(\001)sh153.418 140.918 mo(\001)sh153.418 141.079 mo(\001)sh153.418 141.203 mo(\001)sh153.418 141.301 mo(\001)sh153.418 141.38 mo(\001)sh153.418 141.446 mo(\001)sh153.418 141.501 mo(\001)sh153.418 141.548 mo(\001)sh153.418 141.589 mo(\001)sh153.418 141.624 mo(\001)sh153.418 141.655 mo(\001)sh153.418 141.682 mo(\001)sh153.418 141.707 mo(\001)sh153.418 141.729 mo(\001)sh153.418 141.749 mo(\001)sh153.418 141.767 mo(\001)sh153.418 141.784 mo(\001)sh153.418 141.799 mo(\001)sh153.418 141.813 mo(\001)sh153.418 141.826 mo(\001)sh153.418 141.838 mo(\001)sh153.418 141.849 mo(\001)sh153.418 141.859 mo(\001)sh153.418 141.869 mo(\001)sh153.418 141.878 mo(\001)sh153.418 141.887 mo(\001)sh153.418 141.895 mo(\001)sh153.418 141.902 mo(\001)sh153.418 141.91 mo(\001)sh153.418 141.916 mo(\001)sh153.418 141.923 mo(\001)sh153.418 141.929 mo(\001)sh153.418 141.935 mo(\001)sh153.418 141.94 mo(\001)sh153.418 141.945 mo(\001)sh153.418 141.95 mo(\001)sh153.418 141.955 mo(\001)sh153.418 141.959 mo(\001)sh153.418 141.964 mo(\001)sh153.418 141.968 mo(\001)sh153.418 141.972 mo(\001)sh153.418 141.976 mo(\001)sh153.418 141.979 mo(\001)sh153.418 142.07 mo(\001)sh153.418 142.696 mo(\001)sh153.418 142.707 mo(\001)sh153.418 142.719 mo(\001)sh153.418 142.731 mo(\001)sh153.418 142.744 mo(\001)sh153.418 142.757 mo(\001)sh153.418 142.771 mo(\001)sh153.418 142.785 mo(\001)sh153.418 142.8 mo(\001)sh153.418 142.816 mo(\001)sh153.418 142.833 mo(\001)sh153.418 142.85 mo(\001)sh153.418 142.869 mo(\001)sh153.418 142.889 mo(\001)sh153.418 142.909 mo(\001)sh153.418 142.931 mo(\001)sh153.418 142.954 mo(\001)sh153.418 142.979 mo(\001)sh153.418 143.005 mo(\001)sh153.418 143.033 mo(\001)sh153.418 143.063 mo(\001)sh153.418 143.094 mo(\001)sh153.418 143.129 mo(\001)sh153.418 143.165 mo(\001)sh153.418 143.205 mo(\001)sh153.418 143.248 mo(\001)sh153.418 143.295 mo(\001)sh153.418 143.346 mo(\001)sh153.418 143.401 mo(\001)sh153.418 143.462 mo(\001)sh153.418 143.53 mo(\001)sh153.418 143.605 mo(\001)sh153.418 143.688 mo(\001)sh153.418 143.782 mo(\001)sh153.418 143.888 mo(\001)sh153.418 144.009 mo(\001)sh153.418 144.148 mo(\001)sh153.418 144.31 mo(\001)sh153.418 144.5 mo(\001)sh153.418 144.726 mo(\001)sh153.418 144.997 mo(\001)sh153.418 145.327 mo(\001)sh153.418 145.732 mo(\001)sh153.418 146.241 mo(\001)sh153.418 146.913 mo(\001)sh153.418 147.868 mo(\001)sh153.418 149.357 mo(\001)sh153.418 151.985 mo(\001)sh153.418 157.844 mo(\001)sh153.418 183.949 mo(\001)sh158.096 125.932 mo(\001)sh158.096 134.926 mo(\001)sh158.096 136.928 mo(\001)sh158.096 137.823 mo(\001)sh158.096 138.331 mo(\001)sh158.096 138.659 mo(\001)sh158.096 138.888 mo(\001)sh158.096 139.057 mo(\001)sh158.096 139.187 mo(\001)sh158.096 139.289 mo(\001)sh158.096 139.372 mo(\001)sh158.096 139.441 mo(\001)sh158.096 139.499 mo(\001)sh158.096 139.548 mo(\001)sh158.096 139.591 mo(\001)sh158.096 139.627 mo(\001)sh158.096 139.66 mo(\001)sh158.096 139.689 mo(\001)sh158.096 139.714 mo(\001)sh158.096 139.737 mo(\001)sh158.096 139.758 mo(\001)sh158.096 139.777 mo(\001)sh158.096 139.795 mo(\001)sh158.096 139.811 mo(\001)sh158.096 139.825 mo(\001)sh158.096 139.839 mo(\001)sh158.096 139.851 mo(\001)sh158.096 139.863 mo(\001)sh158.096 139.874 mo(\001)sh158.096 139.884 mo(\001)sh158.096 139.894 mo(\001)sh158.096 139.903 mo(\001)sh158.096 139.911 mo(\001)sh158.096 139.919 mo(\001)sh158.096 139.927 mo(\001)sh158.096 139.934 mo(\001)sh158.096 139.94 mo(\001)sh158.096 139.947 mo(\001)sh158.096 139.953 mo(\001)sh158.096 139.958 mo(\001)sh158.096 139.964 mo(\001)sh158.096 139.969 mo(\001)sh158.096 139.974 mo(\001)sh158.096 139.979 mo(\001)sh158.096 139.983 mo(\001)sh158.096 139.988 mo(\001)sh158.096 139.992 mo(\001)sh158.096 139.996 mo(\001)sh158.096 140 mo(\001)sh158.096 140.095 mo(\001)sh158.096 140.75 mo(\001)sh158.096 140.762 mo(\001)sh158.096 140.774 mo(\001)sh158.096 140.787 mo(\001)sh158.096 140.8 mo(\001)sh158.096 140.814 mo(\001)sh158.096 140.828 mo(\001)sh158.096 140.843 mo(\001)sh158.096 140.859 mo(\001)sh158.096 140.876 mo(\001)sh158.096 140.893 mo(\001)sh158.096 140.912 mo(\001)sh158.096 140.931 mo(\001)sh158.096 140.952 mo(\001)sh158.096 140.973 mo(\001)sh158.096 140.996 mo(\001)sh158.096 141.02 mo(\001)sh158.096 141.046 mo(\001)sh158.096 141.074 mo(\001)sh158.096 141.103 mo(\001)sh158.096 141.134 mo(\001)sh158.096 141.167 mo(\001)sh158.096 141.203 mo(\001)sh158.096 141.242 mo(\001)sh158.096 141.283 mo(\001)sh158.096 141.328 mo(\001)sh158.096 141.377 mo(\001)sh158.096 141.43 mo(\001)sh158.096 141.489 mo(\001)sh158.096 141.553 mo(\001)sh158.096 141.623 mo(\001)sh158.096 141.702 mo(\001)sh158.096 141.789 mo(\001)sh158.096 141.887 mo(\001)sh158.096 141.998 mo(\001)sh158.096 142.125 mo(\001)sh158.096 142.271 mo(\001)sh158.096 142.441 mo(\001)sh158.096 142.64 mo(\001)sh158.096 142.876 mo(\001)sh158.096 143.16 mo(\001)sh158.096 143.505 mo(\001)sh158.096 143.929 mo(\001)sh158.096 144.462 mo(\001)sh158.096 145.166 mo(\001)sh158.096 146.166 mo(\001)sh158.096 147.725 mo(\001)sh158.096 150.478 mo(\001)sh158.096 156.612 mo(\001)sh158.096 183.949 mo(\001)sh162.774 123.319 mo(\001)sh162.774 132.718 mo(\001)sh162.774 134.81 mo(\001)sh162.774 135.745 mo(\001)sh162.774 136.277 mo(\001)sh162.774 136.619 mo(\001)sh162.774 136.858 mo(\001)sh162.774 137.035 mo(\001)sh162.774 137.17 mo(\001)sh162.774 137.277 mo(\001)sh162.774 137.364 mo(\001)sh162.774 137.436 mo(\001)sh162.774 137.497 mo(\001)sh162.774 137.548 mo(\001)sh162.774 137.592 mo(\001)sh162.774 137.631 mo(\001)sh162.774 137.665 mo(\001)sh162.774 137.695 mo(\001)sh162.774 137.722 mo(\001)sh162.774 137.746 mo(\001)sh162.774 137.768 mo(\001)sh162.774 137.788 mo(\001)sh162.774 137.806 mo(\001)sh162.774 137.822 mo(\001)sh162.774 137.838 mo(\001)sh162.774 137.852 mo(\001)sh162.774 137.865 mo(\001)sh162.774 137.877 mo(\001)sh162.774 137.889 mo(\001)sh162.774 137.899 mo(\001)sh162.774 137.909 mo(\001)sh162.774 137.919 mo(\001)sh162.774 137.928 mo(\001)sh162.774 137.936 mo(\001)sh162.774 137.944 mo(\001)sh162.774 137.951 mo(\001)sh162.774 137.958 mo(\001)sh162.774 137.965 mo(\001)sh162.774 137.971 mo(\001)sh162.774 137.977 mo(\001)sh162.774 137.983 mo(\001)sh162.774 137.988 mo(\001)sh162.774 137.993 mo(\001)sh162.774 137.998 mo(\001)sh162.774 138.003 mo(\001)sh162.774 138.007 mo(\001)sh162.774 138.012 mo(\001)sh162.774 138.016 mo(\001)sh162.774 138.02 mo(\001)sh162.774 138.119 mo(\001)sh162.774 138.804 mo(\001)sh162.774 138.817 mo(\001)sh162.774 138.829 mo(\001)sh162.774 138.842 mo(\001)sh162.774 138.856 mo(\001)sh162.774 138.871 mo(\001)sh162.774 138.886 mo(\001)sh162.774 138.902 mo(\001)sh162.774 138.918 mo(\001)sh162.774 138.936 mo(\001)sh162.774 138.954 mo(\001)sh162.774 138.973 mo(\001)sh162.774 138.994 mo(\001)sh162.774 139.015 mo(\001)sh162.774 139.038 mo(\001)sh162.774 139.061 mo(\001)sh162.774 139.087 mo(\001)sh162.774 139.114 mo(\001)sh162.774 139.142 mo(\001)sh162.774 139.173 mo(\001)sh162.774 139.205 mo(\001)sh162.774 139.24 mo(\001)sh162.774 139.278 mo(\001)sh162.774 139.318 mo(\001)sh162.774 139.361 mo(\001)sh162.774 139.408 mo(\001)sh162.774 139.46 mo(\001)sh162.774 139.515 mo(\001)sh162.774 139.576 mo(\001)sh162.774 139.643 mo(\001)sh162.774 139.717 mo(\001)sh162.774 139.799 mo(\001)sh162.774 139.89 mo(\001)sh162.774 139.993 mo(\001)sh162.774 140.109 mo(\001)sh162.774 140.241 mo(\001)sh162.774 140.394 mo(\001)sh162.774 140.571 mo(\001)sh162.774 140.779 mo(\001)sh162.774 141.026 mo(\001)sh162.774 141.323 mo(\001)sh162.774 141.683 mo(\001)sh162.774 142.127 mo(\001)sh162.774 142.684 mo(\001)sh162.774 143.419 mo(\001)sh162.774 144.464 mo(\001)sh162.774 146.093 mo(\001)sh162.774 148.97 mo(\001)sh162.774 155.381 mo(\001)sh162.774 183.949 mo(\001)sh167.452 120.705 mo(\001)sh167.452 130.51 mo(\001)sh167.452 132.692 mo(\001)sh167.452 133.667 mo(\001)sh167.452 134.222 mo(\001)sh167.452 134.579 mo(\001)sh167.452 134.829 mo(\001)sh167.452 135.013 mo(\001)sh167.452 135.154 mo(\001)sh167.452 135.266 mo(\001)sh167.452 135.356 mo(\001)sh167.452 135.431 mo(\001)sh167.452 135.494 mo(\001)sh167.452 135.548 mo(\001)sh167.452 135.594 mo(\001)sh167.452 135.635 mo(\001)sh167.452 135.67 mo(\001)sh167.452 135.701 mo(\001)sh167.452 135.729 mo(\001)sh167.452 135.754 mo(\001)sh167.452 135.777 mo(\001)sh167.452 135.798 mo(\001)sh167.452 135.817 mo(\001)sh167.452 135.834 mo(\001)sh167.452 135.85 mo(\001)sh167.452 135.865 mo(\001)sh167.452 135.879 mo(\001)sh167.452 135.891 mo(\001)sh167.452 135.903 mo(\001)sh167.452 135.914 mo(\001)sh167.452 135.925 mo(\001)sh167.452 135.935 mo(\001)sh167.452 135.944 mo(\001)sh167.452 135.952 mo(\001)sh167.452 135.961 mo(\001)sh167.452 135.968 mo(\001)sh167.452 135.976 mo(\001)sh167.452 135.983 mo(\001)sh167.452 135.989 mo(\001)sh167.452 135.995 mo(\001)sh167.452 136.001 mo(\001)sh167.452 136.007 mo(\001)sh167.452 136.012 mo(\001)sh167.452 136.018 mo(\001)sh167.452 136.023 mo(\001)sh167.452 136.027 mo(\001)sh167.452 136.032 mo(\001)sh167.452 136.036 mo(\001)sh167.452 136.04 mo(\001)sh167.452 136.144 mo(\001)sh167.452 136.858 mo(\001)sh167.452 136.871 mo(\001)sh167.452 136.884 mo(\001)sh167.452 136.898 mo(\001)sh167.452 136.913 mo(\001)sh167.452 136.928 mo(\001)sh167.452 136.943 mo(\001)sh167.452 136.96 mo(\001)sh167.452 136.977 mo(\001)sh167.452 136.995 mo(\001)sh167.452 137.015 mo(\001)sh167.452 137.035 mo(\001)sh167.452 137.056 mo(\001)sh167.452 137.078 mo(\001)sh167.452 137.102 mo(\001)sh167.452 137.127 mo(\001)sh167.452 137.153 mo(\001)sh167.452 137.181 mo(\001)sh167.452 137.211 mo(\001)sh167.452 137.243 mo(\001)sh167.452 137.277 mo(\001)sh167.452 137.313 mo(\001)sh167.452 137.352 mo(\001)sh167.452 137.394 mo(\001)sh167.452 137.44 mo(\001)sh167.452 137.489 mo(\001)sh167.452 137.542 mo(\001)sh167.452 137.6 mo(\001)sh167.452 137.663 mo(\001)sh167.452 137.733 mo(\001)sh167.452 137.81 mo(\001)sh167.452 137.895 mo(\001)sh167.452 137.991 mo(\001)sh167.452 138.098 mo(\001)sh167.452 138.219 mo(\001)sh167.452 138.357 mo(\001)sh167.452 138.516 mo(\001)sh167.452 138.701 mo(\001)sh167.452 138.918 mo(\001)sh167.452 139.176 mo(\001)sh167.452 139.485 mo(\001)sh167.452 139.862 mo(\001)sh167.452 140.324 mo(\001)sh167.452 140.905 mo(\001)sh167.452 141.672 mo(\001)sh167.452 142.762 mo(\001)sh167.452 144.462 mo(\001)sh167.452 147.462 mo(\001)sh167.452 154.149 mo(\001)sh167.452 183.949 mo(\001)sh172.131 118.092 mo(\001)sh172.131 128.302 mo(\001)sh172.131 130.574 mo(\001)sh172.131 131.59 mo(\001)sh172.131 132.167 mo(\001)sh172.131 132.539 mo(\001)sh172.131 132.799 mo(\001)sh172.131 132.99 mo(\001)sh172.131 133.138 mo(\001)sh172.131 133.254 mo(\001)sh172.131 133.348 mo(\001)sh172.131 133.427 mo(\001)sh172.131 133.492 mo(\001)sh172.131 133.548 mo(\001)sh172.131 133.596 mo(\001)sh172.131 133.638 mo(\001)sh172.131 133.675 mo(\001)sh172.131 133.708 mo(\001)sh172.131 133.737 mo(\001)sh172.131 133.763 mo(\001)sh172.131 133.787 mo(\001)sh172.131 133.808 mo(\001)sh172.131 133.828 mo(\001)sh172.131 133.846 mo(\001)sh172.131 133.863 mo(\001)sh172.131 133.878 mo(\001)sh172.131 133.892 mo(\001)sh172.131 133.906 mo(\001)sh172.131 133.918 mo(\001)sh172.131 133.93 mo(\001)sh172.131 133.94 mo(\001)sh172.131 133.951 mo(\001)sh172.131 133.96 mo(\001)sh172.131 133.969 mo(\001)sh172.131 133.978 mo(\001)sh172.131 133.986 mo(\001)sh172.131 133.993 mo(\001)sh172.131 134 mo(\001)sh172.131 134.007 mo(\001)sh172.131 134.014 mo(\001)sh172.131 134.02 mo(\001)sh172.131 134.026 mo(\001)sh172.131 134.032 mo(\001)sh172.131 134.037 mo(\001)sh172.131 134.042 mo(\001)sh172.131 134.047 mo(\001)sh172.131 134.052 mo(\001)sh172.131 134.056 mo(\001)sh172.131 134.061 mo(\001)sh172.131 134.168 mo(\001)sh172.131 134.913 mo(\001)sh172.131 134.926 mo(\001)sh172.131 134.94 mo(\001)sh172.131 134.954 mo(\001)sh172.131 134.969 mo(\001)sh172.131 134.985 mo(\001)sh172.131 135.001 mo(\001)sh172.131 135.018 mo(\001)sh172.131 135.036 mo(\001)sh172.131 135.055 mo(\001)sh172.131 135.075 mo(\001)sh172.131 135.096 mo(\001)sh172.131 135.118 mo(\001)sh172.131 135.141 mo(\001)sh172.131 135.166 mo(\001)sh172.131 135.192 mo(\001)sh172.131 135.219 mo(\001)sh172.131 135.249 mo(\001)sh172.131 135.28 mo(\001)sh172.131 135.313 mo(\001)sh172.131 135.348 mo(\001)sh172.131 135.386 mo(\001)sh172.131 135.427 mo(\001)sh172.131 135.471 mo(\001)sh172.131 135.518 mo(\001)sh172.131 135.569 mo(\001)sh172.131 135.624 mo(\001)sh172.131 135.685 mo(\001)sh172.131 135.751 mo(\001)sh172.131 135.823 mo(\001)sh172.131 135.903 mo(\001)sh172.131 135.992 mo(\001)sh172.131 136.092 mo(\001)sh172.131 136.203 mo(\001)sh172.131 136.329 mo(\001)sh172.131 136.473 mo(\001)sh172.131 136.639 mo(\001)sh172.131 136.831 mo(\001)sh172.131 137.057 mo(\001)sh172.131 137.326 mo(\001)sh172.131 137.648 mo(\001)sh172.131 138.04 mo(\001)sh172.131 138.521 mo(\001)sh172.131 139.126 mo(\001)sh172.131 139.925 mo(\001)sh172.131 141.06 mo(\001)sh172.131 142.83 mo(\001)sh172.131 145.954 mo(\001)sh172.131 152.918 mo(\001)sh172.131 183.949 mo(\001)sh176.809 115.478 mo(\001)sh176.809 126.094 mo(\001)sh176.809 128.456 mo(\001)sh176.809 129.512 mo(\001)sh176.809 130.112 mo(\001)sh176.809 130.499 mo(\001)sh176.809 130.769 mo(\001)sh176.809 130.968 mo(\001)sh176.809 131.121 mo(\001)sh176.809 131.242 mo(\001)sh176.809 131.34 mo(\001)sh176.809 131.422 mo(\001)sh176.809 131.49 mo(\001)sh176.809 131.548 mo(\001)sh176.809 131.598 mo(\001)sh176.809 131.642 mo(\001)sh176.809 131.68 mo(\001)sh176.809 131.714 mo(\001)sh176.809 131.744 mo(\001)sh176.809 131.771 mo(\001)sh176.809 131.796 mo(\001)sh176.809 131.819 mo(\001)sh176.809 131.839 mo(\001)sh176.809 131.858 mo(\001)sh176.809 131.875 mo(\001)sh176.809 131.891 mo(\001)sh176.809 131.906 mo(\001)sh176.809 131.92 mo(\001)sh176.809 131.933 mo(\001)sh176.809 131.945 mo(\001)sh176.809 131.956 mo(\001)sh176.809 131.967 mo(\001)sh176.809 131.976 mo(\001)sh176.809 131.986 mo(\001)sh176.809 131.995 mo(\001)sh176.809 132.003 mo(\001)sh176.809 132.011 mo(\001)sh176.809 132.018 mo(\001)sh176.809 132.026 mo(\001)sh176.809 132.032 mo(\001)sh176.809 132.039 mo(\001)sh176.809 132.045 mo(\001)sh176.809 132.051 mo(\001)sh176.809 132.056 mo(\001)sh176.809 132.062 mo(\001)sh176.809 132.067 mo(\001)sh176.809 132.072 mo(\001)sh176.809 132.076 mo(\001)sh176.809 132.081 mo(\001)sh176.809 132.193 mo(\001)sh176.809 132.967 mo(\001)sh176.809 132.98 mo(\001)sh176.809 132.995 mo(\001)sh176.809 133.01 mo(\001)sh176.809 133.025 mo(\001)sh176.809 133.042 mo(\001)sh176.809 133.059 mo(\001)sh176.809 133.077 mo(\001)sh176.809 133.095 mo(\001)sh176.809 133.115 mo(\001)sh176.809 133.136 mo(\001)sh176.809 133.157 mo(\001)sh176.809 133.18 mo(\001)sh176.809 133.204 mo(\001)sh176.809 133.23 mo(\001)sh176.809 133.257 mo(\001)sh176.809 133.286 mo(\001)sh176.809 133.316 mo(\001)sh176.809 133.348 mo(\001)sh176.809 133.383 mo(\001)sh176.809 133.42 mo(\001)sh176.809 133.459 mo(\001)sh176.809 133.501 mo(\001)sh176.809 133.547 mo(\001)sh176.809 133.596 mo(\001)sh176.809 133.649 mo(\001)sh176.809 133.707 mo(\001)sh176.809 133.769 mo(\001)sh176.809 133.838 mo(\001)sh176.809 133.914 mo(\001)sh176.809 133.997 mo(\001)sh176.809 134.089 mo(\001)sh176.809 134.193 mo(\001)sh176.809 134.309 mo(\001)sh176.809 134.44 mo(\001)sh176.809 134.589 mo(\001)sh176.809 134.761 mo(\001)sh176.809 134.962 mo(\001)sh176.809 135.196 mo(\001)sh176.809 135.476 mo(\001)sh176.809 135.811 mo(\001)sh176.809 136.218 mo(\001)sh176.809 136.719 mo(\001)sh176.809 137.348 mo(\001)sh176.809 138.178 mo(\001)sh176.809 139.358 mo(\001)sh176.809 141.198 mo(\001)sh176.809 144.447 mo(\001)sh176.809 151.687 mo(\001)sh176.809 183.949 mo(\001)sh181.487 112.865 mo(\001)sh181.487 123.885 mo(\001)sh181.487 126.338 mo(\001)sh181.487 127.434 mo(\001)sh181.487 128.057 mo(\001)sh181.487 128.459 mo(\001)sh181.487 128.739 mo(\001)sh181.487 128.946 mo(\001)sh181.487 129.105 mo(\001)sh181.487 129.231 mo(\001)sh181.487 129.333 mo(\001)sh181.487 129.417 mo(\001)sh181.487 129.488 mo(\001)sh181.487 129.548 mo(\001)sh181.487 129.6 mo(\001)sh181.487 129.645 mo(\001)sh181.487 129.685 mo(\001)sh181.487 129.72 mo(\001)sh181.487 129.752 mo(\001)sh181.487 129.78 mo(\001)sh181.487 129.806 mo(\001)sh181.487 129.829 mo(\001)sh181.487 129.85 mo(\001)sh181.487 129.87 mo(\001)sh181.487 129.888 mo(\001)sh181.487 129.904 mo(\001)sh181.487 129.92 mo(\001)sh181.487 129.934 mo(\001)sh181.487 129.947 mo(\001)sh181.487 129.96 mo(\001)sh181.487 129.971 mo(\001)sh181.487 129.982 mo(\001)sh181.487 129.993 mo(\001)sh181.487 130.002 mo(\001)sh181.487 130.012 mo(\001)sh181.487 130.02 mo(\001)sh181.487 130.029 mo(\001)sh181.487 130.036 mo(\001)sh181.487 130.044 mo(\001)sh181.487 130.051 mo(\001)sh181.487 130.057 mo(\001)sh181.487 130.064 mo(\001)sh181.487 130.07 mo(\001)sh181.487 130.076 mo(\001)sh181.487 130.081 mo(\001)sh181.487 130.087 mo(\001)sh181.487 130.092 mo(\001)sh181.487 130.097 mo(\001)sh181.487 130.101 mo(\001)sh181.487 130.218 mo(\001)sh181.487 131.021 mo(\001)sh181.487 131.035 mo(\001)sh181.487 131.05 mo(\001)sh181.487 131.065 mo(\001)sh181.487 131.082 mo(\001)sh181.487 131.099 mo(\001)sh181.487 131.116 mo(\001)sh181.487 131.135 mo(\001)sh181.487 131.154 mo(\001)sh181.487 131.175 mo(\001)sh181.487 131.196 mo(\001)sh181.487 131.219 mo(\001)sh181.487 131.243 mo(\001)sh181.487 131.268 mo(\001)sh181.487 131.294 mo(\001)sh181.487 131.322 mo(\001)sh181.487 131.352 mo(\001)sh181.487 131.383 mo(\001)sh181.487 131.417 mo(\001)sh181.487 131.453 mo(\001)sh181.487 131.491 mo(\001)sh181.487 131.532 mo(\001)sh181.487 131.576 mo(\001)sh181.487 131.623 mo(\001)sh181.487 131.674 mo(\001)sh181.487 131.729 mo(\001)sh181.487 131.789 mo(\001)sh181.487 131.854 mo(\001)sh181.487 131.925 mo(\001)sh181.487 132.004 mo(\001)sh181.487 132.09 mo(\001)sh181.487 132.186 mo(\001)sh181.487 132.293 mo(\001)sh181.487 132.414 mo(\001)sh181.487 132.55 mo(\001)sh181.487 132.705 mo(\001)sh181.487 132.884 mo(\001)sh181.487 133.092 mo(\001)sh181.487 133.336 mo(\001)sh181.487 133.625 mo(\001)sh181.487 133.973 mo(\001)sh181.487 134.396 mo(\001)sh181.487 134.916 mo(\001)sh181.487 135.569 mo(\001)sh181.487 136.431 mo(\001)sh181.487 137.656 mo(\001)sh181.487 139.567 mo(\001)sh181.487 142.939 mo(\001)sh181.487 150.455 mo(\001)sh181.487 183.949 mo(\001)sh186.165 110.252 mo(\001)sh186.165 121.677 mo(\001)sh186.165 124.22 mo(\001)sh186.165 125.356 mo(\001)sh186.165 126.002 mo(\001)sh186.165 126.419 mo(\001)sh186.165 126.709 mo(\001)sh186.165 126.924 mo(\001)sh186.165 127.089 mo(\001)sh186.165 127.219 mo(\001)sh186.165 127.325 mo(\001)sh186.165 127.412 mo(\001)sh186.165 127.485 mo(\001)sh186.165 127.548 mo(\001)sh186.165 127.602 mo(\001)sh186.165 127.649 mo(\001)sh186.165 127.69 mo(\001)sh186.165 127.726 mo(\001)sh186.165 127.759 mo(\001)sh186.165 127.788 mo(\001)sh186.165 127.815 mo(\001)sh186.165 127.839 mo(\001)sh186.165 127.861 mo(\001)sh186.165 127.881 mo(\001)sh186.165 127.9 mo(\001)sh186.165 127.917 mo(\001)sh186.165 127.933 mo(\001)sh186.165 127.948 mo(\001)sh186.165 127.962 mo(\001)sh186.165 127.975 mo(\001)sh186.165 127.987 mo(\001)sh186.165 127.998 mo(\001)sh186.165 128.009 mo(\001)sh186.165 128.019 mo(\001)sh186.165 128.029 mo(\001)sh186.165 128.038 mo(\001)sh186.165 128.046 mo(\001)sh186.165 128.054 mo(\001)sh186.165 128.062 mo(\001)sh186.165 128.069 mo(\001)sh186.165 128.076 mo(\001)sh186.165 128.083 mo(\001)sh186.165 128.089 mo(\001)sh186.165 128.095 mo(\001)sh186.165 128.101 mo(\001)sh186.165 128.106 mo(\001)sh186.165 128.112 mo(\001)sh186.165 128.117 mo(\001)sh186.165 128.121 mo(\001)sh186.165 128.242 mo(\001)sh186.165 129.075 mo(\001)sh186.165 129.09 mo(\001)sh186.165 129.105 mo(\001)sh186.165 129.121 mo(\001)sh186.165 129.138 mo(\001)sh186.165 129.156 mo(\001)sh186.165 129.174 mo(\001)sh186.165 129.193 mo(\001)sh186.165 129.213 mo(\001)sh186.165 129.235 mo(\001)sh186.165 129.257 mo(\001)sh186.165 129.28 mo(\001)sh186.165 129.305 mo(\001)sh186.165 129.331 mo(\001)sh186.165 129.358 mo(\001)sh186.165 129.387 mo(\001)sh186.165 129.418 mo(\001)sh186.165 129.451 mo(\001)sh186.165 129.486 mo(\001)sh186.165 129.523 mo(\001)sh186.165 129.562 mo(\001)sh186.165 129.605 mo(\001)sh186.165 129.65 mo(\001)sh186.165 129.699 mo(\001)sh186.165 129.752 mo(\001)sh186.165 129.809 mo(\001)sh186.165 129.871 mo(\001)sh186.165 129.939 mo(\001)sh186.165 130.013 mo(\001)sh186.165 130.094 mo(\001)sh186.165 130.184 mo(\001)sh186.165 130.283 mo(\001)sh186.165 130.394 mo(\001)sh186.165 130.519 mo(\001)sh186.165 130.66 mo(\001)sh186.165 130.821 mo(\001)sh186.165 131.007 mo(\001)sh186.165 131.222 mo(\001)sh186.165 131.475 mo(\001)sh186.165 131.775 mo(\001)sh186.165 132.136 mo(\001)sh186.165 132.574 mo(\001)sh186.165 133.113 mo(\001)sh186.165 133.79 mo(\001)sh186.165 134.684 mo(\001)sh186.165 135.954 mo(\001)sh186.165 137.935 mo(\001)sh186.165 141.431 mo(\001)sh186.165 149.224 mo(\001)sh186.165 183.949 mo(\001)sh190.843 107.638 mo(\001)sh190.843 119.469 mo(\001)sh190.843 122.101 mo(\001)sh190.843 123.279 mo(\001)sh190.843 123.947 mo(\001)sh190.843 124.379 mo(\001)sh190.843 124.68 mo(\001)sh190.843 124.902 mo(\001)sh190.843 125.072 mo(\001)sh190.843 125.207 mo(\001)sh190.843 125.317 mo(\001)sh190.843 125.407 mo(\001)sh190.843 125.483 mo(\001)sh190.843 125.548 mo(\001)sh190.843 125.604 mo(\001)sh190.843 125.652 mo(\001)sh190.843 125.695 mo(\001)sh190.843 125.733 mo(\001)sh190.843 125.767 mo(\001)sh190.843 125.797 mo(\001)sh190.843 125.824 mo(\001)sh190.843 125.849 mo(\001)sh190.843 125.872 mo(\001)sh190.843 125.893 mo(\001)sh190.843 125.913 mo(\001)sh190.843 125.93 mo(\001)sh190.843 125.947 mo(\001)sh190.843 125.962 mo(\001)sh190.843 125.977 mo(\001)sh190.843 125.99 mo(\001)sh190.843 126.003 mo(\001)sh190.843 126.014 mo(\001)sh190.843 126.025 mo(\001)sh190.843 126.036 mo(\001)sh190.843 126.046 mo(\001)sh190.843 126.055 mo(\001)sh190.843 126.064 mo(\001)sh190.843 126.072 mo(\001)sh190.843 126.08 mo(\001)sh190.843 126.088 mo(\001)sh190.843 126.095 mo(\001)sh190.843 126.102 mo(\001)sh190.843 126.108 mo(\001)sh190.843 126.114 mo(\001)sh190.843 126.12 mo(\001)sh190.843 126.126 mo(\001)sh190.843 126.132 mo(\001)sh190.843 126.137 mo(\001)sh190.843 126.142 mo(\001)sh190.843 126.267 mo(\001)sh190.843 127.129 mo(\001)sh190.843 127.144 mo(\001)sh190.843 127.16 mo(\001)sh190.843 127.177 mo(\001)sh190.843 127.194 mo(\001)sh190.843 127.213 mo(\001)sh190.843 127.232 mo(\001)sh190.843 127.252 mo(\001)sh190.843 127.272 mo(\001)sh190.843 127.294 mo(\001)sh190.843 127.317 mo(\001)sh190.843 127.342 mo(\001)sh190.843 127.367 mo(\001)sh190.843 127.394 mo(\001)sh190.843 127.422 mo(\001)sh190.843 127.453 mo(\001)sh190.843 127.484 mo(\001)sh190.843 127.518 mo(\001)sh190.843 127.554 mo(\001)sh190.843 127.593 mo(\001)sh190.843 127.634 mo(\001)sh190.843 127.678 mo(\001)sh190.843 127.725 mo(\001)sh190.843 127.776 mo(\001)sh190.843 127.83 mo(\001)sh190.843 127.889 mo(\001)sh190.843 127.954 mo(\001)sh190.843 128.024 mo(\001)sh190.843 128.1 mo(\001)sh190.843 128.184 mo(\001)sh190.843 128.277 mo(\001)sh190.843 128.38 mo(\001)sh190.843 128.495 mo(\001)sh190.843 128.625 mo(\001)sh190.843 128.771 mo(\001)sh190.843 128.937 mo(\001)sh190.843 129.129 mo(\001)sh190.843 129.352 mo(\001)sh190.843 129.614 mo(\001)sh190.843 129.925 mo(\001)sh190.843 130.299 mo(\001)sh190.843 130.753 mo(\001)sh190.843 131.31 mo(\001)sh190.843 132.012 mo(\001)sh190.843 132.937 mo(\001)sh190.843 134.253 mo(\001)sh190.843 136.303 mo(\001)sh190.843 139.924 mo(\001)sh190.843 147.993 mo(\001)sh190.843 183.949 mo(\001)sh195.522 105.025 mo(\001)sh195.522 117.261 mo(\001)sh195.522 119.983 mo(\001)sh195.522 121.201 mo(\001)sh195.522 121.893 mo(\001)sh195.522 122.339 mo(\001)sh195.522 122.65 mo(\001)sh195.522 122.88 mo(\001)sh195.522 123.056 mo(\001)sh195.522 123.196 mo(\001)sh195.522 123.309 mo(\001)sh195.522 123.402 mo(\001)sh195.522 123.481 mo(\001)sh195.522 123.548 mo(\001)sh195.522 123.606 mo(\001)sh195.522 123.656 mo(\001)sh195.522 123.7 mo(\001)sh195.522 123.739 mo(\001)sh195.522 123.774 mo(\001)sh195.522 123.805 mo(\001)sh195.522 123.834 mo(\001)sh195.522 123.86 mo(\001)sh195.522 123.883 mo(\001)sh195.522 123.905 mo(\001)sh195.522 123.925 mo(\001)sh195.522 123.943 mo(\001)sh195.522 123.961 mo(\001)sh195.522 123.976 mo(\001)sh195.522 123.991 mo(\001)sh195.522 124.005 mo(\001)sh195.522 124.018 mo(\001)sh195.522 124.03 mo(\001)sh195.522 124.042 mo(\001)sh195.522 124.053 mo(\001)sh195.522 124.063 mo(\001)sh195.522 124.072 mo(\001)sh195.522 124.081 mo(\001)sh195.522 124.09 mo(\001)sh195.522 124.098 mo(\001)sh195.522 124.106 mo(\001)sh195.522 124.114 mo(\001)sh195.522 124.121 mo(\001)sh195.522 124.127 mo(\001)sh195.522 124.134 mo(\001)sh195.522 124.14 mo(\001)sh195.522 124.146 mo(\001)sh195.522 124.151 mo(\001)sh195.522 124.157 mo(\001)sh195.522 124.162 mo(\001)sh195.522 124.291 mo(\001)sh195.522 125.183 mo(\001)sh195.522 125.199 mo(\001)sh195.522 125.216 mo(\001)sh195.522 125.233 mo(\001)sh195.522 125.251 mo(\001)sh195.522 125.27 mo(\001)sh195.522 125.289 mo(\001)sh195.522 125.31 mo(\001)sh195.522 125.331 mo(\001)sh195.522 125.354 mo(\001)sh195.522 125.378 mo(\001)sh195.522 125.403 mo(\001)sh195.522 125.429 mo(\001)sh195.522 125.457 mo(\001)sh195.522 125.487 mo(\001)sh195.522 125.518 mo(\001)sh195.522 125.551 mo(\001)sh195.522 125.586 mo(\001)sh195.522 125.623 mo(\001)sh195.522 125.663 mo(\001)sh195.522 125.705 mo(\001)sh195.522 125.751 mo(\001)sh195.522 125.799 mo(\001)sh195.522 125.852 mo(\001)sh195.522 125.908 mo(\001)sh195.522 125.97 mo(\001)sh195.522 126.036 mo(\001)sh195.522 126.108 mo(\001)sh195.522 126.188 mo(\001)sh195.522 126.275 mo(\001)sh195.522 126.371 mo(\001)sh195.522 126.477 mo(\001)sh195.522 126.596 mo(\001)sh195.522 126.73 mo(\001)sh195.522 126.881 mo(\001)sh195.522 127.053 mo(\001)sh195.522 127.252 mo(\001)sh195.522 127.483 mo(\001)sh195.522 127.753 mo(\001)sh195.522 128.075 mo(\001)sh195.522 128.461 mo(\001)sh195.522 128.931 mo(\001)sh195.522 129.508 mo(\001)sh195.522 130.233 mo(\001)sh195.522 131.19 mo(\001)sh195.522 132.551 mo(\001)sh195.522 134.671 mo(\001)sh195.522 138.416 mo(\001)sh195.522 146.761 mo(\001)sh195.522 183.949 mo(\001)sh200.2 102.411 mo(\001)sh200.2 115.052 mo(\001)sh200.2 117.865 mo(\001)sh200.2 119.123 mo(\001)sh200.2 119.838 mo(\001)sh200.2 120.298 mo(\001)sh200.2 120.62 mo(\001)sh200.2 120.857 mo(\001)sh200.2 121.04 mo(\001)sh200.2 121.184 mo(\001)sh200.2 121.301 mo(\001)sh200.2 121.397 mo(\001)sh200.2 121.479 mo(\001)sh200.2 121.548 mo(\001)sh200.2 121.607 mo(\001)sh200.2 121.659 mo(\001)sh200.2 121.705 mo(\001)sh200.2 121.745 mo(\001)sh200.2 121.781 mo(\001)sh200.2 121.814 mo(\001)sh200.2 121.843 mo(\001)sh200.2 121.87 mo(\001)sh200.2 121.894 mo(\001)sh200.2 121.917 mo(\001)sh200.2 121.937 mo(\001)sh200.2 121.956 mo(\001)sh200.2 121.974 mo(\001)sh200.2 121.991 mo(\001)sh200.2 122.006 mo(\001)sh200.2 122.02 mo(\001)sh200.2 122.034 mo(\001)sh200.2 122.046 mo(\001)sh200.2 122.058 mo(\001)sh200.2 122.069 mo(\001)sh200.2 122.08 mo(\001)sh200.2 122.09 mo(\001)sh200.2 122.099 mo(\001)sh200.2 122.108 mo(\001)sh200.2 122.116 mo(\001)sh200.2 122.125 mo(\001)sh200.2 122.132 mo(\001)sh200.2 122.14 mo(\001)sh200.2 122.146 mo(\001)sh200.2 122.153 mo(\001)sh200.2 122.16 mo(\001)sh200.2 122.166 mo(\001)sh200.2 122.171 mo(\001)sh200.2 122.177 mo(\001)sh200.2 122.182 mo(\001)sh200.2 122.316 mo(\001)sh200.2 123.237 mo(\001)sh200.2 123.254 mo(\001)sh200.2 123.271 mo(\001)sh200.2 123.288 mo(\001)sh200.2 123.307 mo(\001)sh200.2 123.327 mo(\001)sh200.2 123.347 mo(\001)sh200.2 123.368 mo(\001)sh200.2 123.39 mo(\001)sh200.2 123.414 mo(\001)sh200.2 123.438 mo(\001)sh200.2 123.464 mo(\001)sh200.2 123.492 mo(\001)sh200.2 123.52 mo(\001)sh200.2 123.551 mo(\001)sh200.2 123.583 mo(\001)sh200.2 123.617 mo(\001)sh200.2 123.653 mo(\001)sh200.2 123.692 mo(\001)sh200.2 123.733 mo(\001)sh200.2 123.777 mo(\001)sh200.2 123.824 mo(\001)sh200.2 123.874 mo(\001)sh200.2 123.928 mo(\001)sh200.2 123.986 mo(\001)sh200.2 124.05 mo(\001)sh200.2 124.118 mo(\001)sh200.2 124.193 mo(\001)sh200.2 124.275 mo(\001)sh200.2 124.365 mo(\001)sh200.2 124.464 mo(\001)sh200.2 124.574 mo(\001)sh200.2 124.697 mo(\001)sh200.2 124.835 mo(\001)sh200.2 124.991 mo(\001)sh200.2 125.17 mo(\001)sh200.2 125.375 mo(\001)sh200.2 125.613 mo(\001)sh200.2 125.893 mo(\001)sh200.2 126.225 mo(\001)sh200.2 126.624 mo(\001)sh200.2 127.109 mo(\001)sh200.2 127.705 mo(\001)sh200.2 128.454 mo(\001)sh200.2 129.443 mo(\001)sh200.2 130.849 mo(\001)sh200.2 133.04 mo(\001)sh200.2 136.908 mo(\001)sh200.2 145.53 mo(\001)sh200.2 183.949 mo(\001)sh204.878 99.7977 mo(\001)sh204.878 112.844 mo(\001)sh204.878 115.747 mo(\001)sh204.878 117.046 mo(\001)sh204.878 117.783 mo(\001)sh204.878 118.258 mo(\001)sh204.878 118.59 mo(\001)sh204.878 118.835 mo(\001)sh204.878 119.023 mo(\001)sh204.878 119.172 mo(\001)sh204.878 119.293 mo(\001)sh204.878 119.392 mo(\001)sh204.878 119.476 mo(\001)sh204.878 119.548 mo(\001)sh204.878 119.609 mo(\001)sh204.878 119.663 mo(\001)sh204.878 119.71 mo(\001)sh204.878 119.752 mo(\001)sh204.878 119.789 mo(\001)sh204.878 119.822 mo(\001)sh204.878 119.853 mo(\001)sh204.878 119.88 mo(\001)sh204.878 119.905 mo(\001)sh204.878 119.929 mo(\001)sh204.878 119.95 mo(\001)sh204.878 119.97 mo(\001)sh204.878 119.988 mo(\001)sh204.878 120.005 mo(\001)sh204.878 120.021 mo(\001)sh204.878 120.035 mo(\001)sh204.878 120.049 mo(\001)sh204.878 120.062 mo(\001)sh204.878 120.074 mo(\001)sh204.878 120.086 mo(\001)sh204.878 120.097 mo(\001)sh204.878 120.107 mo(\001)sh204.878 120.117 mo(\001)sh204.878 120.126 mo(\001)sh204.878 120.135 mo(\001)sh204.878 120.143 mo(\001)sh204.878 120.151 mo(\001)sh204.878 120.158 mo(\001)sh204.878 120.166 mo(\001)sh204.878 120.172 mo(\001)sh204.878 120.179 mo(\001)sh204.878 120.185 mo(\001)sh204.878 120.191 mo(\001)sh204.878 120.197 mo(\001)sh204.878 120.203 mo(\001)sh204.878 120.341 mo(\001)sh204.878 121.291 mo(\001)sh204.878 121.308 mo(\001)sh204.878 121.326 mo(\001)sh204.878 121.344 mo(\001)sh204.878 121.363 mo(\001)sh204.878 121.384 mo(\001)sh204.878 121.404 mo(\001)sh204.878 121.426 mo(\001)sh204.878 121.449 mo(\001)sh204.878 121.474 mo(\001)sh204.878 121.499 mo(\001)sh204.878 121.526 mo(\001)sh204.878 121.554 mo(\001)sh204.878 121.584 mo(\001)sh204.878 121.615 mo(\001)sh204.878 121.648 mo(\001)sh204.878 121.683 mo(\001)sh204.878 121.721 mo(\001)sh204.878 121.76 mo(\001)sh204.878 121.803 mo(\001)sh204.878 121.848 mo(\001)sh204.878 121.896 mo(\001)sh204.878 121.948 mo(\001)sh204.878 122.004 mo(\001)sh204.878 122.065 mo(\001)sh204.878 122.13 mo(\001)sh204.878 122.201 mo(\001)sh204.878 122.278 mo(\001)sh204.878 122.362 mo(\001)sh204.878 122.455 mo(\001)sh204.878 122.558 mo(\001)sh204.878 122.671 mo(\001)sh204.878 122.798 mo(\001)sh204.878 122.94 mo(\001)sh204.878 123.102 mo(\001)sh204.878 123.286 mo(\001)sh204.878 123.497 mo(\001)sh204.878 123.743 mo(\001)sh204.878 124.032 mo(\001)sh204.878 124.375 mo(\001)sh204.878 124.787 mo(\001)sh204.878 125.287 mo(\001)sh204.878 125.902 mo(\001)sh204.878 126.676 mo(\001)sh204.878 127.696 mo(\001)sh204.878 129.147 mo(\001)sh204.878 131.408 mo(\001)sh204.878 135.4 mo(\001)sh204.878 144.298 mo(\001)sh204.878 183.949 mo(\001)sh209.556 97.1847 mo(\001)sh209.556 110.636 mo(\001)sh209.556 113.629 mo(\001)sh209.556 114.968 mo(\001)sh209.556 115.728 mo(\001)sh209.556 116.218 mo(\001)sh209.556 116.561 mo(\001)sh209.556 116.813 mo(\001)sh209.556 117.007 mo(\001)sh209.556 117.16 mo(\001)sh209.556 117.285 mo(\001)sh209.556 117.388 mo(\001)sh209.556 117.474 mo(\001)sh209.556 117.548 mo(\001)sh209.556 117.611 mo(\001)sh209.556 117.666 mo(\001)sh209.556 117.715 mo(\001)sh209.556 117.758 mo(\001)sh209.556 117.796 mo(\001)sh209.556 117.831 mo(\001)sh209.556 117.862 mo(\001)sh209.556 117.891 mo(\001)sh209.556 117.917 mo(\001)sh209.556 117.94 mo(\001)sh209.556 117.962 mo(\001)sh209.556 117.983 mo(\001)sh209.556 118.001 mo(\001)sh209.556 118.019 mo(\001)sh209.556 118.035 mo(\001)sh209.556 118.05 mo(\001)sh209.556 118.065 mo(\001)sh209.556 118.078 mo(\001)sh209.556 118.091 mo(\001)sh209.556 118.103 mo(\001)sh209.556 118.114 mo(\001)sh209.556 118.124 mo(\001)sh209.556 118.134 mo(\001)sh209.556 118.144 mo(\001)sh209.556 118.153 mo(\001)sh209.556 118.161 mo(\001)sh209.556 118.17 mo(\001)sh209.556 118.177 mo(\001)sh209.556 118.185 mo(\001)sh209.556 118.192 mo(\001)sh209.556 118.199 mo(\001)sh209.556 118.205 mo(\001)sh209.556 118.211 mo(\001)sh209.556 118.217 mo(\001)sh209.556 118.223 mo(\001)sh209.556 118.365 mo(\001)sh209.556 119.345 mo(\001)sh209.556 119.363 mo(\001)sh209.556 119.381 mo(\001)sh209.556 119.4 mo(\001)sh209.556 119.42 mo(\001)sh209.556 119.44 mo(\001)sh209.556 119.462 mo(\001)sh209.556 119.485 mo(\001)sh209.556 119.509 mo(\001)sh209.556 119.533 mo(\001)sh209.556 119.56 mo(\001)sh209.556 119.587 mo(\001)sh209.556 119.616 mo(\001)sh209.556 119.647 mo(\001)sh209.556 119.679 mo(\001)sh209.556 119.713 mo(\001)sh209.556 119.75 mo(\001)sh209.556 119.788 mo(\001)sh209.556 119.829 mo(\001)sh209.556 119.873 mo(\001)sh209.556 119.919 mo(\001)sh209.556 119.969 mo(\001)sh209.556 120.023 mo(\001)sh209.556 120.081 mo(\001)sh209.556 120.143 mo(\001)sh209.556 120.21 mo(\001)sh209.556 120.283 mo(\001)sh209.556 120.363 mo(\001)sh209.556 120.45 mo(\001)sh209.556 120.545 mo(\001)sh209.556 120.651 mo(\001)sh209.556 120.768 mo(\001)sh209.556 120.899 mo(\001)sh209.556 121.046 mo(\001)sh209.556 121.212 mo(\001)sh209.556 121.402 mo(\001)sh209.556 121.62 mo(\001)sh209.556 121.873 mo(\001)sh209.556 122.171 mo(\001)sh209.556 122.525 mo(\001)sh209.556 122.949 mo(\001)sh209.556 123.465 mo(\001)sh209.556 124.1 mo(\001)sh209.556 124.897 mo(\001)sh209.556 125.949 mo(\001)sh209.556 127.445 mo(\001)sh209.556 129.776 mo(\001)sh209.556 133.893 mo(\001)sh209.556 143.067 mo(\001)sh209.556 183.949 mo(\001)sh214.234 94.5708 mo(\001)sh214.234 108.428 mo(\001)sh214.234 111.511 mo(\001)sh214.234 112.89 mo(\001)sh214.234 113.673 mo(\001)sh214.234 114.178 mo(\001)sh214.234 114.531 mo(\001)sh214.234 114.791 mo(\001)sh214.234 114.991 mo(\001)sh214.234 115.149 mo(\001)sh214.234 115.277 mo(\001)sh214.234 115.383 mo(\001)sh214.234 115.472 mo(\001)sh214.234 115.548 mo(\001)sh214.234 115.613 mo(\001)sh214.234 115.67 mo(\001)sh214.234 115.72 mo(\001)sh214.234 115.764 mo(\001)sh214.234 115.804 mo(\001)sh214.234 115.839 mo(\001)sh214.234 115.872 mo(\001)sh214.234 115.901 mo(\001)sh214.234 115.928 mo(\001)sh214.234 115.952 mo(\001)sh214.234 115.975 mo(\001)sh214.234 115.996 mo(\001)sh214.234 116.015 mo(\001)sh214.234 116.033 mo(\001)sh214.234 116.05 mo(\001)sh214.234 116.066 mo(\001)sh214.234 116.08 mo(\001)sh214.234 116.094 mo(\001)sh214.234 116.107 mo(\001)sh214.234 116.119 mo(\001)sh214.234 116.131 mo(\001)sh214.234 116.142 mo(\001)sh214.234 116.152 mo(\001)sh214.234 116.162 mo(\001)sh214.234 116.171 mo(\001)sh214.234 116.18 mo(\001)sh214.234 116.188 mo(\001)sh214.234 116.196 mo(\001)sh214.234 116.204 mo(\001)sh214.234 116.211 mo(\001)sh214.234 116.218 mo(\001)sh214.234 116.225 mo(\001)sh214.234 116.231 mo(\001)sh214.234 116.237 mo(\001)sh214.234 116.243 mo(\001)sh214.234 116.39 mo(\001)sh214.234 117.4 mo(\001)sh214.234 117.418 mo(\001)sh214.234 117.436 mo(\001)sh214.234 117.456 mo(\001)sh214.234 117.476 mo(\001)sh214.234 117.497 mo(\001)sh214.234 117.52 mo(\001)sh214.234 117.543 mo(\001)sh214.234 117.568 mo(\001)sh214.234 117.593 mo(\001)sh214.234 117.62 mo(\001)sh214.234 117.649 mo(\001)sh214.234 117.678 mo(\001)sh214.234 117.71 mo(\001)sh214.234 117.743 mo(\001)sh214.234 117.779 mo(\001)sh214.234 117.816 mo(\001)sh214.234 117.856 mo(\001)sh214.234 117.898 mo(\001)sh214.234 117.943 mo(\001)sh214.234 117.991 mo(\001)sh214.234 118.042 mo(\001)sh214.234 118.097 mo(\001)sh214.234 118.157 mo(\001)sh214.234 118.221 mo(\001)sh214.234 118.29 mo(\001)sh214.234 118.365 mo(\001)sh214.234 118.447 mo(\001)sh214.234 118.537 mo(\001)sh214.234 118.636 mo(\001)sh214.234 118.744 mo(\001)sh214.234 118.865 mo(\001)sh214.234 119 mo(\001)sh214.234 119.151 mo(\001)sh214.234 119.322 mo(\001)sh214.234 119.518 mo(\001)sh214.234 119.742 mo(\001)sh214.234 120.004 mo(\001)sh214.234 120.31 mo(\001)sh214.234 120.674 mo(\001)sh214.234 121.112 mo(\001)sh214.234 121.644 mo(\001)sh214.234 122.297 mo(\001)sh214.234 123.118 mo(\001)sh214.234 124.202 mo(\001)sh214.234 125.743 mo(\001)sh214.234 128.145 mo(\001)sh214.234 132.385 mo(\001)sh214.234 141.836 mo(\001)sh214.234 183.949 mo(\001)sh218.913 91.9578 mo(\001)sh218.913 106.22 mo(\001)sh218.913 109.393 mo(\001)sh218.913 110.812 mo(\001)sh218.913 111.618 mo(\001)sh218.913 112.138 mo(\001)sh218.913 112.501 mo(\001)sh218.913 112.769 mo(\001)sh218.913 112.974 mo(\001)sh218.913 113.137 mo(\001)sh218.913 113.269 mo(\001)sh218.913 113.378 mo(\001)sh218.913 113.47 mo(\001)sh218.913 113.548 mo(\001)sh218.913 113.615 mo(\001)sh218.913 113.673 mo(\001)sh218.913 113.725 mo(\001)sh218.913 113.771 mo(\001)sh218.913 113.811 mo(\001)sh218.913 113.848 mo(\001)sh218.913 113.881 mo(\001)sh218.913 113.911 mo(\001)sh218.913 113.939 mo(\001)sh218.913 113.964 mo(\001)sh218.913 113.987 mo(\001)sh218.913 114.009 mo(\001)sh218.913 114.029 mo(\001)sh218.913 114.047 mo(\001)sh218.913 114.065 mo(\001)sh218.913 114.081 mo(\001)sh218.913 114.096 mo(\001)sh218.913 114.11 mo(\001)sh218.913 114.123 mo(\001)sh218.913 114.136 mo(\001)sh218.913 114.148 mo(\001)sh218.913 114.159 mo(\001)sh218.913 114.17 mo(\001)sh218.913 114.18 mo(\001)sh218.913 114.189 mo(\001)sh218.913 114.198 mo(\001)sh218.913 114.207 mo(\001)sh218.913 114.215 mo(\001)sh218.913 114.223 mo(\001)sh218.913 114.231 mo(\001)sh218.913 114.238 mo(\001)sh218.913 114.245 mo(\001)sh218.913 114.251 mo(\001)sh218.913 114.258 mo(\001)sh218.913 114.264 mo(\001)sh218.913 114.414 mo(\001)sh218.913 115.454 mo(\001)sh218.913 115.472 mo(\001)sh218.913 115.491 mo(\001)sh218.913 115.512 mo(\001)sh218.913 115.533 mo(\001)sh218.913 115.554 mo(\001)sh218.913 115.577 mo(\001)sh218.913 115.601 mo(\001)sh218.913 115.627 mo(\001)sh218.913 115.653 mo(\001)sh218.913 115.681 mo(\001)sh218.913 115.71 mo(\001)sh218.913 115.741 mo(\001)sh218.913 115.773 mo(\001)sh218.913 115.807 mo(\001)sh218.913 115.844 mo(\001)sh218.913 115.882 mo(\001)sh218.913 115.923 mo(\001)sh218.913 115.966 mo(\001)sh218.913 116.013 mo(\001)sh218.913 116.062 mo(\001)sh218.913 116.115 mo(\001)sh218.913 116.172 mo(\001)sh218.913 116.233 mo(\001)sh218.913 116.299 mo(\001)sh218.913 116.37 mo(\001)sh218.913 116.448 mo(\001)sh218.913 116.532 mo(\001)sh218.913 116.624 mo(\001)sh218.913 116.726 mo(\001)sh218.913 116.838 mo(\001)sh218.913 116.962 mo(\001)sh218.913 117.101 mo(\001)sh218.913 117.256 mo(\001)sh218.913 117.433 mo(\001)sh218.913 117.634 mo(\001)sh218.913 117.865 mo(\001)sh218.913 118.134 mo(\001)sh218.913 118.449 mo(\001)sh218.913 118.824 mo(\001)sh218.913 119.275 mo(\001)sh218.913 119.822 mo(\001)sh218.913 120.494 mo(\001)sh218.913 121.34 mo(\001)sh218.913 122.455 mo(\001)sh218.913 124.041 mo(\001)sh218.913 126.513 mo(\001)sh218.913 130.877 mo(\001)sh218.913 140.604 mo(\001)sh218.913 183.949 mo(\001)sh223.591 89.3448 mo(\001)sh223.591 104.011 mo(\001)sh223.591 107.275 mo(\001)sh223.591 108.735 mo(\001)sh223.591 109.564 mo(\001)sh223.591 110.098 mo(\001)sh223.591 110.471 mo(\001)sh223.591 110.747 mo(\001)sh223.591 110.958 mo(\001)sh223.591 111.125 mo(\001)sh223.591 111.261 mo(\001)sh223.591 111.373 mo(\001)sh223.591 111.467 mo(\001)sh223.591 111.548 mo(\001)sh223.591 111.617 mo(\001)sh223.591 111.677 mo(\001)sh223.591 111.73 mo(\001)sh223.591 111.777 mo(\001)sh223.591 111.819 mo(\001)sh223.591 111.856 mo(\001)sh223.591 111.89 mo(\001)sh223.591 111.921 mo(\001)sh223.591 111.95 mo(\001)sh223.591 111.976 mo(\001)sh223.591 112 mo(\001)sh223.591 112.022 mo(\001)sh223.591 112.042 mo(\001)sh223.591 112.061 mo(\001)sh223.591 112.079 mo(\001)sh223.591 112.096 mo(\001)sh223.591 112.111 mo(\001)sh223.591 112.126 mo(\001)sh223.591 112.14 mo(\001)sh223.591 112.153 mo(\001)sh223.591 112.165 mo(\001)sh223.591 112.176 mo(\001)sh223.591 112.187 mo(\001)sh223.591 112.198 mo(\001)sh223.591 112.207 mo(\001)sh223.591 112.217 mo(\001)sh223.591 112.226 mo(\001)sh223.591 112.234 mo(\001)sh223.591 112.242 mo(\001)sh223.591 112.25 mo(\001)sh223.591 112.257 mo(\001)sh223.591 112.264 mo(\001)sh223.591 112.271 mo(\001)sh223.591 112.278 mo(\001)sh223.591 112.284 mo(\001)sh223.591 112.439 mo(\001)sh223.591 113.508 mo(\001)sh223.591 113.527 mo(\001)sh223.591 113.547 mo(\001)sh223.591 113.567 mo(\001)sh223.591 113.589 mo(\001)sh223.591 113.611 mo(\001)sh223.591 113.635 mo(\001)sh223.591 113.66 mo(\001)sh223.591 113.686 mo(\001)sh223.591 113.713 mo(\001)sh223.591 113.741 mo(\001)sh223.591 113.771 mo(\001)sh223.591 113.803 mo(\001)sh223.591 113.836 mo(\001)sh223.591 113.872 mo(\001)sh223.591 113.909 mo(\001)sh223.591 113.948 mo(\001)sh223.591 113.99 mo(\001)sh223.591 114.035 mo(\001)sh223.591 114.083 mo(\001)sh223.591 114.134 mo(\001)sh223.591 114.188 mo(\001)sh223.591 114.246 mo(\001)sh223.591 114.309 mo(\001)sh223.591 114.377 mo(\001)sh223.591 114.45 mo(\001)sh223.591 114.53 mo(\001)sh223.591 114.617 mo(\001)sh223.591 114.712 mo(\001)sh223.591 114.816 mo(\001)sh223.591 114.931 mo(\001)sh223.591 115.059 mo(\001)sh223.591 115.202 mo(\001)sh223.591 115.362 mo(\001)sh223.591 115.543 mo(\001)sh223.591 115.75 mo(\001)sh223.591 115.988 mo(\001)sh223.591 116.264 mo(\001)sh223.591 116.589 mo(\001)sh223.591 116.974 mo(\001)sh223.591 117.437 mo(\001)sh223.591 118 mo(\001)sh223.591 118.692 mo(\001)sh223.591 119.561 mo(\001)sh223.591 120.708 mo(\001)sh223.591 122.339 mo(\001)sh223.591 124.881 mo(\001)sh223.591 129.37 mo(\001)sh223.591 139.373 mo(\001)sh223.591 183.949 mo(\001)sh228.269 86.7308 mo(\001)sh228.269 101.803 mo(\001)sh228.269 105.157 mo(\001)sh228.269 106.657 mo(\001)sh228.269 107.509 mo(\001)sh228.269 108.058 mo(\001)sh228.269 108.442 mo(\001)sh228.269 108.725 mo(\001)sh228.269 108.942 mo(\001)sh228.269 109.114 mo(\001)sh228.269 109.253 mo(\001)sh228.269 109.368 mo(\001)sh228.269 109.465 mo(\001)sh228.269 109.548 mo(\001)sh228.269 109.619 mo(\001)sh228.269 109.681 mo(\001)sh228.269 109.735 mo(\001)sh228.269 109.783 mo(\001)sh228.269 109.826 mo(\001)sh228.269 109.865 mo(\001)sh228.269 109.9 mo(\001)sh228.269 109.932 mo(\001)sh228.269 109.961 mo(\001)sh228.269 109.988 mo(\001)sh228.269 110.012 mo(\001)sh228.269 110.035 mo(\001)sh228.269 110.056 mo(\001)sh228.269 110.076 mo(\001)sh228.269 110.094 mo(\001)sh228.269 110.111 mo(\001)sh228.269 110.127 mo(\001)sh228.269 110.142 mo(\001)sh228.269 110.156 mo(\001)sh228.269 110.169 mo(\001)sh228.269 110.182 mo(\001)sh228.269 110.194 mo(\001)sh228.269 110.205 mo(\001)sh228.269 110.216 mo(\001)sh228.269 110.226 mo(\001)sh228.269 110.235 mo(\001)sh228.269 110.244 mo(\001)sh228.269 110.253 mo(\001)sh228.269 110.261 mo(\001)sh228.269 110.269 mo(\001)sh228.269 110.277 mo(\001)sh228.269 110.284 mo(\001)sh228.269 110.291 mo(\001)sh228.269 110.298 mo(\001)sh228.269 110.304 mo(\001)sh228.269 110.463 mo(\001)sh228.269 111.562 mo(\001)sh228.269 111.581 mo(\001)sh228.269 111.602 mo(\001)sh228.269 111.623 mo(\001)sh228.269 111.645 mo(\001)sh228.269 111.668 mo(\001)sh228.269 111.693 mo(\001)sh228.269 111.718 mo(\001)sh228.269 111.745 mo(\001)sh228.269 111.773 mo(\001)sh228.269 111.802 mo(\001)sh228.269 111.833 mo(\001)sh228.269 111.865 mo(\001)sh228.269 111.9 mo(\001)sh228.269 111.936 mo(\001)sh228.269 111.974 mo(\001)sh228.269 112.015 mo(\001)sh228.269 112.058 mo(\001)sh228.269 112.104 mo(\001)sh228.269 112.153 mo(\001)sh228.269 112.205 mo(\001)sh228.269 112.261 mo(\001)sh228.269 112.321 mo(\001)sh228.269 112.386 mo(\001)sh228.269 112.455 mo(\001)sh228.269 112.531 mo(\001)sh228.269 112.612 mo(\001)sh228.269 112.702 mo(\001)sh228.269 112.799 mo(\001)sh228.269 112.906 mo(\001)sh228.269 113.025 mo(\001)sh228.269 113.156 mo(\001)sh228.269 113.303 mo(\001)sh228.269 113.467 mo(\001)sh228.269 113.653 mo(\001)sh228.269 113.866 mo(\001)sh228.269 114.11 mo(\001)sh228.269 114.394 mo(\001)sh228.269 114.728 mo(\001)sh228.269 115.124 mo(\001)sh228.269 115.6 mo(\001)sh228.269 116.178 mo(\001)sh228.269 116.889 mo(\001)sh228.269 117.782 mo(\001)sh228.269 118.961 mo(\001)sh228.269 120.637 mo(\001)sh228.269 123.249 mo(\001)sh228.269 127.862 mo(\001)sh228.269 138.141 mo(\001)sh228.269 183.949 mo(\001)sh232.947 84.1178 mo(\001)sh232.947 99.5948 mo(\001)sh232.947 103.039 mo(\001)sh232.947 104.579 mo(\001)sh232.947 105.454 mo(\001)sh232.947 106.018 mo(\001)sh232.947 106.412 mo(\001)sh232.947 106.702 mo(\001)sh232.947 106.925 mo(\001)sh232.947 107.102 mo(\001)sh232.947 107.245 mo(\001)sh232.947 107.363 mo(\001)sh232.947 107.463 mo(\001)sh232.947 107.547 mo(\001)sh232.947 107.62 mo(\001)sh232.947 107.684 mo(\001)sh232.947 107.74 mo(\001)sh232.947 107.789 mo(\001)sh232.947 107.834 mo(\001)sh232.947 107.873 mo(\001)sh232.947 107.909 mo(\001)sh232.947 107.942 mo(\001)sh232.947 107.972 mo(\001)sh232.947 107.999 mo(\001)sh232.947 108.025 mo(\001)sh232.947 108.048 mo(\001)sh232.947 108.07 mo(\001)sh232.947 108.09 mo(\001)sh232.947 108.108 mo(\001)sh232.947 108.126 mo(\001)sh232.947 108.142 mo(\001)sh232.947 108.158 mo(\001)sh232.947 108.172 mo(\001)sh232.947 108.186 mo(\001)sh232.947 108.199 mo(\001)sh232.947 108.211 mo(\001)sh232.947 108.223 mo(\001)sh232.947 108.233 mo(\001)sh232.947 108.244 mo(\001)sh232.947 108.254 mo(\001)sh232.947 108.263 mo(\001)sh232.947 108.272 mo(\001)sh232.947 108.281 mo(\001)sh232.947 108.289 mo(\001)sh232.947 108.296 mo(\001)sh232.947 108.304 mo(\001)sh232.947 108.311 mo(\001)sh232.947 108.318 mo(\001)sh232.947 108.325 mo(\001)sh232.947 108.488 mo(\001)sh232.947 109.616 mo(\001)sh232.947 109.636 mo(\001)sh232.947 109.657 mo(\001)sh232.947 109.679 mo(\001)sh232.947 109.702 mo(\001)sh232.947 109.725 mo(\001)sh232.947 109.75 mo(\001)sh232.947 109.776 mo(\001)sh232.947 109.804 mo(\001)sh232.947 109.832 mo(\001)sh232.947 109.862 mo(\001)sh232.947 109.894 mo(\001)sh232.947 109.928 mo(\001)sh232.947 109.963 mo(\001)sh232.947 110 mo(\001)sh232.947 110.039 mo(\001)sh232.947 110.081 mo(\001)sh232.947 110.125 mo(\001)sh232.947 110.173 mo(\001)sh232.947 110.223 mo(\001)sh232.947 110.276 mo(\001)sh232.947 110.334 mo(\001)sh232.947 110.395 mo(\001)sh232.947 110.462 mo(\001)sh232.947 110.533 mo(\001)sh232.947 110.611 mo(\001)sh232.947 110.695 mo(\001)sh232.947 110.786 mo(\001)sh232.947 110.887 mo(\001)sh232.947 110.997 mo(\001)sh232.947 111.118 mo(\001)sh232.947 111.253 mo(\001)sh232.947 111.403 mo(\001)sh232.947 111.572 mo(\001)sh232.947 111.764 mo(\001)sh232.947 111.982 mo(\001)sh232.947 112.233 mo(\001)sh232.947 112.525 mo(\001)sh232.947 112.867 mo(\001)sh232.947 113.274 mo(\001)sh232.947 113.763 mo(\001)sh232.947 114.356 mo(\001)sh232.947 115.086 mo(\001)sh232.947 116.004 mo(\001)sh232.947 117.214 mo(\001)sh232.947 118.935 mo(\001)sh232.947 121.618 mo(\001)sh232.947 126.354 mo(\001)sh232.947 136.91 mo(\001)sh232.947 183.949 mo(\001)sh237.625 81.5039 mo(\001)sh237.625 97.3869 mo(\001)sh237.625 100.921 mo(\001)sh237.625 102.501 mo(\001)sh237.625 103.399 mo(\001)sh237.625 103.978 mo(\001)sh237.625 104.382 mo(\001)sh237.625 104.68 mo(\001)sh237.625 104.909 mo(\001)sh237.625 105.09 mo(\001)sh237.625 105.237 mo(\001)sh237.625 105.358 mo(\001)sh237.625 105.461 mo(\001)sh237.625 105.547 mo(\001)sh237.625 105.622 mo(\001)sh237.625 105.688 mo(\001)sh237.625 105.745 mo(\001)sh237.625 105.796 mo(\001)sh237.625 105.841 mo(\001)sh237.625 105.882 mo(\001)sh237.625 105.919 mo(\001)sh237.625 105.952 mo(\001)sh237.625 105.983 mo(\001)sh237.625 106.011 mo(\001)sh237.625 106.037 mo(\001)sh237.625 106.061 mo(\001)sh237.625 106.083 mo(\001)sh237.625 106.104 mo(\001)sh237.625 106.123 mo(\001)sh237.625 106.141 mo(\001)sh237.625 106.158 mo(\001)sh237.625 106.174 mo(\001)sh237.625 106.189 mo(\001)sh237.625 106.203 mo(\001)sh237.625 106.216 mo(\001)sh237.625 106.228 mo(\001)sh237.625 106.24 mo(\001)sh237.625 106.251 mo(\001)sh237.625 106.262 mo(\001)sh237.625 106.272 mo(\001)sh237.625 106.282 mo(\001)sh237.625 106.291 mo(\001)sh237.625 106.3 mo(\001)sh237.625 106.308 mo(\001)sh237.625 106.316 mo(\001)sh237.625 106.324 mo(\001)sh237.625 106.331 mo(\001)sh237.625 106.338 mo(\001)sh237.625 106.345 mo(\001)sh237.625 106.513 mo(\001)sh237.625 107.67 mo(\001)sh237.625 107.691 mo(\001)sh237.625 107.712 mo(\001)sh237.625 107.735 mo(\001)sh237.625 107.758 mo(\001)sh237.625 107.782 mo(\001)sh237.625 107.808 mo(\001)sh237.625 107.835 mo(\001)sh237.625 107.863 mo(\001)sh237.625 107.892 mo(\001)sh237.625 107.923 mo(\001)sh237.625 107.956 mo(\001)sh237.625 107.99 mo(\001)sh237.625 108.026 mo(\001)sh237.625 108.064 mo(\001)sh237.625 108.105 mo(\001)sh237.625 108.147 mo(\001)sh237.625 108.193 mo(\001)sh237.625 108.241 mo(\001)sh237.625 108.293 mo(\001)sh237.625 108.348 mo(\001)sh237.625 108.407 mo(\001)sh237.625 108.47 mo(\001)sh237.625 108.538 mo(\001)sh237.625 108.611 mo(\001)sh237.625 108.691 mo(\001)sh237.625 108.777 mo(\001)sh237.625 108.871 mo(\001)sh237.625 108.974 mo(\001)sh237.625 109.087 mo(\001)sh237.625 109.212 mo(\001)sh237.625 109.35 mo(\001)sh237.625 109.504 mo(\001)sh237.625 109.678 mo(\001)sh237.625 109.874 mo(\001)sh237.625 110.098 mo(\001)sh237.625 110.355 mo(\001)sh237.625 110.655 mo(\001)sh237.625 111.006 mo(\001)sh237.625 111.424 mo(\001)sh237.625 111.925 mo(\001)sh237.625 112.535 mo(\001)sh237.625 113.284 mo(\001)sh237.625 114.225 mo(\001)sh237.625 115.467 mo(\001)sh237.625 117.233 mo(\001)sh237.625 119.986 mo(\001)sh237.625 124.846 mo(\001)sh237.625 135.679 mo(\001)sh237.625 183.949 mo(\001)sh242.304 78.8909 mo(\001)sh242.304 95.1779 mo(\001)sh242.304 98.8029 mo(\001)sh242.304 100.424 mo(\001)sh242.304 101.344 mo(\001)sh242.304 101.938 mo(\001)sh242.304 102.352 mo(\001)sh242.304 102.658 mo(\001)sh242.304 102.893 mo(\001)sh242.304 103.078 mo(\001)sh242.304 103.229 mo(\001)sh242.304 103.354 mo(\001)sh242.304 103.458 mo(\001)sh242.304 103.547 mo(\001)sh242.304 103.624 mo(\001)sh242.304 103.691 mo(\001)sh242.304 103.75 mo(\001)sh242.304 103.802 mo(\001)sh242.304 103.849 mo(\001)sh242.304 103.89 mo(\001)sh242.304 103.928 mo(\001)sh242.304 103.963 mo(\001)sh242.304 103.994 mo(\001)sh242.304 104.023 mo(\001)sh242.304 104.049 mo(\001)sh242.304 104.074 mo(\001)sh242.304 104.097 mo(\001)sh242.304 104.118 mo(\001)sh242.304 104.138 mo(\001)sh242.304 104.156 mo(\001)sh242.304 104.173 mo(\001)sh242.304 104.19 mo(\001)sh242.304 104.205 mo(\001)sh242.304 104.219 mo(\001)sh242.304 104.233 mo(\001)sh242.304 104.246 mo(\001)sh242.304 104.258 mo(\001)sh242.304 104.269 mo(\001)sh242.304 104.28 mo(\001)sh242.304 104.291 mo(\001)sh242.304 104.3 mo(\001)sh242.304 104.31 mo(\001)sh242.304 104.319 mo(\001)sh242.304 104.327 mo(\001)sh242.304 104.336 mo(\001)sh242.304 104.343 mo(\001)sh242.304 104.351 mo(\001)sh242.304 104.358 mo(\001)sh242.304 104.365 mo(\001)sh242.304 104.537 mo(\001)sh242.304 105.724 mo(\001)sh242.304 105.745 mo(\001)sh242.304 105.767 mo(\001)sh242.304 105.79 mo(\001)sh242.304 105.814 mo(\001)sh242.304 105.839 mo(\001)sh242.304 105.865 mo(\001)sh242.304 105.893 mo(\001)sh242.304 105.922 mo(\001)sh242.304 105.952 mo(\001)sh242.304 105.984 mo(\001)sh242.304 106.017 mo(\001)sh242.304 106.052 mo(\001)sh242.304 106.089 mo(\001)sh242.304 106.128 mo(\001)sh242.304 106.17 mo(\001)sh242.304 106.214 mo(\001)sh242.304 106.26 mo(\001)sh242.304 106.31 mo(\001)sh242.304 106.363 mo(\001)sh242.304 106.419 mo(\001)sh242.304 106.48 mo(\001)sh242.304 106.545 mo(\001)sh242.304 106.614 mo(\001)sh242.304 106.69 mo(\001)sh242.304 106.771 mo(\001)sh242.304 106.86 mo(\001)sh242.304 106.956 mo(\001)sh242.304 107.061 mo(\001)sh242.304 107.177 mo(\001)sh242.304 107.305 mo(\001)sh242.304 107.447 mo(\001)sh242.304 107.605 mo(\001)sh242.304 107.783 mo(\001)sh242.304 107.984 mo(\001)sh242.304 108.214 mo(\001)sh242.304 108.478 mo(\001)sh242.304 108.785 mo(\001)sh242.304 109.146 mo(\001)sh242.304 109.574 mo(\001)sh242.304 110.088 mo(\001)sh242.304 110.713 mo(\001)sh242.304 111.481 mo(\001)sh242.304 112.446 mo(\001)sh242.304 113.72 mo(\001)sh242.304 115.531 mo(\001)sh242.304 118.354 mo(\001)sh242.304 123.339 mo(\001)sh242.304 134.447 mo(\001)sh242.304 183.949 mo(\001)sh246.982 76.278 mo(\001)sh246.982 92.97 mo(\001)sh246.982 96.685 mo(\001)sh246.982 98.346 mo(\001)sh246.982 99.2889 mo(\001)sh246.982 99.8979 mo(\001)sh246.982 100.323 mo(\001)sh246.982 100.636 mo(\001)sh246.982 100.876 mo(\001)sh246.982 101.067 mo(\001)sh246.982 101.221 mo(\001)sh246.982 101.349 mo(\001)sh246.982 101.456 mo(\001)sh246.982 101.547 mo(\001)sh246.982 101.626 mo(\001)sh246.982 101.695 mo(\001)sh246.982 101.755 mo(\001)sh246.982 101.808 mo(\001)sh246.982 101.856 mo(\001)sh246.982 101.899 mo(\001)sh246.982 101.938 mo(\001)sh246.982 101.973 mo(\001)sh246.982 102.005 mo(\001)sh246.982 102.035 mo(\001)sh246.982 102.062 mo(\001)sh246.982 102.087 mo(\001)sh246.982 102.11 mo(\001)sh246.982 102.132 mo(\001)sh246.982 102.152 mo(\001)sh246.982 102.171 mo(\001)sh246.982 102.189 mo(\001)sh246.982 102.206 mo(\001)sh246.982 102.221 mo(\001)sh246.982 102.236 mo(\001)sh246.982 102.25 mo(\001)sh246.982 102.263 mo(\001)sh246.982 102.275 mo(\001)sh246.982 102.287 mo(\001)sh246.982 102.298 mo(\001)sh246.982 102.309 mo(\001)sh246.982 102.319 mo(\001)sh246.982 102.329 mo(\001)sh246.982 102.338 mo(\001)sh246.982 102.347 mo(\001)sh246.982 102.355 mo(\001)sh246.982 102.363 mo(\001)sh246.982 102.371 mo(\001)sh246.982 102.378 mo(\001)sh246.982 102.385 mo(\001)sh246.982 102.562 mo(\001)sh246.982 103.778 mo(\001)sh246.982 103.8 mo(\001)sh246.982 103.823 mo(\001)sh246.982 103.846 mo(\001)sh246.982 103.871 mo(\001)sh246.982 103.896 mo(\001)sh246.982 103.923 mo(\001)sh246.982 103.951 mo(\001)sh246.982 103.981 mo(\001)sh246.982 104.012 mo(\001)sh246.982 104.044 mo(\001)sh246.982 104.078 mo(\001)sh246.982 104.114 mo(\001)sh246.982 104.152 mo(\001)sh246.982 104.192 mo(\001)sh246.982 104.235 mo(\001)sh246.982 104.28 mo(\001)sh246.982 104.328 mo(\001)sh246.982 104.379 mo(\001)sh246.982 104.433 mo(\001)sh246.982 104.491 mo(\001)sh246.982 104.553 mo(\001)sh246.982 104.619 mo(\001)sh246.982 104.691 mo(\001)sh246.982 104.768 mo(\001)sh246.982 104.851 mo(\001)sh246.982 104.942 mo(\001)sh246.982 105.041 mo(\001)sh246.982 105.149 mo(\001)sh246.982 105.267 mo(\001)sh246.982 105.398 mo(\001)sh246.982 105.544 mo(\001)sh246.982 105.706 mo(\001)sh246.982 105.888 mo(\001)sh246.982 106.095 mo(\001)sh246.982 106.33 mo(\001)sh246.982 106.601 mo(\001)sh246.982 106.915 mo(\001)sh246.982 107.285 mo(\001)sh246.982 107.724 mo(\001)sh246.982 108.251 mo(\001)sh246.982 108.891 mo(\001)sh246.982 109.678 mo(\001)sh246.982 110.668 mo(\001)sh246.982 111.973 mo(\001)sh246.982 113.829 mo(\001)sh246.982 116.723 mo(\001)sh246.982 121.831 mo(\001)sh246.982 133.216 mo(\001)sh246.982 183.949 mo(\001)sh251.66 73.6638 mo(\001)sh251.66 90.7618 mo(\001)sh251.66 94.5668 mo(\001)sh251.66 96.2678 mo(\001)sh251.66 97.2338 mo(\001)sh251.66 97.8578 mo(\001)sh251.66 98.2928 mo(\001)sh251.66 98.6138 mo(\001)sh251.66 98.8598 mo(\001)sh251.66 99.0548 mo(\001)sh251.66 99.2129 mo(\001)sh251.66 99.3438 mo(\001)sh251.66 99.4539 mo(\001)sh251.66 99.5469 mo(\001)sh251.66 99.6278 mo(\001)sh251.66 99.6979 mo(\001)sh251.66 99.7599 mo(\001)sh251.66 99.8148 mo(\001)sh251.66 99.8628 mo(\001)sh251.66 99.9069 mo(\001)sh251.66 99.9468 mo(\001)sh251.66 99.9828 mo(\001)sh251.66 100.016 mo(\001)sh251.66 100.046 mo(\001)sh251.66 100.074 mo(\001)sh251.66 100.1 mo(\001)sh251.66 100.124 mo(\001)sh251.66 100.146 mo(\001)sh251.66 100.167 mo(\001)sh251.66 100.186 mo(\001)sh251.66 100.205 mo(\001)sh251.66 100.222 mo(\001)sh251.66 100.238 mo(\001)sh251.66 100.253 mo(\001)sh251.66 100.267 mo(\001)sh251.66 100.28 mo(\001)sh251.66 100.293 mo(\001)sh251.66 100.305 mo(\001)sh251.66 100.317 mo(\001)sh251.66 100.327 mo(\001)sh251.66 100.338 mo(\001)sh251.66 100.348 mo(\001)sh251.66 100.357 mo(\001)sh251.66 100.366 mo(\001)sh251.66 100.375 mo(\001)sh251.66 100.383 mo(\001)sh251.66 100.391 mo(\001)sh251.66 100.398 mo(\001)sh251.66 100.406 mo(\001)sh251.66 100.586 mo(\001)sh251.66 101.832 mo(\001)sh251.66 101.855 mo(\001)sh251.66 101.878 mo(\001)sh251.66 101.902 mo(\001)sh251.66 101.927 mo(\001)sh251.66 101.953 mo(\001)sh251.66 101.981 mo(\001)sh251.66 102.01 mo(\001)sh251.66 102.04 mo(\001)sh251.66 102.071 mo(\001)sh251.66 102.105 mo(\001)sh251.66 102.14 mo(\001)sh251.66 102.177 mo(\001)sh251.66 102.215 mo(\001)sh251.66 102.257 mo(\001)sh251.66 102.3 mo(\001)sh251.66 102.346 mo(\001)sh251.66 102.395 mo(\001)sh251.66 102.447 mo(\001)sh251.66 102.503 mo(\001)sh251.66 102.562 mo(\001)sh251.66 102.625 mo(\001)sh251.66 102.694 mo(\001)sh251.66 102.767 mo(\001)sh251.66 102.846 mo(\001)sh251.66 102.931 mo(\001)sh251.66 103.024 mo(\001)sh251.66 103.125 mo(\001)sh251.66 103.236 mo(\001)sh251.66 103.358 mo(\001)sh251.66 103.492 mo(\001)sh251.66 103.641 mo(\001)sh251.66 103.807 mo(\001)sh251.66 103.994 mo(\001)sh251.66 104.205 mo(\001)sh251.66 104.446 mo(\001)sh251.66 104.723 mo(\001)sh251.66 105.046 mo(\001)sh251.66 105.424 mo(\001)sh251.66 105.873 mo(\001)sh251.66 106.413 mo(\001)sh251.66 107.069 mo(\001)sh251.66 107.876 mo(\001)sh251.66 108.889 mo(\001)sh251.66 110.226 mo(\001)sh251.66 112.127 mo(\001)sh251.66 115.091 mo(\001)sh251.66 120.323 mo(\001)sh251.66 131.985 mo(\001)sh251.66 183.949 mo(\001)sh256.338 71.0508 mo(\001)sh256.338 88.5538 mo(\001)sh256.338 92.4488 mo(\001)sh256.338 94.1898 mo(\001)sh256.338 95.1798 mo(\001)sh256.338 95.8178 mo(\001)sh256.338 96.2629 mo(\001)sh256.338 96.5919 mo(\001)sh256.338 96.8438 mo(\001)sh256.338 97.0429 mo(\001)sh256.338 97.2049 mo(\001)sh256.338 97.3389 mo(\001)sh256.338 97.4519 mo(\001)sh256.338 97.5469 mo(\001)sh256.338 97.6299 mo(\001)sh256.338 97.7019 mo(\001)sh256.338 97.7649 mo(\001)sh256.338 97.8209 mo(\001)sh256.338 97.8709 mo(\001)sh256.338 97.9159 mo(\001)sh256.338 97.9569 mo(\001)sh256.338 97.9939 mo(\001)sh256.338 98.0269 mo(\001)sh256.338 98.0579 mo(\001)sh256.338 98.0869 mo(\001)sh256.338 98.1129 mo(\001)sh256.338 98.1379 mo(\001)sh256.338 98.1599 mo(\001)sh256.338 98.1819 mo(\001)sh256.338 98.2019 mo(\001)sh256.338 98.2199 mo(\001)sh256.338 98.2369 mo(\001)sh256.338 98.2539 mo(\001)sh256.338 98.2689 mo(\001)sh256.338 98.2839 mo(\001)sh256.338 98.2979 mo(\001)sh256.338 98.3109 mo(\001)sh256.338 98.3229 mo(\001)sh256.338 98.3349 mo(\001)sh256.338 98.3459 mo(\001)sh256.338 98.3569 mo(\001)sh256.338 98.3669 mo(\001)sh256.338 98.3759 mo(\001)sh256.338 98.3859 mo(\001)sh256.338 98.3939 mo(\001)sh256.338 98.4029 mo(\001)sh256.338 98.4109 mo(\001)sh256.338 98.4189 mo(\001)sh256.338 98.4259 mo(\001)sh256.338 98.6109 mo(\001)sh256.338 99.8869 mo(\001)sh256.338 99.9089 mo(\001)sh256.338 99.9329 mo(\001)sh256.338 99.9579 mo(\001)sh256.338 99.9829 mo(\001)sh256.338 100.01 mo(\001)sh256.338 100.038 mo(\001)sh256.338 100.068 mo(\001)sh256.338 100.099 mo(\001)sh256.338 100.131 mo(\001)sh256.338 100.165 mo(\001)sh256.338 100.201 mo(\001)sh256.338 100.239 mo(\001)sh256.338 100.279 mo(\001)sh256.338 100.321 mo(\001)sh256.338 100.365 mo(\001)sh256.338 100.412 mo(\001)sh256.338 100.463 mo(\001)sh256.338 100.516 mo(\001)sh256.338 100.573 mo(\001)sh256.338 100.633 mo(\001)sh256.338 100.698 mo(\001)sh256.338 100.768 mo(\001)sh256.338 100.843 mo(\001)sh256.338 100.924 mo(\001)sh256.338 101.012 mo(\001)sh256.338 101.107 mo(\001)sh256.338 101.21 mo(\001)sh256.338 101.323 mo(\001)sh256.338 101.448 mo(\001)sh256.338 101.585 mo(\001)sh256.338 101.738 mo(\001)sh256.338 101.908 mo(\001)sh256.338 102.099 mo(\001)sh256.338 102.315 mo(\001)sh256.338 102.562 mo(\001)sh256.338 102.846 mo(\001)sh256.338 103.176 mo(\001)sh256.338 103.563 mo(\001)sh256.338 104.023 mo(\001)sh256.338 104.576 mo(\001)sh256.338 105.247 mo(\001)sh256.338 106.073 mo(\001)sh256.338 107.11 mo(\001)sh256.338 108.479 mo(\001)sh256.338 110.426 mo(\001)sh256.338 113.459 mo(\001)sh256.338 118.815 mo(\001)sh256.338 130.753 mo(\001)sh256.338 183.949 mo(\001)sh261.016 68.4379 mo(\001)sh261.016 86.3459 mo(\001)sh261.016 90.3309 mo(\001)sh261.016 92.1129 mo(\001)sh261.016 93.1249 mo(\001)sh261.016 93.7768 mo(\001)sh261.016 94.2328 mo(\001)sh261.016 94.5688 mo(\001)sh261.016 94.8268 mo(\001)sh261.016 95.0318 mo(\001)sh261.016 95.1968 mo(\001)sh261.016 95.3338 mo(\001)sh261.016 95.4488 mo(\001)sh261.016 95.5468 mo(\001)sh261.016 95.6318 mo(\001)sh261.016 95.7048 mo(\001)sh261.016 95.7698 mo(\001)sh261.016 95.8269 mo(\001)sh261.016 95.8778 mo(\001)sh261.016 95.9239 mo(\001)sh261.016 95.9659 mo(\001)sh261.016 96.0039 mo(\001)sh261.016 96.0379 mo(\001)sh261.016 96.0698 mo(\001)sh261.016 96.0989 mo(\001)sh261.016 96.1258 mo(\001)sh261.016 96.1508 mo(\001)sh261.016 96.1748 mo(\001)sh261.016 96.1958 mo(\001)sh261.016 96.2168 mo(\001)sh261.016 96.2358 mo(\001)sh261.016 96.2528 mo(\001)sh261.016 96.2698 mo(\001)sh261.016 96.2858 mo(\001)sh261.016 96.3008 mo(\001)sh261.016 96.3148 mo(\001)sh261.016 96.3278 mo(\001)sh261.016 96.3408 mo(\001)sh261.016 96.3528 mo(\001)sh261.016 96.3638 mo(\001)sh261.016 96.3748 mo(\001)sh261.016 96.3858 mo(\001)sh261.016 96.3948 mo(\001)sh261.016 96.4048 mo(\001)sh261.016 96.4138 mo(\001)sh261.016 96.4228 mo(\001)sh261.016 96.4308 mo(\001)sh261.016 96.4388 mo(\001)sh261.016 96.4458 mo(\001)sh261.016 96.6358 mo(\001)sh261.016 97.9408 mo(\001)sh261.016 97.9638 mo(\001)sh261.016 97.9878 mo(\001)sh261.016 98.0128 mo(\001)sh261.016 98.0398 mo(\001)sh261.016 98.0668 mo(\001)sh261.016 98.0958 mo(\001)sh261.016 98.1258 mo(\001)sh261.016 98.1578 mo(\001)sh261.016 98.1908 mo(\001)sh261.016 98.2258 mo(\001)sh261.016 98.2618 mo(\001)sh261.016 98.3008 mo(\001)sh261.016 98.3418 mo(\001)sh261.016 98.3848 mo(\001)sh261.016 98.4298 mo(\001)sh261.016 98.4788 mo(\001)sh261.016 98.5298 mo(\001)sh261.016 98.5848 mo(\001)sh261.016 98.6428 mo(\001)sh261.016 98.7048 mo(\001)sh261.016 98.7708 mo(\001)sh261.016 98.8428 mo(\001)sh261.016 98.9188 mo(\001)sh261.016 99.0018 mo(\001)sh261.016 99.0918 mo(\001)sh261.016 99.1888 mo(\001)sh261.016 99.2948 mo(\001)sh261.016 99.4108 mo(\001)sh261.016 99.5378 mo(\001)sh261.016 99.6788 mo(\001)sh261.016 99.8348 mo(\001)sh261.016 100.009 mo(\001)sh261.016 100.204 mo(\001)sh261.016 100.426 mo(\001)sh261.016 100.678 mo(\001)sh261.016 100.969 mo(\001)sh261.016 101.306 mo(\001)sh261.016 101.702 mo(\001)sh261.016 102.173 mo(\001)sh261.016 102.739 mo(\001)sh261.016 103.426 mo(\001)sh261.016 104.27 mo(\001)sh261.016 105.332 mo(\001)sh261.016 106.732 mo(\001)sh261.016 108.724 mo(\001)sh261.016 111.828 mo(\001)sh261.016 117.308 mo(\001)sh261.016 129.522 mo(\001)sh261.016 183.949 mo(\001)sh265.695 65.8238 mo(\001)sh265.695 84.1368 mo(\001)sh265.695 88.2118 mo(\001)sh265.695 90.0348 mo(\001)sh265.695 91.0698 mo(\001)sh265.695 91.7368 mo(\001)sh265.695 92.2028 mo(\001)sh265.695 92.5468 mo(\001)sh265.695 92.8108 mo(\001)sh265.695 93.0198 mo(\001)sh265.695 93.1888 mo(\001)sh265.695 93.3288 mo(\001)sh265.695 93.4468 mo(\001)sh265.695 93.5468 mo(\001)sh265.695 93.6338 mo(\001)sh265.695 93.7088 mo(\001)sh265.695 93.7748 mo(\001)sh265.695 93.8338 mo(\001)sh265.695 93.8858 mo(\001)sh265.695 93.9328 mo(\001)sh265.695 93.9748 mo(\001)sh265.695 94.0138 mo(\001)sh265.695 94.0488 mo(\001)sh265.695 94.0818 mo(\001)sh265.695 94.1118 mo(\001)sh265.695 94.1388 mo(\001)sh265.695 94.1648 mo(\001)sh265.695 94.1888 mo(\001)sh265.695 94.2108 mo(\001)sh265.695 94.2318 mo(\001)sh265.695 94.2508 mo(\001)sh265.695 94.2688 mo(\001)sh265.695 94.2868 mo(\001)sh265.695 94.3028 mo(\001)sh265.695 94.3178 mo(\001)sh265.695 94.3318 mo(\001)sh265.695 94.3458 mo(\001)sh265.695 94.3588 mo(\001)sh265.695 94.3708 mo(\001)sh265.695 94.3828 mo(\001)sh265.695 94.3938 mo(\001)sh265.695 94.4048 mo(\001)sh265.695 94.4148 mo(\001)sh265.695 94.4238 mo(\001)sh265.695 94.4328 mo(\001)sh265.695 94.4418 mo(\001)sh265.695 94.4508 mo(\001)sh265.695 94.4588 mo(\001)sh265.695 94.4668 mo(\001)sh265.695 94.6598 mo(\001)sh265.695 95.9948 mo(\001)sh265.695 96.0188 mo(\001)sh265.695 96.0428 mo(\001)sh265.695 96.0688 mo(\001)sh265.695 96.0958 mo(\001)sh265.695 96.1238 mo(\001)sh265.695 96.1538 mo(\001)sh265.695 96.1838 mo(\001)sh265.695 96.2168 mo(\001)sh265.695 96.2508 mo(\001)sh265.695 96.2858 mo(\001)sh265.695 96.3238 mo(\001)sh265.695 96.3628 mo(\001)sh265.695 96.4048 mo(\001)sh265.695 96.4488 mo(\001)sh265.695 96.4958 mo(\001)sh265.695 96.5448 mo(\001)sh265.695 96.5978 mo(\001)sh265.695 96.6528 mo(\001)sh265.695 96.7128 mo(\001)sh265.695 96.7758 mo(\001)sh265.695 96.8438 mo(\001)sh265.695 96.9168 mo(\001)sh265.695 96.9958 mo(\001)sh265.695 97.0798 mo(\001)sh265.695 97.1718 mo(\001)sh265.695 97.2708 mo(\001)sh265.695 97.3798 mo(\001)sh265.695 97.4978 mo(\001)sh265.695 97.6278 mo(\001)sh265.695 97.7718 mo(\001)sh265.695 97.9318 mo(\001)sh265.695 98.1098 mo(\001)sh265.695 98.3098 mo(\001)sh265.695 98.5358 mo(\001)sh265.695 98.7938 mo(\001)sh265.695 99.0908 mo(\001)sh265.695 99.4358 mo(\001)sh265.695 99.8418 mo(\001)sh265.695 100.323 mo(\001)sh265.695 100.901 mo(\001)sh265.695 101.604 mo(\001)sh265.695 102.468 mo(\001)sh265.695 103.553 mo(\001)sh265.695 104.985 mo(\001)sh265.695 107.022 mo(\001)sh265.695 110.196 mo(\001)sh265.695 115.8 mo(\001)sh265.695 128.29 mo(\001)sh265.695 183.949 mo(\001)sh270.373 63.2108 mo(\001)sh270.373 81.9288 mo(\001)sh270.373 86.0938 mo(\001)sh270.373 87.9568 mo(\001)sh270.373 89.0148 mo(\001)sh270.373 89.6968 mo(\001)sh270.373 90.1738 mo(\001)sh270.373 90.5248 mo(\001)sh270.373 90.7948 mo(\001)sh270.373 91.0078 mo(\001)sh270.373 91.1808 mo(\001)sh270.373 91.3238 mo(\001)sh270.373 91.4448 mo(\001)sh270.373 91.5468 mo(\001)sh270.373 91.6348 mo(\001)sh270.373 91.7118 mo(\001)sh270.373 91.7798 mo(\001)sh270.373 91.8398 mo(\001)sh270.373 91.8928 mo(\001)sh270.373 91.9408 mo(\001)sh270.373 91.9848 mo(\001)sh270.373 92.0238 mo(\001)sh270.373 92.0608 mo(\001)sh270.373 92.0938 mo(\001)sh270.373 92.1238 mo(\001)sh270.373 92.1518 mo(\001)sh270.373 92.1788 mo(\001)sh270.373 92.2028 mo(\001)sh270.373 92.2258 mo(\001)sh270.373 92.2468 mo(\001)sh270.373 92.2668 mo(\001)sh270.373 92.2848 mo(\001)sh270.373 92.3028 mo(\001)sh270.373 92.3188 mo(\001)sh270.373 92.3348 mo(\001)sh270.373 92.3498 mo(\001)sh270.373 92.3638 mo(\001)sh270.373 92.3768 mo(\001)sh270.373 92.3888 mo(\001)sh270.373 92.4008 mo(\001)sh270.373 92.4128 mo(\001)sh270.373 92.4228 mo(\001)sh270.373 92.4338 mo(\001)sh270.373 92.4438 mo(\001)sh270.373 92.4528 mo(\001)sh270.373 92.4618 mo(\001)sh270.373 92.4708 mo(\001)sh270.373 92.4788 mo(\001)sh270.373 92.4868 mo(\001)sh270.373 92.6848 mo(\001)sh270.373 94.0488 mo(\001)sh270.373 94.0728 mo(\001)sh270.373 94.0978 mo(\001)sh270.373 94.1248 mo(\001)sh270.373 94.1518 mo(\001)sh270.373 94.1808 mo(\001)sh270.373 94.2108 mo(\001)sh270.373 94.2428 mo(\001)sh270.373 94.2758 mo(\001)sh270.373 94.3098 mo(\001)sh270.373 94.3468 mo(\001)sh270.373 94.3848 mo(\001)sh270.373 94.4258 mo(\001)sh270.373 94.4678 mo(\001)sh270.373 94.5128 mo(\001)sh270.373 94.5608 mo(\001)sh270.373 94.6108 mo(\001)sh270.373 94.6648 mo(\001)sh270.373 94.7218 mo(\001)sh270.373 94.7828 mo(\001)sh270.373 94.8478 mo(\001)sh270.373 94.9168 mo(\001)sh270.373 94.9918 mo(\001)sh270.373 95.0718 mo(\001)sh270.373 95.1578 mo(\001)sh270.373 95.2518 mo(\001)sh270.373 95.3538 mo(\001)sh270.373 95.4638 mo(\001)sh270.373 95.5858 mo(\001)sh270.373 95.7188 mo(\001)sh270.373 95.8658 mo(\001)sh270.373 96.0288 mo(\001)sh270.373 96.2108 mo(\001)sh270.373 96.4148 mo(\001)sh270.373 96.6458 mo(\001)sh270.373 96.9098 mo(\001)sh270.373 97.2138 mo(\001)sh270.373 97.5668 mo(\001)sh270.373 97.9808 mo(\001)sh270.373 98.4728 mo(\001)sh270.373 99.0638 mo(\001)sh270.373 99.7818 mo(\001)sh270.373 100.665 mo(\001)sh270.373 101.774 mo(\001)sh270.373 103.238 mo(\001)sh270.373 105.32 mo(\001)sh270.373 108.564 mo(\001)sh270.373 114.292 mo(\001)sh270.373 127.059 mo(\001)sh270.373 183.949 mo(\001)sh275.051 60.5968 mo(\001)sh275.051 79.7208 mo(\001)sh275.051 83.9758 mo(\001)sh275.051 85.8788 mo(\001)sh275.051 86.9598 mo(\001)sh275.051 87.6568 mo(\001)sh275.051 88.1438 mo(\001)sh275.051 88.5028 mo(\001)sh275.051 88.7778 mo(\001)sh275.051 88.9968 mo(\001)sh275.051 89.1728 mo(\001)sh275.051 89.3198 mo(\001)sh275.051 89.4418 mo(\001)sh275.051 89.5468 mo(\001)sh275.051 89.6368 mo(\001)sh275.051 89.7158 mo(\001)sh275.051 89.7848 mo(\001)sh275.051 89.8458 mo(\001)sh275.051 89.9008 mo(\001)sh275.051 89.9498 mo(\001)sh275.051 89.9938 mo(\001)sh275.051 90.0348 mo(\001)sh275.051 90.0718 mo(\001)sh275.051 90.1048 mo(\001)sh275.051 90.1368 mo(\001)sh275.051 90.1648 mo(\001)sh275.051 90.1918 mo(\001)sh275.051 90.2168 mo(\001)sh275.051 90.2398 mo(\001)sh275.051 90.2618 mo(\001)sh275.051 90.2818 mo(\001)sh275.051 90.3008 mo(\001)sh275.051 90.3188 mo(\001)sh275.051 90.3358 mo(\001)sh275.051 90.3518 mo(\001)sh275.051 90.3668 mo(\001)sh275.051 90.3808 mo(\001)sh275.051 90.3948 mo(\001)sh275.051 90.4078 mo(\001)sh275.051 90.4198 mo(\001)sh275.051 90.4308 mo(\001)sh275.051 90.4418 mo(\001)sh275.051 90.4528 mo(\001)sh275.051 90.4628 mo(\001)sh275.051 90.4728 mo(\001)sh275.051 90.4818 mo(\001)sh275.051 90.4908 mo(\001)sh275.051 90.4988 mo(\001)sh275.051 90.5068 mo(\001)sh275.051 90.7088 mo(\001)sh275.051 92.1028 mo(\001)sh275.051 92.1278 mo(\001)sh275.051 92.1538 mo(\001)sh275.051 92.1808 mo(\001)sh275.051 92.2088 mo(\001)sh275.051 92.2378 mo(\001)sh275.051 92.2688 mo(\001)sh275.051 92.3008 mo(\001)sh275.051 92.3348 mo(\001)sh275.051 92.3698 mo(\001)sh275.051 92.4068 mo(\001)sh275.051 92.4468 mo(\001)sh275.051 92.4878 mo(\001)sh275.051 92.5308 mo(\001)sh275.051 92.5768 mo(\001)sh275.051 92.6258 mo(\001)sh275.051 92.6778 mo(\001)sh275.051 92.7318 mo(\001)sh275.051 92.7908 mo(\001)sh275.051 92.8528 mo(\001)sh275.051 92.9188 mo(\001)sh275.051 92.9898 mo(\001)sh275.051 93.0658 mo(\001)sh275.051 93.1478 mo(\001)sh275.051 93.2358 mo(\001)sh275.051 93.3318 mo(\001)sh275.051 93.4358 mo(\001)sh275.051 93.5488 mo(\001)sh275.051 93.6728 mo(\001)sh275.051 93.8088 mo(\001)sh275.051 93.9588 mo(\001)sh275.051 94.1258 mo(\001)sh275.051 94.3118 mo(\001)sh275.051 94.5198 mo(\001)sh275.051 94.7568 mo(\001)sh275.051 95.0258 mo(\001)sh275.051 95.3358 mo(\001)sh275.051 95.6968 mo(\001)sh275.051 96.1198 mo(\001)sh275.051 96.6228 mo(\001)sh275.051 97.2268 mo(\001)sh275.051 97.9598 mo(\001)sh275.051 98.8618 mo(\001)sh275.051 99.9958 mo(\001)sh275.051 101.491 mo(\001)sh275.051 103.618 mo(\001)sh275.051 106.932 mo(\001)sh275.051 112.785 mo(\001)sh275.051 125.828 mo(\001)sh275.051 183.949 mo(\001)sh279.729 57.9837 mo(\001)sh279.729 77.5127 mo(\001)sh279.729 81.8577 mo(\001)sh279.729 83.8017 mo(\001)sh279.729 84.9047 mo(\001)sh279.729 85.6167 mo(\001)sh279.729 86.1137 mo(\001)sh279.729 86.4807 mo(\001)sh279.729 86.7617 mo(\001)sh279.729 86.9847 mo(\001)sh279.729 87.1647 mo(\001)sh279.729 87.3147 mo(\001)sh279.729 87.4397 mo(\001)sh279.729 87.5467 mo(\001)sh279.729 87.6387 mo(\001)sh279.729 87.7187 mo(\001)sh279.729 87.7897 mo(\001)sh279.729 87.8517 mo(\001)sh279.729 87.9077 mo(\001)sh279.729 87.9577 mo(\001)sh279.729 88.0037 mo(\001)sh279.729 88.0447 mo(\001)sh279.729 88.0827 mo(\001)sh279.729 88.1167 mo(\001)sh279.729 88.1487 mo(\001)sh279.729 88.1787 mo(\001)sh279.729 88.2057 mo(\001)sh279.729 88.2307 mo(\001)sh279.729 88.2547 mo(\001)sh279.729 88.2767 mo(\001)sh279.729 88.2977 mo(\001)sh279.729 88.3167 mo(\001)sh279.729 88.3347 mo(\001)sh279.729 88.3527 mo(\001)sh279.729 88.3687 mo(\001)sh279.729 88.3837 mo(\001)sh279.729 88.3987 mo(\001)sh279.729 88.4127 mo(\001)sh279.729 88.4257 mo(\001)sh279.729 88.4377 mo(\001)sh279.729 88.4497 mo(\001)sh279.729 88.4607 mo(\001)sh279.729 88.4717 mo(\001)sh279.729 88.4817 mo(\001)sh279.729 88.4917 mo(\001)sh279.729 88.5017 mo(\001)sh279.729 88.5107 mo(\001)sh279.729 88.5187 mo(\001)sh279.729 88.5277 mo(\001)sh279.729 88.7337 mo(\001)sh279.729 90.1567 mo(\001)sh279.729 90.1817 mo(\001)sh279.729 90.2087 mo(\001)sh279.729 90.2357 mo(\001)sh279.729 90.2647 mo(\001)sh279.729 90.2947 mo(\001)sh279.729 90.3267 mo(\001)sh279.729 90.3587 mo(\001)sh279.729 90.3937 mo(\001)sh279.729 90.4297 mo(\001)sh279.729 90.4677 mo(\001)sh279.729 90.5077 mo(\001)sh279.729 90.5497 mo(\001)sh279.729 90.5947 mo(\001)sh279.729 90.6417 mo(\001)sh279.729 90.6907 mo(\001)sh279.729 90.7437 mo(\001)sh279.729 90.7997 mo(\001)sh279.729 90.8587 mo(\001)sh279.729 90.9227 mo(\001)sh279.729 90.9897 mo(\001)sh279.729 91.0627 mo(\001)sh279.729 91.1407 mo(\001)sh279.729 91.2237 mo(\001)sh279.729 91.3147 mo(\001)sh279.729 91.4117 mo(\001)sh279.729 91.5177 mo(\001)sh279.729 91.6337 mo(\001)sh279.729 91.7597 mo(\001)sh279.729 91.8987 mo(\001)sh279.729 92.0527 mo(\001)sh279.729 92.2227 mo(\001)sh279.729 92.4117 mo(\001)sh279.729 92.6257 mo(\001)sh279.729 92.8667 mo(\001)sh279.729 93.1417 mo(\001)sh279.729 93.4587 mo(\001)sh279.729 93.8267 mo(\001)sh279.729 94.2587 mo(\001)sh279.729 94.7727 mo(\001)sh279.729 95.3887 mo(\001)sh279.729 96.1377 mo(\001)sh279.729 97.0587 mo(\001)sh279.729 98.2167 mo(\001)sh279.729 99.7437 mo(\001)sh279.729 101.916 mo(\001)sh279.729 105.301 mo(\001)sh279.729 111.277 mo(\001)sh279.729 124.596 mo(\001)sh279.729 183.949 mo(\001)sh284.407 55.3707 mo(\001)sh284.407 75.3037 mo(\001)sh284.407 79.7397 mo(\001)sh284.407 81.7237 mo(\001)sh284.407 82.8507 mo(\001)sh284.407 83.5767 mo(\001)sh284.407 84.0837 mo(\001)sh284.407 84.4587 mo(\001)sh284.407 84.7457 mo(\001)sh284.407 84.9727 mo(\001)sh284.407 85.1577 mo(\001)sh284.407 85.3097 mo(\001)sh284.407 85.4377 mo(\001)sh284.407 85.5467 mo(\001)sh284.407 85.6407 mo(\001)sh284.407 85.7227 mo(\001)sh284.407 85.7947 mo(\001)sh284.407 85.8587 mo(\001)sh284.407 85.9157 mo(\001)sh284.407 85.9667 mo(\001)sh284.407 86.0127 mo(\001)sh284.407 86.0547 mo(\001)sh284.407 86.0937 mo(\001)sh284.407 86.1287 mo(\001)sh284.407 86.1617 mo(\001)sh284.407 86.1917 mo(\001)sh284.407 86.2187 mo(\001)sh284.407 86.2447 mo(\001)sh284.407 86.2697 mo(\001)sh284.407 86.2917 mo(\001)sh284.407 86.3127 mo(\001)sh284.407 86.3327 mo(\001)sh284.407 86.3517 mo(\001)sh284.407 86.3687 mo(\001)sh284.407 86.3857 mo(\001)sh284.407 86.4017 mo(\001)sh284.407 86.4157 mo(\001)sh284.407 86.4307 mo(\001)sh284.407 86.4437 mo(\001)sh284.407 86.4567 mo(\001)sh284.407 86.4687 mo(\001)sh284.407 86.4797 mo(\001)sh284.407 86.4907 mo(\001)sh284.407 86.5017 mo(\001)sh284.407 86.5117 mo(\001)sh284.407 86.5207 mo(\001)sh284.407 86.5307 mo(\001)sh284.407 86.5387 mo(\001)sh284.407 86.5477 mo(\001)sh284.407 86.7577 mo(\001)sh284.407 88.2107 mo(\001)sh284.407 88.2367 mo(\001)sh284.407 88.2637 mo(\001)sh284.407 88.2917 mo(\001)sh284.407 88.3207 mo(\001)sh284.407 88.3517 mo(\001)sh284.407 88.3837 mo(\001)sh284.407 88.4177 mo(\001)sh284.407 88.4527 mo(\001)sh284.407 88.4897 mo(\001)sh284.407 88.5287 mo(\001)sh284.407 88.5687 mo(\001)sh284.407 88.6117 mo(\001)sh284.407 88.6577 mo(\001)sh284.407 88.7057 mo(\001)sh284.407 88.7557 mo(\001)sh284.407 88.8097 mo(\001)sh284.407 88.8667 mo(\001)sh284.407 88.9277 mo(\001)sh284.407 88.9927 mo(\001)sh284.407 89.0617 mo(\001)sh284.407 89.1357 mo(\001)sh284.407 89.2147 mo(\001)sh284.407 89.3007 mo(\001)sh284.407 89.3927 mo(\001)sh284.407 89.4917 mo(\001)sh284.407 89.6007 mo(\001)sh284.407 89.7187 mo(\001)sh284.407 89.8477 mo(\001)sh284.407 89.9887 mo(\001)sh284.407 90.1457 mo(\001)sh284.407 90.3197 mo(\001)sh284.407 90.5127 mo(\001)sh284.407 90.7307 mo(\001)sh284.407 90.9767 mo(\001)sh284.407 91.2577 mo(\001)sh284.407 91.5817 mo(\001)sh284.407 91.9567 mo(\001)sh284.407 92.3977 mo(\001)sh284.407 92.9227 mo(\001)sh284.407 93.5517 mo(\001)sh284.407 94.3167 mo(\001)sh284.407 95.2567 mo(\001)sh284.407 96.4377 mo(\001)sh284.407 97.9967 mo(\001)sh284.407 100.214 mo(\001)sh284.407 103.669 mo(\001)sh284.407 109.769 mo(\001)sh284.407 123.365 mo(\001)sh284.407 183.949 mo(\001)sh289.086 52.7567 mo(\001)sh289.086 73.0957 mo(\001)sh289.086 77.6217 mo(\001)sh289.086 79.6457 mo(\001)sh289.086 80.7957 mo(\001)sh289.086 81.5367 mo(\001)sh289.086 82.0547 mo(\001)sh289.086 82.4357 mo(\001)sh289.086 82.7287 mo(\001)sh289.086 82.9607 mo(\001)sh289.086 83.1497 mo(\001)sh289.086 83.3047 mo(\001)sh289.086 83.4357 mo(\001)sh289.086 83.5467 mo(\001)sh289.086 83.6427 mo(\001)sh289.086 83.7267 mo(\001)sh289.086 83.7997 mo(\001)sh289.086 83.8647 mo(\001)sh289.086 83.9227 mo(\001)sh289.086 83.9747 mo(\001)sh289.086 84.0227 mo(\001)sh289.086 84.0657 mo(\001)sh289.086 84.1047 mo(\001)sh289.086 84.1407 mo(\001)sh289.086 84.1737 mo(\001)sh289.086 84.2047 mo(\001)sh289.086 84.2327 mo(\001)sh289.086 84.2597 mo(\001)sh289.086 84.2837 mo(\001)sh289.086 84.3067 mo(\001)sh289.086 84.3287 mo(\001)sh289.086 84.3487 mo(\001)sh289.086 84.3677 mo(\001)sh289.086 84.3857 mo(\001)sh289.086 84.4027 mo(\001)sh289.086 84.4187 mo(\001)sh289.086 84.4337 mo(\001)sh289.086 84.4477 mo(\001)sh289.086 84.4617 mo(\001)sh289.086 84.4747 mo(\001)sh289.086 84.4867 mo(\001)sh289.086 84.4987 mo(\001)sh289.086 84.5097 mo(\001)sh289.086 84.5207 mo(\001)sh289.086 84.5307 mo(\001)sh289.086 84.5407 mo(\001)sh289.086 84.5507 mo(\001)sh289.086 84.5597 mo(\001)sh289.086 84.5677 mo(\001)sh289.086 84.7827 mo(\001)sh289.086 86.2647 mo(\001)sh289.086 86.2916 mo(\001)sh289.086 86.3186 mo(\001)sh289.086 86.3476 mo(\001)sh289.086 86.3776 mo(\001)sh289.086 86.4087 mo(\001)sh289.086 86.4417 mo(\001)sh289.086 86.4757 mo(\001)sh289.086 86.5117 mo(\001)sh289.086 86.5496 mo(\001)sh289.086 86.5886 mo(\001)sh289.086 86.6307 mo(\001)sh289.086 86.6747 mo(\001)sh289.086 86.7207 mo(\001)sh289.086 86.7697 mo(\001)sh289.086 86.8217 mo(\001)sh289.086 86.8767 mo(\001)sh289.086 86.9347 mo(\001)sh289.086 86.9967 mo(\001)sh289.086 87.0626 mo(\001)sh289.086 87.1327 mo(\001)sh289.086 87.2087 mo(\001)sh289.086 87.2897 mo(\001)sh289.086 87.3767 mo(\001)sh289.086 87.4707 mo(\001)sh289.086 87.5727 mo(\001)sh289.086 87.6827 mo(\001)sh289.086 87.8027 mo(\001)sh289.086 87.9347 mo(\001)sh289.086 88.0797 mo(\001)sh289.086 88.2387 mo(\001)sh289.086 88.4166 mo(\001)sh289.086 88.6137 mo(\001)sh289.086 88.8357 mo(\001)sh289.086 89.0877 mo(\001)sh289.086 89.3737 mo(\001)sh289.086 89.7037 mo(\001)sh289.086 90.0877 mo(\001)sh289.086 90.5377 mo(\001)sh289.086 91.0716 mo(\001)sh289.086 91.7147 mo(\001)sh289.086 92.4947 mo(\001)sh289.086 93.4537 mo(\001)sh289.086 94.6596 mo(\001)sh289.086 96.2496 mo(\001)sh289.086 98.5116 mo(\001)sh289.086 102.037 mo(\001)sh289.086 108.261 mo(\001)sh289.086 122.134 mo(\001)sh289.086 183.949 mo(\001)sh293.764 50.1436 mo(\001)sh293.764 70.8876 mo(\001)sh293.764 75.5036 mo(\001)sh293.764 77.5676 mo(\001)sh293.764 78.7406 mo(\001)sh293.764 79.4966 mo(\001)sh293.764 80.0246 mo(\001)sh293.764 80.4136 mo(\001)sh293.764 80.7126 mo(\001)sh293.764 80.9496 mo(\001)sh293.764 81.1416 mo(\001)sh293.764 81.2996 mo(\001)sh293.764 81.4326 mo(\001)sh293.764 81.5466 mo(\001)sh293.764 81.6446 mo(\001)sh293.764 81.7296 mo(\001)sh293.764 81.8046 mo(\001)sh293.764 81.8706 mo(\001)sh293.764 81.9306 mo(\001)sh293.764 81.9836 mo(\001)sh293.764 82.0316 mo(\001)sh293.764 82.0756 mo(\001)sh293.764 82.1156 mo(\001)sh293.764 82.1526 mo(\001)sh293.764 82.1856 mo(\001)sh293.764 82.2176 mo(\001)sh293.764 82.2466 mo(\001)sh293.764 82.2736 mo(\001)sh293.764 82.2986 mo(\001)sh293.764 82.3216 mo(\001)sh293.764 82.3436 mo(\001)sh293.764 82.3646 mo(\001)sh293.764 82.3836 mo(\001)sh293.764 82.4026 mo(\001)sh293.764 82.4196 mo(\001)sh293.764 82.4356 mo(\001)sh293.764 82.4516 mo(\001)sh293.764 82.4656 mo(\001)sh293.764 82.4796 mo(\001)sh293.764 82.4936 mo(\001)sh293.764 82.5056 mo(\001)sh293.764 82.5176 mo(\001)sh293.764 82.5296 mo(\001)sh293.764 82.5396 mo(\001)sh293.764 82.5506 mo(\001)sh293.764 82.5606 mo(\001)sh293.764 82.5696 mo(\001)sh293.764 82.5796 mo(\001)sh293.764 82.5876 mo(\001)sh293.764 82.8076 mo(\001)sh293.764 84.3186 mo(\001)sh293.764 84.3456 mo(\001)sh293.764 84.3736 mo(\001)sh293.764 84.4036 mo(\001)sh293.764 84.4336 mo(\001)sh293.764 84.4656 mo(\001)sh293.764 84.4986 mo(\001)sh293.764 84.5336 mo(\001)sh293.764 84.5706 mo(\001)sh293.764 84.6086 mo(\001)sh293.764 84.6496 mo(\001)sh293.764 84.6916 mo(\001)sh293.764 84.7366 mo(\001)sh293.764 84.7836 mo(\001)sh293.764 84.8336 mo(\001)sh293.764 84.8866 mo(\001)sh293.764 84.9426 mo(\001)sh293.764 85.0016 mo(\001)sh293.764 85.0646 mo(\001)sh293.764 85.1326 mo(\001)sh293.764 85.2046 mo(\001)sh293.764 85.2816 mo(\001)sh293.764 85.3636 mo(\001)sh293.764 85.4526 mo(\001)sh293.764 85.5486 mo(\001)sh293.764 85.6526 mo(\001)sh293.764 85.7646 mo(\001)sh293.764 85.8876 mo(\001)sh293.764 86.0216 mo(\001)sh293.764 86.1696 mo(\001)sh293.764 86.3326 mo(\001)sh293.764 86.5136 mo(\001)sh293.764 86.7146 mo(\001)sh293.764 86.9416 mo(\001)sh293.764 87.1976 mo(\001)sh293.764 87.4896 mo(\001)sh293.764 87.8266 mo(\001)sh293.764 88.2176 mo(\001)sh293.764 88.6766 mo(\001)sh293.764 89.2216 mo(\001)sh293.764 89.8766 mo(\001)sh293.764 90.6726 mo(\001)sh293.764 91.6506 mo(\001)sh293.764 92.8806 mo(\001)sh293.764 94.5026 mo(\001)sh293.764 96.8096 mo(\001)sh293.764 100.406 mo(\001)sh293.764 106.754 mo(\001)sh293.764 120.902 mo(\001)sh293.764 183.949 mo(\001)sh298.442 47.5296 mo(\001)sh298.442 68.6796 mo(\001)sh298.442 73.3856 mo(\001)sh298.442 75.4906 mo(\001)sh298.442 76.6856 mo(\001)sh298.442 77.4566 mo(\001)sh298.442 77.9946 mo(\001)sh298.442 78.3916 mo(\001)sh298.442 78.6966 mo(\001)sh298.442 78.9376 mo(\001)sh298.442 79.1336 mo(\001)sh298.442 79.2946 mo(\001)sh298.442 79.4306 mo(\001)sh298.442 79.5466 mo(\001)sh298.442 79.6466 mo(\001)sh298.442 79.7336 mo(\001)sh298.442 79.8096 mo(\001)sh298.442 79.8776 mo(\001)sh298.442 79.9376 mo(\001)sh298.442 79.9916 mo(\001)sh298.442 80.0406 mo(\001)sh298.442 80.0856 mo(\001)sh298.442 80.1266 mo(\001)sh298.442 80.1636 mo(\001)sh298.442 80.1986 mo(\001)sh298.442 80.2306 mo(\001)sh298.442 80.2596 mo(\001)sh298.442 80.2876 mo(\001)sh298.442 80.3136 mo(\001)sh298.442 80.3366 mo(\001)sh298.442 80.3596 mo(\001)sh298.442 80.3806 mo(\001)sh298.442 80.4006 mo(\001)sh298.442 80.4186 mo(\001)sh298.442 80.4366 mo(\001)sh298.442 80.4536 mo(\001)sh298.442 80.4686 mo(\001)sh298.442 80.4836 mo(\001)sh298.442 80.4976 mo(\001)sh298.442 80.5116 mo(\001)sh298.442 80.5246 mo(\001)sh298.442 80.5366 mo(\001)sh298.442 80.5486 mo(\001)sh298.442 80.5596 mo(\001)sh298.442 80.5696 mo(\001)sh298.442 80.5806 mo(\001)sh298.442 80.5896 mo(\001)sh298.442 80.5996 mo(\001)sh298.442 80.6086 mo(\001)sh298.442 80.8316 mo(\001)sh298.442 82.3736 mo(\001)sh298.442 82.4006 mo(\001)sh298.442 82.4296 mo(\001)sh298.442 82.4586 mo(\001)sh298.442 82.4896 mo(\001)sh298.442 82.5226 mo(\001)sh298.442 82.5566 mo(\001)sh298.442 82.5926 mo(\001)sh298.442 82.6296 mo(\001)sh298.442 82.6686 mo(\001)sh298.442 82.7096 mo(\001)sh298.442 82.7536 mo(\001)sh298.442 82.7986 mo(\001)sh298.442 82.8466 mo(\001)sh298.442 82.8976 mo(\001)sh298.442 82.9516 mo(\001)sh298.442 83.0086 mo(\001)sh298.442 83.0696 mo(\001)sh298.442 83.1336 mo(\001)sh298.442 83.2026 mo(\001)sh298.442 83.2756 mo(\001)sh298.442 83.3536 mo(\001)sh298.442 83.4386 mo(\001)sh298.442 83.5286 mo(\001)sh298.442 83.6266 mo(\001)sh298.442 83.7326 mo(\001)sh298.442 83.8476 mo(\001)sh298.442 83.9726 mo(\001)sh298.442 84.1096 mo(\001)sh298.442 84.2596 mo(\001)sh298.442 84.4256 mo(\001)sh298.442 84.6096 mo(\001)sh298.442 84.8156 mo(\001)sh298.442 85.0466 mo(\001)sh298.442 85.3076 mo(\001)sh298.442 85.6056 mo(\001)sh298.442 85.9486 mo(\001)sh298.442 86.3476 mo(\001)sh298.442 86.8156 mo(\001)sh298.442 87.3716 mo(\001)sh298.442 88.0396 mo(\001)sh298.442 88.8506 mo(\001)sh298.442 89.8486 mo(\001)sh298.442 91.1016 mo(\001)sh298.442 92.7557 mo(\001)sh298.442 95.1077 mo(\001)sh298.442 98.7737 mo(\001)sh298.442 105.246 mo(\001)sh298.442 119.671 mo(\001)sh298.442 183.949 mo(\001)sh303.12 44.9167 mo(\001)sh303.12 66.4717 mo(\001)sh303.12 71.2677 mo(\001)sh303.12 73.4127 mo(\001)sh303.12 74.6307 mo(\001)sh303.12 75.4167 mo(\001)sh303.12 75.9647 mo(\001)sh303.12 76.3697 mo(\001)sh303.12 76.6807 mo(\001)sh303.12 76.9257 mo(\001)sh303.12 77.1257 mo(\001)sh303.12 77.2897 mo(\001)sh303.12 77.4287 mo(\001)sh303.12 77.5467 mo(\001)sh303.12 77.6487 mo(\001)sh303.12 77.7367 mo(\001)sh303.12 77.8147 mo(\001)sh303.12 77.8837 mo(\001)sh303.12 77.9447 mo(\001)sh303.12 78.0007 mo(\001)sh303.12 78.0507 mo(\001)sh303.12 78.0957 mo(\001)sh303.12 78.1377 mo(\001)sh303.12 78.1757 mo(\001)sh303.12 78.2107 mo(\001)sh303.12 78.2437 mo(\001)sh303.12 78.2737 mo(\001)sh303.12 78.3017 mo(\001)sh303.12 78.3277 mo(\001)sh303.12 78.3527 mo(\001)sh303.12 78.3747 mo(\001)sh303.12 78.3967 mo(\001)sh303.12 78.4167 mo(\001)sh303.12 78.4357 mo(\001)sh303.12 78.4537 mo(\001)sh303.12 78.4707 mo(\001)sh303.12 78.4867 mo(\001)sh303.12 78.5017 mo(\001)sh303.12 78.5167 mo(\001)sh303.12 78.5297 mo(\001)sh303.12 78.5427 mo(\001)sh303.12 78.5557 mo(\001)sh303.12 78.5677 mo(\001)sh303.12 78.5787 mo(\001)sh303.12 78.5897 mo(\001)sh303.12 78.5997 mo(\001)sh303.12 78.6097 mo(\001)sh303.12 78.6197 mo(\001)sh303.12 78.6287 mo(\001)sh303.12 78.8567 mo(\001)sh303.12 80.4277 mo(\001)sh303.12 80.4557 mo(\001)sh303.12 80.4847 mo(\001)sh303.12 80.5147 mo(\001)sh303.12 80.5467 mo(\001)sh303.12 80.5797 mo(\001)sh303.12 80.6147 mo(\001)sh303.12 80.6507 mo(\001)sh303.12 80.6887 mo(\001)sh303.12 80.7287 mo(\001)sh303.12 80.7707 mo(\001)sh303.12 80.8147 mo(\001)sh303.12 80.8617 mo(\001)sh303.12 80.9107 mo(\001)sh303.12 80.9617 mo(\001)sh303.12 81.0167 mo(\001)sh303.12 81.0747 mo(\001)sh303.12 81.1367 mo(\001)sh303.12 81.2027 mo(\001)sh303.12 81.2727 mo(\001)sh303.12 81.3467 mo(\001)sh303.12 81.4267 mo(\001)sh303.12 81.5127 mo(\001)sh303.12 81.6057 mo(\001)sh303.12 81.7047 mo(\001)sh303.12 81.8127 mo(\001)sh303.12 81.9297 mo(\001)sh303.12 82.0577 mo(\001)sh303.12 82.1967 mo(\001)sh303.12 82.3497 mo(\001)sh303.12 82.5197 mo(\001)sh303.12 82.7067 mo(\001)sh303.12 82.9167 mo(\001)sh303.12 83.1517 mo(\001)sh303.12 83.4187 mo(\001)sh303.12 83.7217 mo(\001)sh303.12 84.0717 mo(\001)sh303.12 84.4777 mo(\001)sh303.12 84.9547 mo(\001)sh303.12 85.5217 mo(\001)sh303.12 86.2027 mo(\001)sh303.12 87.0287 mo(\001)sh303.12 88.0457 mo(\001)sh303.12 89.3237 mo(\001)sh303.12 91.0087 mo(\001)sh303.12 93.4057 mo(\001)sh303.12 97.1417 mo(\001)sh303.12 103.738 mo(\001)sh303.12 118.439 mo(\001)sh303.12 183.949 mo(\001)sh307.798 42.3037 mo(\001)sh307.798 64.2627 mo(\001)sh307.798 69.1497 mo(\001)sh307.798 71.3347 mo(\001)sh307.798 72.5757 mo(\001)sh307.798 73.3767 mo(\001)sh307.798 73.9357 mo(\001)sh307.798 74.3477 mo(\001)sh307.798 74.6637 mo(\001)sh307.798 74.9147 mo(\001)sh307.798 75.1177 mo(\001)sh307.798 75.2857 mo(\001)sh307.798 75.4267 mo(\001)sh307.798 75.5467 mo(\001)sh307.798 75.6497 mo(\001)sh307.798 75.7407 mo(\001)sh307.798 75.8197 mo(\001)sh307.798 75.8897 mo(\001)sh307.798 75.9527 mo(\001)sh307.798 76.0087 mo(\001)sh307.798 76.0597 mo(\001)sh307.798 76.1067 mo(\001)sh307.798 76.1487 mo(\001)sh307.798 76.1877 mo(\001)sh307.798 76.2237 mo(\001)sh307.798 76.2567 mo(\001)sh307.798 76.2877 mo(\001)sh307.798 76.3157 mo(\001)sh307.798 76.3427 mo(\001)sh307.798 76.3677 mo(\001)sh307.798 76.3907 mo(\001)sh307.798 76.4127 mo(\001)sh307.798 76.4327 mo(\001)sh307.798 76.4527 mo(\001)sh307.798 76.4707 mo(\001)sh307.798 76.4877 mo(\001)sh307.798 76.5047 mo(\001)sh307.798 76.5197 mo(\001)sh307.798 76.5347 mo(\001)sh307.798 76.5487 mo(\001)sh307.798 76.5617 mo(\001)sh307.798 76.5747 mo(\001)sh307.798 76.5867 mo(\001)sh307.798 76.5987 mo(\001)sh307.798 76.6097 mo(\001)sh307.798 76.6197 mo(\001)sh307.798 76.6297 mo(\001)sh307.798 76.6397 mo(\001)sh307.798 76.6487 mo(\001)sh307.798 76.8807 mo(\001)sh307.798 78.4817 mo(\001)sh307.798 78.5097 mo(\001)sh307.798 78.5397 mo(\001)sh307.798 78.5707 mo(\001)sh307.798 78.6027 mo(\001)sh307.798 78.6367 mo(\001)sh307.798 78.6717 mo(\001)sh307.798 78.7087 mo(\001)sh307.798 78.7477 mo(\001)sh307.798 78.7887 mo(\001)sh307.798 78.8307 mo(\001)sh307.798 78.8757 mo(\001)sh307.798 78.9237 mo(\001)sh307.798 78.9737 mo(\001)sh307.798 79.0267 mo(\001)sh307.798 79.0817 mo(\001)sh307.798 79.1417 mo(\001)sh307.798 79.2047 mo(\001)sh307.798 79.2707 mo(\001)sh307.798 79.3427 mo(\001)sh307.798 79.4187 mo(\001)sh307.798 79.4997 mo(\001)sh307.798 79.5877 mo(\001)sh307.798 79.6817 mo(\001)sh307.798 79.7827 mo(\001)sh307.798 79.8927 mo(\001)sh307.798 80.0117 mo(\001)sh307.798 80.1417 mo(\001)sh307.798 80.2847 mo(\001)sh307.798 80.4407 mo(\001)sh307.798 80.6127 mo(\001)sh307.798 80.8037 mo(\001)sh307.798 81.0177 mo(\001)sh307.798 81.2577 mo(\001)sh307.798 81.5287 mo(\001)sh307.798 81.8387 mo(\001)sh307.798 82.1947 mo(\001)sh307.798 82.6087 mo(\001)sh307.798 83.0947 mo(\001)sh307.798 83.6717 mo(\001)sh307.798 84.3647 mo(\001)sh307.798 85.2077 mo(\001)sh307.798 86.2427 mo(\001)sh307.798 87.5447 mo(\001)sh307.798 89.2617 mo(\001)sh307.798 91.7037 mo(\001)sh307.798 95.5097 mo(\001)sh307.798 102.231 mo(\001)sh307.798 117.208 mo(\001)sh307.798 183.949 mo(\001)sh312.477 39.6897 mo(\001)sh312.477 62.0547 mo(\001)sh312.477 67.0317 mo(\001)sh312.477 69.2567 mo(\001)sh312.477 70.5207 mo(\001)sh312.477 71.3367 mo(\001)sh312.477 71.9057 mo(\001)sh312.477 72.3257 mo(\001)sh312.477 72.6477 mo(\001)sh312.477 72.9027 mo(\001)sh312.477 73.1097 mo(\001)sh312.477 73.2807 mo(\001)sh312.477 73.4237 mo(\001)sh312.477 73.5467 mo(\001)sh312.477 73.6517 mo(\001)sh312.477 73.7437 mo(\001)sh312.477 73.8247 mo(\001)sh312.477 73.8957 mo(\001)sh312.477 73.9597 mo(\001)sh312.477 74.0177 mo(\001)sh312.477 74.0697 mo(\001)sh312.477 74.1167 mo(\001)sh312.477 74.1597 mo(\001)sh312.477 74.1997 mo(\001)sh312.477 74.2357 mo(\001)sh312.477 74.2697 mo(\001)sh312.477 74.3007 mo(\001)sh312.477 74.3297 mo(\001)sh312.477 74.3567 mo(\001)sh312.477 74.3827 mo(\001)sh312.477 74.4057 mo(\001)sh312.477 74.4287 mo(\001)sh312.477 74.4497 mo(\001)sh312.477 74.4687 mo(\001)sh312.477 74.4877 mo(\001)sh312.477 74.5057 mo(\001)sh312.477 74.5217 mo(\001)sh312.477 74.5377 mo(\001)sh312.477 74.5527 mo(\001)sh312.477 74.5667 mo(\001)sh312.477 74.5807 mo(\001)sh312.477 74.5937 mo(\001)sh312.477 74.6057 mo(\001)sh312.477 74.6177 mo(\001)sh312.477 74.6287 mo(\001)sh312.477 74.6397 mo(\001)sh312.477 74.6497 mo(\001)sh312.477 74.6597 mo(\001)sh312.477 74.6697 mo(\001)sh312.477 74.9057 mo(\001)sh312.477 76.5357 mo(\001)sh312.477 76.5647 mo(\001)sh312.477 76.5947 mo(\001)sh312.477 76.6267 mo(\001)sh312.477 76.6597 mo(\001)sh312.477 76.6937 mo(\001)sh312.477 76.7297 mo(\001)sh312.477 76.7677 mo(\001)sh312.477 76.8067 mo(\001)sh312.477 76.8477 mo(\001)sh312.477 76.8917 mo(\001)sh312.477 76.9377 mo(\001)sh312.477 76.9857 mo(\001)sh312.477 77.0367 mo(\001)sh312.477 77.0907 mo(\001)sh312.477 77.1477 mo(\001)sh312.477 77.2077 mo(\001)sh312.477 77.2717 mo(\001)sh312.477 77.3397 mo(\001)sh312.477 77.4127 mo(\001)sh312.477 77.4897 mo(\001)sh312.477 77.5727 mo(\001)sh312.477 77.6617 mo(\001)sh312.477 77.7577 mo(\001)sh312.477 77.8607 mo(\001)sh312.477 77.9727 mo(\001)sh312.477 78.0947 mo(\001)sh312.477 78.2267 mo(\001)sh312.477 78.3717 mo(\001)sh312.477 78.5307 mo(\001)sh312.477 78.7067 mo(\001)sh312.477 78.9007 mo(\001)sh312.477 79.1187 mo(\001)sh312.477 79.3627 mo(\001)sh312.477 79.6387 mo(\001)sh312.477 79.9547 mo(\001)sh312.477 80.3167 mo(\001)sh312.477 80.7387 mo(\001)sh312.477 81.2337 mo(\001)sh312.477 81.8217 mo(\001)sh312.477 82.5277 mo(\001)sh312.477 83.3857 mo(\001)sh312.477 84.4407 mo(\001)sh312.477 85.7656 mo(\001)sh312.477 87.5146 mo(\001)sh312.477 90.0016 mo(\001)sh312.477 93.8786 mo(\001)sh312.477 100.723 mo(\001)sh312.477 115.977 mo(\001)sh312.477 183.949 mo(\001)sh317.155 37.0766 mo(\001)sh317.155 59.8466 mo(\001)sh317.155 64.9136 mo(\001)sh317.155 67.1797 mo(\001)sh317.155 68.4667 mo(\001)sh317.155 69.2967 mo(\001)sh317.155 69.8756 mo(\001)sh317.155 70.3027 mo(\001)sh317.155 70.6316 mo(\001)sh317.155 70.8906 mo(\001)sh317.155 71.1016 mo(\001)sh317.155 71.2756 mo(\001)sh317.155 71.4216 mo(\001)sh317.155 71.5466 mo(\001)sh317.155 71.6536 mo(\001)sh317.155 71.7476 mo(\001)sh317.155 71.8296 mo(\001)sh317.155 71.9026 mo(\001)sh317.155 71.9676 mo(\001)sh317.155 72.0256 mo(\001)sh317.155 72.0786 mo(\001)sh317.155 72.1266 mo(\001)sh317.155 72.1706 mo(\001)sh317.155 72.2116 mo(\001)sh317.155 72.2486 mo(\001)sh317.155 72.2826 mo(\001)sh317.155 72.3146 mo(\001)sh317.155 72.3436 mo(\001)sh317.155 72.3716 mo(\001)sh317.155 72.3976 mo(\001)sh317.155 72.4216 mo(\001)sh317.155 72.4446 mo(\001)sh317.155 72.4656 mo(\001)sh317.155 72.4856 mo(\001)sh317.155 72.5046 mo(\001)sh317.155 72.5226 mo(\001)sh317.155 72.5396 mo(\001)sh317.155 72.5556 mo(\001)sh317.155 72.5706 mo(\001)sh317.155 72.5856 mo(\001)sh317.155 72.5996 mo(\001)sh317.155 72.6126 mo(\001)sh317.155 72.6246 mo(\001)sh317.155 72.6366 mo(\001)sh317.155 72.6486 mo(\001)sh317.155 72.6596 mo(\001)sh317.155 72.6696 mo(\001)sh317.155 72.6796 mo(\001)sh317.155 72.6896 mo(\001)sh317.155 72.9306 mo(\001)sh317.155 74.5896 mo(\001)sh317.155 74.6196 mo(\001)sh317.155 74.6496 mo(\001)sh317.155 74.6816 mo(\001)sh317.155 74.7156 mo(\001)sh317.155 74.7506 mo(\001)sh317.155 74.7876 mo(\001)sh317.155 74.8256 mo(\001)sh317.155 74.8656 mo(\001)sh317.155 74.9076 mo(\001)sh317.155 74.9526 mo(\001)sh317.155 74.9986 mo(\001)sh317.155 75.0476 mo(\001)sh317.155 75.0996 mo(\001)sh317.155 75.1546 mo(\001)sh317.155 75.2126 mo(\001)sh317.155 75.2736 mo(\001)sh317.155 75.3386 mo(\001)sh317.155 75.4086 mo(\001)sh317.155 75.4826 mo(\001)sh317.155 75.5616 mo(\001)sh317.155 75.6456 mo(\001)sh317.155 75.7366 mo(\001)sh317.155 75.8336 mo(\001)sh317.155 75.9396 mo(\001)sh317.155 76.0536 mo(\001)sh317.155 76.1766 mo(\001)sh317.155 76.3116 mo(\001)sh317.155 76.4586 mo(\001)sh317.155 76.6206 mo(\001)sh317.155 76.7996 mo(\001)sh317.155 76.9976 mo(\001)sh317.155 77.2196 mo(\001)sh317.155 77.4676 mo(\001)sh317.155 77.7496 mo(\001)sh317.155 78.0706 mo(\001)sh317.155 78.4396 mo(\001)sh317.155 78.8686 mo(\001)sh317.155 79.3726 mo(\001)sh317.155 79.9716 mo(\001)sh317.155 80.6906 mo(\001)sh317.155 81.5636 mo(\001)sh317.155 82.6376 mo(\001)sh317.155 83.9876 mo(\001)sh317.155 85.7676 mo(\001)sh317.155 88.2996 mo(\001)sh317.155 92.2466 mo(\001)sh317.155 99.2146 mo(\001)sh317.155 114.745 mo(\001)sh317.155 183.949 mo(\001)sh321.833 34.4636 mo(\001)sh321.833 57.6386 mo(\001)sh321.833 62.7956 mo(\001)sh321.833 65.1016 mo(\001)sh321.833 66.4116 mo(\001)sh321.833 67.2556 mo(\001)sh321.833 67.8456 mo(\001)sh321.833 68.2806 mo(\001)sh321.833 68.6146 mo(\001)sh321.833 68.8796 mo(\001)sh321.833 69.0936 mo(\001)sh321.833 69.2706 mo(\001)sh321.833 69.4196 mo(\001)sh321.833 69.5466 mo(\001)sh321.833 69.6556 mo(\001)sh321.833 69.7506 mo(\001)sh321.833 69.8346 mo(\001)sh321.833 69.9086 mo(\001)sh321.833 69.9746 mo(\001)sh321.833 70.0346 mo(\001)sh321.833 70.0886 mo(\001)sh321.833 70.1376 mo(\001)sh321.833 70.1816 mo(\001)sh321.833 70.2226 mo(\001)sh321.833 70.2606 mo(\001)sh321.833 70.2956 mo(\001)sh321.833 70.3286 mo(\001)sh321.833 70.3586 mo(\001)sh321.833 70.3866 mo(\001)sh321.833 70.4126 mo(\001)sh321.833 70.4376 mo(\001)sh321.833 70.4606 mo(\001)sh321.833 70.4816 mo(\001)sh321.833 70.5026 mo(\001)sh321.833 70.5216 mo(\001)sh321.833 70.5396 mo(\001)sh321.833 70.5576 mo(\001)sh321.833 70.5736 mo(\001)sh321.833 70.5886 mo(\001)sh321.833 70.6036 mo(\001)sh321.833 70.6176 mo(\001)sh321.833 70.6316 mo(\001)sh321.833 70.6436 mo(\001)sh321.833 70.6566 mo(\001)sh321.833 70.6676 mo(\001)sh321.833 70.6786 mo(\001)sh321.833 70.6896 mo(\001)sh321.833 70.6996 mo(\001)sh321.833 70.7096 mo(\001)sh321.833 70.9546 mo(\001)sh321.833 72.6436 mo(\001)sh321.833 72.6736 mo(\001)sh321.833 72.7046 mo(\001)sh321.833 72.7376 mo(\001)sh321.833 72.7716 mo(\001)sh321.833 72.8076 mo(\001)sh321.833 72.8446 mo(\001)sh321.833 72.8836 mo(\001)sh321.833 72.9246 mo(\001)sh321.833 72.9676 mo(\001)sh321.833 73.0126 mo(\001)sh321.833 73.0606 mo(\001)sh321.833 73.1106 mo(\001)sh321.833 73.1626 mo(\001)sh321.833 73.2186 mo(\001)sh321.833 73.2776 mo(\001)sh321.833 73.3406 mo(\001)sh321.833 73.4066 mo(\001)sh321.833 73.4766 mo(\001)sh321.833 73.5526 mo(\001)sh321.833 73.6326 mo(\001)sh321.833 73.7186 mo(\001)sh321.833 73.8106 mo(\001)sh321.833 73.9106 mo(\001)sh321.833 74.0176 mo(\001)sh321.833 74.1336 mo(\001)sh321.833 74.2596 mo(\001)sh321.833 74.3966 mo(\001)sh321.833 74.5466 mo(\001)sh321.833 74.7116 mo(\001)sh321.833 74.8926 mo(\001)sh321.833 75.0946 mo(\001)sh321.833 75.3206 mo(\001)sh321.833 75.5736 mo(\001)sh321.833 75.8596 mo(\001)sh321.833 76.1866 mo(\001)sh321.833 76.5626 mo(\001)sh321.833 76.9986 mo(\001)sh321.833 77.5116 mo(\001)sh321.833 78.1206 mo(\001)sh321.833 78.8526 mo(\001)sh321.833 79.7416 mo(\001)sh321.833 80.8346 mo(\001)sh321.833 82.2086 mo(\001)sh321.833 84.0206 mo(\001)sh321.833 86.5986 mo(\001)sh321.833 90.6146 mo(\001)sh321.833 97.7066 mo(\001)sh321.833 113.514 mo(\001)sh321.833 183.949 mo(\001)sh326.511 31.8496 mo(\001)sh326.511 55.4296 mo(\001)sh326.511 60.6776 mo(\001)sh326.511 63.0236 mo(\001)sh326.511 64.3566 mo(\001)sh326.511 65.2156 mo(\001)sh326.511 65.8156 mo(\001)sh326.511 66.2586 mo(\001)sh326.511 66.5986 mo(\001)sh326.511 66.8676 mo(\001)sh326.511 67.0856 mo(\001)sh326.511 67.2656 mo(\001)sh326.511 67.4175 mo(\001)sh326.511 67.5465 mo(\001)sh326.511 67.6575 mo(\001)sh326.511 67.7545 mo(\001)sh326.511 67.8395 mo(\001)sh326.511 67.9145 mo(\001)sh326.511 67.9825 mo(\001)sh326.511 68.0425 mo(\001)sh326.511 68.0975 mo(\001)sh326.511 68.1475 mo(\001)sh326.511 68.1925 mo(\001)sh326.511 68.2345 mo(\001)sh326.511 68.2735 mo(\001)sh326.511 68.3085 mo(\001)sh326.511 68.3415 mo(\001)sh326.511 68.3726 mo(\001)sh326.511 68.4006 mo(\001)sh326.511 68.4275 mo(\001)sh326.511 68.4525 mo(\001)sh326.511 68.4765 mo(\001)sh326.511 68.4985 mo(\001)sh326.511 68.5185 mo(\001)sh326.511 68.5386 mo(\001)sh326.511 68.5575 mo(\001)sh326.511 68.5745 mo(\001)sh326.511 68.5915 mo(\001)sh326.511 68.6076 mo(\001)sh326.511 68.6226 mo(\001)sh326.511 68.6366 mo(\001)sh326.511 68.6506 mo(\001)sh326.511 68.6636 mo(\001)sh326.511 68.6756 mo(\001)sh326.511 68.6876 mo(\001)sh326.511 68.6986 mo(\001)sh326.511 68.7096 mo(\001)sh326.511 68.7206 mo(\001)sh326.511 68.7306 mo(\001)sh326.511 68.9795 mo(\001)sh326.511 70.6975 mo(\001)sh326.511 70.7286 mo(\001)sh326.511 70.7606 mo(\001)sh326.511 70.7936 mo(\001)sh326.511 70.8286 mo(\001)sh326.511 70.8646 mo(\001)sh326.511 70.9026 mo(\001)sh326.511 70.9416 mo(\001)sh326.511 70.9836 mo(\001)sh326.511 71.0276 mo(\001)sh326.511 71.0736 mo(\001)sh326.511 71.1216 mo(\001)sh326.511 71.1726 mo(\001)sh326.511 71.2266 mo(\001)sh326.511 71.2826 mo(\001)sh326.511 71.3426 mo(\001)sh326.511 71.4066 mo(\001)sh326.511 71.4736 mo(\001)sh326.511 71.5456 mo(\001)sh326.511 71.6226 mo(\001)sh326.511 71.7036 mo(\001)sh326.511 71.7916 mo(\001)sh326.511 71.8856 mo(\001)sh326.511 71.9866 mo(\001)sh326.511 72.0955 mo(\001)sh326.511 72.2135 mo(\001)sh326.511 72.3415 mo(\001)sh326.511 72.4806 mo(\001)sh326.511 72.6336 mo(\001)sh326.511 72.8016 mo(\001)sh326.511 72.9866 mo(\001)sh326.511 73.1916 mo(\001)sh326.511 73.4215 mo(\001)sh326.511 73.6786 mo(\001)sh326.511 73.9696 mo(\001)sh326.511 74.3025 mo(\001)sh326.511 74.6845 mo(\001)sh326.511 75.1296 mo(\001)sh326.511 75.6506 mo(\001)sh326.511 76.2705 mo(\001)sh326.511 77.0155 mo(\001)sh326.511 77.9205 mo(\001)sh326.511 79.0325 mo(\001)sh326.511 80.4295 mo(\001)sh326.511 82.2735 mo(\001)sh326.511 84.8965 mo(\001)sh326.511 88.9835 mo(\001)sh326.511 96.1995 mo(\001)sh326.511 112.281 mo(\001)sh326.511 183.949 mo(\001)sh331.189 29.2366 mo(\001)sh331.189 53.2216 mo(\001)sh331.189 58.5595 mo(\001)sh331.189 60.9455 mo(\001)sh331.189 62.3016 mo(\001)sh331.189 63.1755 mo(\001)sh331.189 63.7865 mo(\001)sh331.189 64.2365 mo(\001)sh331.189 64.5825 mo(\001)sh331.189 64.8555 mo(\001)sh331.189 65.0775 mo(\001)sh331.189 65.2605 mo(\001)sh331.189 65.4145 mo(\001)sh331.189 65.5465 mo(\001)sh331.189 65.6595 mo(\001)sh331.189 65.7575 mo(\001)sh331.189 65.8446 mo(\001)sh331.189 65.9215 mo(\001)sh331.189 65.9895 mo(\001)sh331.189 66.0515 mo(\001)sh331.189 66.1065 mo(\001)sh331.189 66.1575 mo(\001)sh331.189 66.2035 mo(\001)sh331.189 66.2465 mo(\001)sh331.189 66.2855 mo(\001)sh331.189 66.3215 mo(\001)sh331.189 66.3555 mo(\001)sh331.189 66.3865 mo(\001)sh331.189 66.4155 mo(\001)sh331.189 66.4425 mo(\001)sh331.189 66.4685 mo(\001)sh331.189 66.4925 mo(\001)sh331.189 66.5145 mo(\001)sh331.189 66.5355 mo(\001)sh331.189 66.5555 mo(\001)sh331.189 66.5745 mo(\001)sh331.189 66.5925 mo(\001)sh331.189 66.6095 mo(\001)sh331.189 66.6255 mo(\001)sh331.189 66.6405 mo(\001)sh331.189 66.6555 mo(\001)sh331.189 66.6695 mo(\001)sh331.189 66.6825 mo(\001)sh331.189 66.6945 mo(\001)sh331.189 66.7065 mo(\001)sh331.189 66.7185 mo(\001)sh331.189 66.7295 mo(\001)sh331.189 66.7405 mo(\001)sh331.189 66.7505 mo(\001)sh331.189 67.0035 mo(\001)sh331.189 68.7515 mo(\001)sh331.189 68.7825 mo(\001)sh331.189 68.8155 mo(\001)sh331.189 68.8495 mo(\001)sh331.189 68.8845 mo(\001)sh331.189 68.9215 mo(\001)sh331.189 68.9595 mo(\001)sh331.189 69.0005 mo(\001)sh331.189 69.0425 mo(\001)sh331.189 69.0875 mo(\001)sh331.189 69.1336 mo(\001)sh331.189 69.1825 mo(\001)sh331.189 69.2346 mo(\001)sh331.189 69.2895 mo(\001)sh331.189 69.3466 mo(\001)sh331.189 69.4076 mo(\001)sh331.189 69.4726 mo(\001)sh331.189 69.5416 mo(\001)sh331.189 69.6146 mo(\001)sh331.189 69.6926 mo(\001)sh331.189 69.7756 mo(\001)sh331.189 69.8646 mo(\001)sh331.189 69.9596 mo(\001)sh331.189 70.0626 mo(\001)sh331.189 70.1735 mo(\001)sh331.189 70.2935 mo(\001)sh331.189 70.4235 mo(\001)sh331.189 70.5655 mo(\001)sh331.189 70.7205 mo(\001)sh331.189 70.8915 mo(\001)sh331.189 71.0796 mo(\001)sh331.189 71.2886 mo(\001)sh331.189 71.5216 mo(\001)sh331.189 71.7835 mo(\001)sh331.189 72.0805 mo(\001)sh331.189 72.4185 mo(\001)sh331.189 72.8075 mo(\001)sh331.189 73.2595 mo(\001)sh331.189 73.7906 mo(\001)sh331.189 74.4206 mo(\001)sh331.189 75.1786 mo(\001)sh331.189 76.0985 mo(\001)sh331.189 77.2295 mo(\001)sh331.189 78.6515 mo(\001)sh331.189 80.5265 mo(\001)sh331.189 83.1945 mo(\001)sh331.189 87.3515 mo(\001)sh331.189 94.6915 mo(\001)sh331.189 111.05 mo(\001)sh331.189 183.949 mo(\001)sh335.868 26.6225 mo(\001)sh335.868 51.0135 mo(\001)sh335.868 56.4405 mo(\001)sh335.868 58.8685 mo(\001)sh335.868 60.2465 mo(\001)sh335.868 61.1356 mo(\001)sh335.868 61.7566 mo(\001)sh335.868 62.2145 mo(\001)sh335.868 62.5655 mo(\001)sh335.868 62.8435 mo(\001)sh335.868 63.0695 mo(\001)sh335.868 63.2555 mo(\001)sh335.868 63.4125 mo(\001)sh335.868 63.5465 mo(\001)sh335.868 63.6616 mo(\001)sh335.868 63.7616 mo(\001)sh335.868 63.8496 mo(\001)sh335.868 63.9276 mo(\001)sh335.868 63.9976 mo(\001)sh335.868 64.0596 mo(\001)sh335.868 64.1166 mo(\001)sh335.868 64.1676 mo(\001)sh335.868 64.2156 mo(\001)sh335.868 64.2586 mo(\001)sh335.868 64.2986 mo(\001)sh335.868 64.3346 mo(\001)sh335.868 64.3686 mo(\001)sh335.868 64.4006 mo(\001)sh335.868 64.4306 mo(\001)sh335.868 64.4575 mo(\001)sh335.868 64.4835 mo(\001)sh335.868 64.5075 mo(\001)sh335.868 64.5305 mo(\001)sh335.868 64.5525 mo(\001)sh335.868 64.5725 mo(\001)sh335.868 64.5915 mo(\001)sh335.868 64.6096 mo(\001)sh335.868 64.6276 mo(\001)sh335.868 64.6436 mo(\001)sh335.868 64.6596 mo(\001)sh335.868 64.6736 mo(\001)sh335.868 64.6876 mo(\001)sh335.868 64.7016 mo(\001)sh335.868 64.7146 mo(\001)sh335.868 64.7266 mo(\001)sh335.868 64.7386 mo(\001)sh335.868 64.7496 mo(\001)sh335.868 64.7606 mo(\001)sh335.868 64.7706 mo(\001)sh335.868 65.0286 mo(\001)sh335.868 66.8056 mo(\001)sh335.868 66.8376 mo(\001)sh335.868 66.8706 mo(\001)sh335.868 66.9046 mo(\001)sh335.868 66.9406 mo(\001)sh335.868 66.9786 mo(\001)sh335.868 67.0176 mo(\001)sh335.868 67.0586 mo(\001)sh335.868 67.1016 mo(\001)sh335.868 67.1466 mo(\001)sh335.868 67.1946 mo(\001)sh335.868 67.2446 mo(\001)sh335.868 67.2966 mo(\001)sh335.868 67.3526 mo(\001)sh335.868 67.4116 mo(\001)sh335.868 67.4736 mo(\001)sh335.868 67.5386 mo(\001)sh335.868 67.6086 mo(\001)sh335.868 67.6826 mo(\001)sh335.868 67.7626 mo(\001)sh335.868 67.8466 mo(\001)sh335.868 67.9376 mo(\001)sh335.868 68.0346 mo(\001)sh335.868 68.1386 mo(\001)sh335.868 68.2516 mo(\001)sh335.868 68.3736 mo(\001)sh335.868 68.5066 mo(\001)sh335.868 68.6506 mo(\001)sh335.868 68.8086 mo(\001)sh335.868 68.9816 mo(\001)sh335.868 69.1736 mo(\001)sh335.868 69.3856 mo(\001)sh335.868 69.6226 mo(\001)sh335.868 69.8896 mo(\001)sh335.868 70.1906 mo(\001)sh335.868 70.5346 mo(\001)sh335.868 70.9296 mo(\001)sh335.868 71.3896 mo(\001)sh335.868 71.9296 mo(\001)sh335.868 72.5706 mo(\001)sh335.868 73.3406 mo(\001)sh335.868 74.2766 mo(\001)sh335.868 75.4266 mo(\001)sh335.868 76.8726 mo(\001)sh335.868 78.7796 mo(\001)sh335.868 81.4926 mo(\001)sh335.868 85.7196 mo(\001)sh335.868 93.1836 mo(\001)sh335.868 109.82 mo(\001)sh335.868 183.949 mo(\001)sh340.546 24.0096 mo(\001)sh340.546 48.8056 mo(\001)sh340.546 54.3226 mo(\001)sh340.546 56.7906 mo(\001)sh340.546 58.1916 mo(\001)sh340.546 59.0956 mo(\001)sh340.546 59.7266 mo(\001)sh340.546 60.1926 mo(\001)sh340.546 60.5496 mo(\001)sh340.546 60.8326 mo(\001)sh340.546 61.0616 mo(\001)sh340.546 61.2516 mo(\001)sh340.546 61.4106 mo(\001)sh340.546 61.5466 mo(\001)sh340.546 61.6636 mo(\001)sh340.546 61.7646 mo(\001)sh340.546 61.8546 mo(\001)sh340.546 61.9336 mo(\001)sh340.546 62.0046 mo(\001)sh340.546 62.0686 mo(\001)sh340.546 62.1256 mo(\001)sh340.546 62.1786 mo(\001)sh340.546 62.2266 mo(\001)sh340.546 62.2706 mo(\001)sh340.546 62.3106 mo(\001)sh340.546 62.3476 mo(\001)sh340.546 62.3826 mo(\001)sh340.546 62.4146 mo(\001)sh340.546 62.4446 mo(\001)sh340.546 62.4726 mo(\001)sh340.546 62.4996 mo(\001)sh340.546 62.5236 mo(\001)sh340.546 62.5476 mo(\001)sh340.546 62.5686 mo(\001)sh340.546 62.5896 mo(\001)sh340.546 62.6096 mo(\001)sh340.546 62.6276 mo(\001)sh340.546 62.6456 mo(\001)sh340.546 62.6616 mo(\001)sh340.546 62.6776 mo(\001)sh340.546 62.6926 mo(\001)sh340.546 62.7066 mo(\001)sh340.546 62.7207 mo(\001)sh340.546 62.7337 mo(\001)sh340.546 62.7467 mo(\001)sh340.546 62.7586 mo(\001)sh340.546 62.7696 mo(\001)sh340.546 62.7806 mo(\001)sh340.546 62.7916 mo(\001)sh340.546 63.0527 mo(\001)sh340.546 64.8606 mo(\001)sh340.546 64.8926 mo(\001)sh340.546 64.9257 mo(\001)sh340.546 64.9607 mo(\001)sh340.546 64.9977 mo(\001)sh340.546 65.0357 mo(\001)sh340.546 65.0756 mo(\001)sh340.546 65.1166 mo(\001)sh340.546 65.1607 mo(\001)sh340.546 65.2067 mo(\001)sh340.546 65.2547 mo(\001)sh340.546 65.3057 mo(\001)sh340.546 65.3597 mo(\001)sh340.546 65.4157 mo(\001)sh340.546 65.4757 mo(\001)sh340.546 65.5387 mo(\001)sh340.546 65.6057 mo(\001)sh340.546 65.6767 mo(\001)sh340.546 65.7517 mo(\001)sh340.546 65.8326 mo(\001)sh340.546 65.9186 mo(\001)sh340.546 66.0106 mo(\001)sh340.546 66.1087 mo(\001)sh340.546 66.2156 mo(\001)sh340.546 66.3296 mo(\001)sh340.546 66.4536 mo(\001)sh340.546 66.5886 mo(\001)sh340.546 66.7356 mo(\001)sh340.546 66.8956 mo(\001)sh340.546 67.0726 mo(\001)sh340.546 67.2666 mo(\001)sh340.546 67.4826 mo(\001)sh340.546 67.7236 mo(\001)sh340.546 67.9946 mo(\001)sh340.546 68.3006 mo(\001)sh340.546 68.6506 mo(\001)sh340.546 69.0526 mo(\001)sh340.546 69.5196 mo(\001)sh340.546 70.0686 mo(\001)sh340.546 70.7206 mo(\001)sh340.546 71.5036 mo(\001)sh340.546 72.4546 mo(\001)sh340.546 73.6246 mo(\001)sh340.546 75.0936 mo(\001)sh340.546 77.0326 mo(\001)sh340.546 79.7906 mo(\001)sh340.546 84.0876 mo(\001)sh340.546 91.6766 mo(\001)sh340.546 108.588 mo(\001)sh340.546 183.949 mo(\001)sh345.224 21.3966 mo(\001)sh345.224 46.5976 mo(\001)sh345.224 52.2046 mo(\001)sh345.224 54.7126 mo(\001)sh345.224 56.1376 mo(\001)sh345.224 57.0556 mo(\001)sh345.224 57.6966 mo(\001)sh345.224 58.1696 mo(\001)sh345.224 58.5336 mo(\001)sh345.224 58.8206 mo(\001)sh345.224 59.0536 mo(\001)sh345.224 59.2466 mo(\001)sh345.224 59.4086 mo(\001)sh345.224 59.5466 mo(\001)sh345.224 59.6646 mo(\001)sh345.224 59.7686 mo(\001)sh345.224 59.8596 mo(\001)sh345.224 59.9406 mo(\001)sh345.224 60.0126 mo(\001)sh345.224 60.0766 mo(\001)sh345.224 60.1356 mo(\001)sh345.224 60.1886 mo(\001)sh345.224 60.2376 mo(\001)sh345.224 60.2816 mo(\001)sh345.224 60.3226 mo(\001)sh345.224 60.3606 mo(\001)sh345.224 60.3966 mo(\001)sh345.224 60.4286 mo(\001)sh345.224 60.4596 mo(\001)sh345.224 60.4886 mo(\001)sh345.224 60.5146 mo(\001)sh345.224 60.5396 mo(\001)sh345.224 60.5636 mo(\001)sh345.224 60.5856 mo(\001)sh345.224 60.6066 mo(\001)sh345.224 60.6266 mo(\001)sh345.224 60.6456 mo(\001)sh345.224 60.6626 mo(\001)sh345.224 60.6796 mo(\001)sh345.224 60.6956 mo(\001)sh345.224 60.7116 mo(\001)sh345.224 60.7256 mo(\001)sh345.224 60.7396 mo(\001)sh345.224 60.7526 mo(\001)sh345.224 60.7656 mo(\001)sh345.224 60.7776 mo(\001)sh345.224 60.7896 mo(\001)sh345.224 60.8006 mo(\001)sh345.224 60.8116 mo(\001)sh345.224 61.0776 mo(\001)sh345.224 62.9147 mo(\001)sh345.224 62.9466 mo(\001)sh345.224 62.9806 mo(\001)sh345.224 63.0166 mo(\001)sh345.224 63.0536 mo(\001)sh345.224 63.0926 mo(\001)sh345.224 63.1326 mo(\001)sh345.224 63.1756 mo(\001)sh345.224 63.2196 mo(\001)sh345.224 63.2666 mo(\001)sh345.224 63.3156 mo(\001)sh345.224 63.3676 mo(\001)sh345.224 63.4216 mo(\001)sh345.224 63.4786 mo(\001)sh345.224 63.5397 mo(\001)sh345.224 63.6036 mo(\001)sh345.224 63.6716 mo(\001)sh345.224 63.7436 mo(\001)sh345.224 63.8206 mo(\001)sh345.224 63.9026 mo(\001)sh345.224 63.9896 mo(\001)sh345.224 64.0836 mo(\001)sh345.224 64.1836 mo(\001)sh345.224 64.2916 mo(\001)sh345.224 64.4076 mo(\001)sh345.224 64.5337 mo(\001)sh345.224 64.6706 mo(\001)sh345.224 64.8196 mo(\001)sh345.224 64.9837 mo(\001)sh345.224 65.1627 mo(\001)sh345.224 65.3606 mo(\001)sh345.224 65.5796 mo(\001)sh345.224 65.8246 mo(\001)sh345.224 66.0996 mo(\001)sh345.224 66.4116 mo(\001)sh345.224 66.7666 mo(\001)sh345.224 67.1756 mo(\001)sh345.224 67.6506 mo(\001)sh345.224 68.2076 mo(\001)sh345.224 68.8706 mo(\001)sh345.224 69.6666 mo(\001)sh345.224 70.6326 mo(\001)sh345.224 71.8216 mo(\001)sh345.224 73.3156 mo(\001)sh345.224 75.2856 mo(\001)sh345.224 78.0886 mo(\001)sh345.224 82.4566 mo(\001)sh345.224 90.1686 mo(\001)sh345.224 107.357 mo(\001)sh345.224 183.949 mo(\001)sh1.764 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
349.98 198.784 mo
56.04 198.784 li
56.04 198.784 mo
56.04 17.119 li
56.04 17.119 mo
349.98 17.119 li
349.98 17.119 mo
349.98 198.784 li
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
0 lc
56.04 198.784 mo
56.04 195.309 li
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: GJERMX+Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /GJERMX+Times-Roman def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWO+Times-Roman /GJERMX+Times-Roman findfont ct_VMDictPut/RQARWO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero 207{/.notdef}rp]RQARWO+Times-Roman nfRQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf46.02 216.064 mo(0.0)sh70.737 198.784 mo
70.737 196.699 li
85.434 198.784 mo
85.434 196.699 li
100.131 198.784 mo
100.131 196.699 li
114.828 198.784 mo
114.828 195.309 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: GJERMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARWO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARWO+Times-Roman /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/RQARWO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]RQARWO+Times-Roman nfRQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf104.808 216.064 mo(0.2)sh129.525 198.784 mo
129.525 196.699 li
144.222 198.784 mo
144.222 196.699 li
158.919 198.784 mo
158.919 196.699 li
173.616 198.784 mo
173.616 195.309 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: GJERMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARWO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARWO+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/RQARWO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]RQARWO+Times-Roman nfRQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf163.596 216.064 mo(0.4)sh188.313 198.784 mo
188.313 196.699 li
203.01 198.784 mo
203.01 196.699 li
217.707 198.784 mo
217.707 196.699 li
232.404 198.784 mo
232.404 195.309 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: GJERMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARWO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARWO+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/RQARWO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]RQARWO+Times-Roman nfRQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf222.384 216.064 mo(0.6)sh247.101 198.784 mo
247.101 196.699 li
261.798 198.784 mo
261.798 196.699 li
276.495 198.784 mo
276.495 196.699 li
291.192 198.784 mo
291.192 195.309 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: GJERMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARWO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARWO+Times-Roman /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/RQARWO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]RQARWO+Times-Roman nfRQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf281.172 216.064 mo(0.8)sh305.889 198.784 mo
305.889 196.699 li
320.586 198.784 mo
320.586 196.699 li
335.283 198.784 mo
335.283 196.699 li
349.98 198.784 mo
349.98 195.309 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: GJERMX+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARWO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARWO+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/RQARWO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]RQARWO+Times-Roman nfRQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf339.96 216.064 mo(1.0)sh56.04 182.269 mo
59.515 182.269 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
RQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf41.04 187.489 mo(1.)[8 0 ]xsh56.04 149.239 mo
59.515 149.239 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
RQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf33 154.459 mo(1.2)sh56.04 116.209 mo
59.515 116.209 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
RQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf33 121.429 mo(1.4)sh56.04 83.179 mo
59.515 83.179 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
RQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf33 88.399 mo(1.6)sh56.04 50.149 mo
59.515 50.149 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
RQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf33 55.369 mo(1.8)sh56.04 17.119 mo
59.515 17.119 li
1 /0 /CSD get_res sepcs
1 sep
@
0 0 0 1 cmyk
RQARWO+Times-Roman*1 [16 0 0 -16 0 0 ]msf41.04 22.339 mo(2.)[8 0 ]xsh%ADOBeginSubsetFont: LVXAAA+Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LVXAAA+Times-Italic def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 86 /V putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/V <1C60D8A8C9B7D8BE3608624D2E2C88F5CF4A70D70F922254294D4246E4992890E83912C9D277D839E8549B7E23CB1C1DB720D7BF2ED2D492CC859DBA8E17665B85A68E7999B2A89726750B2B5414E8362200332AF4E80BD3F832BC7BBE3202B23A5B0AFC0583925A8233FF3358669834B822CFD7B900D78F2BFCBB39D4AD42C8121D36> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWP+Times-Italic /LVXAAA+Times-Italic findfont ct_VMDictPut/RQARWP+Times-Italic*1 [86{/.notdef}rp /V 169{/.notdef}rp]RQARWP+Times-Italic nfRQARWP+Times-Italic*1 [24 0 0 -24 0 0 ]msf188.1 247.504 mo(V)sh196.968 229.084 mo
189.48 229.084 li
189.48 230.045 li
207.428 230.045 li
207.428 229.084 li
199.94 229.084 li
ef
%ADOBeginSubsetFont: VHRBAA+Mathematica1 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /VHRBAA+Mathematica1 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Nu putdup 2 /Omega putdef/UniqueID 5095641 def/FontBBox {-120 -220 1544 923} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 -0 444 468 662 677] def/OtherBlues [-209 -203] def/BlueScale 0.0416717 def/StdHW [105.845] def/StdVW [74.4189] def/StemSnapH [65.5429 105.845] def/StemSnapV [58.4069 74.4189] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Nu <1C60D8A8C9B74F36160043BEECF3E5C758D2EB92BB98F2DD9E5E4E0C64312697868A81EFF17CA27779B07D119653AAB4FB5FCDACB27D7A6D0A0C677900F63C1C06D8A7F522CDE1DF369F1BEA9C4651B8F3FA7AF9408821317A3ED4B87474DC2D8AFDD73D546F0920BFFC62A21A50FA2FC1E8621C> |-/Omega <1C60D8A8C9B6269C545E80EBD2C5AF738CF9980B8999FEEF1136515CC36CE92F099B7CB37D440E68058AC72D651E96090932C94688C77020047990EDFD8A8487DBF248A19E7A587CB1915E4F80777FB1B5B6589590F4907D0324D921DD008CB510361571F752E52BDAF1E8411823CD7BB55F03A7B6913B5C3227CCFFA08BC6EF7C834C59D611AA9F45BD08998BD205D977FDB72D1582EB5E4A8827B59E5AA41E192D5DB17C1814F060> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWQ+Mathematica1 /VHRBAA+Mathematica1 findfont ct_VMDictPut/RQARWQ+Mathematica1*1 [/.notdef /Nu /Omega 253{/.notdef}rp]RQARWQ+Mathematica1 nfRQARWQ+Mathematica1*1 [24 0 0 -24 0 0 ]msf206.88 247.504 mo(\001)shRQARWQ+Mathematica1*1 [0 -24 -24 0 0 0 ]msf21.6 132.321 mo(\002)sh%ADOBeginSubsetFont: WCNQMX+Mathematica2 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /WCNQMX+Mathematica2 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Slash1 putdef/UniqueID 5095653 def/FontBBox {-13 -4075 2499 2436} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-587 -586 888 893] def/BlueScale 0.199996 def/StdHW [0] def/StdVW [0] def/StemSnapH [0] def/StemSnapV [0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/Slash1 <1C60D8A8C9B82F05F6484DDAF768983B429CE2BE2E9BAF7B> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWR+Mathematica2 /WCNQMX+Mathematica2 findfont ct_VMDictPut/RQARWR+Mathematica2*1 [/.notdef /Slash1 254{/.notdef}rp]RQARWR+Mathematica2 nfRQARWR+Mathematica2*1 [0 -24 -24 0 0 0 ]msf21.6 115.761 mo(\001)shRQARWQ+Mathematica1*1 [0 -24 -24 0 0 0 ]msf21.6 108.201 mo(\002)sh%ADOBeginSubsetFont: LVXAAA+Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARWP+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARWP+Times-Italic /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/RQARWP+Times-Italic*1 [86{/.notdef}rp /V 12{/.notdef}rp /c 156{/.notdef}rp]RQARWP+Times-Italic nfRQARWP+Times-Italic*1 [0 -17.04 -17.04 0 0 0 ]msf25.38 91.641 mo(c)shgrestore
gsave
70.1303 48.9497 mo
173.813 48.9497 li
173.813 29.47 li
70.1303 29.47 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: GVABAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /GVABAA+CMMI10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 69 /E putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437929 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D239BCB61DC78D83A8F223F832> |-/E <1C60D8A8C9B6177404106CAF965141780A3169E0E51FB498B39631979289FE59D7C56480822ECDA6B9254C24924A8B73A24155F39A737A9244DC782D8C6A6A3BD0A905E5D1F011649259A74E1CAD29A1D8E72F81F09B4C7EECA4FFCFAEB3B1E6346CD6A3D954E38DE31F2A1F351DE9C3279D3BD0707BFECC7B59C010693956FA43F9D76D2D5AE29B7B4A7BC612A50EB461CD1514B7B648A599EA86165FA5A4E003B2D394C7C044D03DD15C624FCCA439C3E5318F9E4A407BDFE3B43DC9F7E49965BBD7AE8C3EB73C6B79F04E8C58C59F20EF8F521424F93F0641BD42D5E61E58F889154054E7C906D96931054DD69096ED84D5E307FCA9D9C16C1D12FD79> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWS+CMMI10 /GVABAA+CMMI10 findfont ct_VMDictPut/RQARWS+CMMI10*1 [46{/.notdef}rp /period 22{/.notdef}rp /E 186{/.notdef}rp]RQARWS+CMMI10 nfRQARWS+CMMI10*1 [22.537 0 0 -22.5371 0 0 ]msf69.4357 44.958 mo(E)sh%ADOBeginSubsetFont: RSDAAA+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /RSDAAA+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 90 /Z putdup 99 /c putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Z <1C60D8A8C9B6FF86896B7328288CDE91291009136DE2797A54CC6CD7C8C592B625D81665476F5AE4FBA2ADD40B65182181142DE0B2FF353582277FB273288944873BB5B2BA1620C6F4F13E3C21F36874AD2EB970ABB54635802E69D40E131F8E886F40FAB7BF5E47BBEFE90C4F7B5DA3C6D4D2CD0279281512C1D9AAF46AF5778DE96162B409D02743D372A2159A94DD1F> |-/c <1C60D8A8C9B7BDE3EC3ABB5B9E4D77D5F4B7CF1A9A1589B92953F9542F6EA00667346ED0079A977D3E8084C8E03FCE1586ECB7D09BC0B53B8E4D0440EBD003F28C32C50BBFE460E69C243E05D30C001A3416E896635514B4ED69008FA242430B0A7C0680C332412646B1EA5BC4F5CAE570E1D93C518FF1CD01E6CF> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWT+CMMI7 /RSDAAA+CMMI7 findfont ct_VMDictPut/RQARWT+CMMI7*1 [90{/.notdef}rp /Z 8{/.notdef}rp /c 156{/.notdef}rp]RQARWT+CMMI7 nfRQARWT+CMMI7*1 [15.7758 0 0 -15.7759 0 0 ]msf86.0716 48.3398 mo(Z)sh%ADOBeginSubsetFont: JQZPMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /JQZPMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 53 /five putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA257DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CBF9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB77472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWU+CMR10 /JQZPMX+CMR10 findfont ct_VMDictPut/RQARWU+CMR10*1 [48{/.notdef}rp /zero 4{/.notdef}rp /five 7{/.notdef}rp /equal 194{/.notdef}rp]RQARWU+CMR10 nfRQARWU+CMR10*1 [22.537 0 0 -22.5371 0 0 ]msf103.088 44.958 mo(=0)[20.0306 0 ]xshRQARWS+CMMI10*1 [22.537 0 0 -22.5371 0 0 ]msf134.389 44.958 mo(.)shRQARWU+CMR10*1 [22.537 0 0 -22.5371 0 0 ]msf140.651 44.958 mo(5)sh%ADOBeginSubsetFont: XHWAAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /XHWAAA+CMMI10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /omega putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437929 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/omega <1C60D8A8C9B663CCDCD38BB615B5A9927D0AC8F3BEF99308F53E6E11EF6FDEC2A41598615AD97858C1C11CB2852335C8D037EC343F7FB2C8BB19CE76FD6F3CFC450758B31E07C66BA64F6059F9713685D367F90360A0A6D6D36DC65850B1914FCA760767E999EE65C6CD28F426EBA0E29CA50A7962F3BDF64398160F81EDCC71E779153676C2979CD0C26D1D704FD8A8A9077DF794C92C4969318F1308BFC9C44847FB6EBD1C8DAB4B80C252D428DD48E8F0> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWV+CMMI10 /XHWAAA+CMMI10 findfont ct_VMDictPut/RQARWV+CMMI10*1 [127{/.notdef}rp /omega 128{/.notdef}rp]RQARWV+CMMI10 nfRQARWV+CMMI10*1 [22.537 0 0 -22.5371 0 0 ]msf151.918 44.958 mo(\177)shRQARWT+CMMI7*1 [15.7758 0 0 -15.7759 0 0 ]msf165.946 48.3398 mo(c)shgrestore
gsave
75.0323 83.0062 mo
148.013 83.0062 li
148.013 62.8062 li
75.0323 62.8062 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: ONIQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /ONIQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 78 /N putdef/UniqueID 5087385 def/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/N <1C60D8A8C9B6D671D38ABEF2C3AA4E9EF85233BCD577CC743D9BB72B06D1C34EFFA73A8EEC485E47CB4255799230CE3B52ECA9DACF132C28D5023DE40AA93657FA765A68F9927890D6A99C6ADF1E426E5FE9E35D2F713DB32E49B7FA52859C2DFDFC8F7B5800FF94410ECD75C51D563B72E4CE7BF6A0DA5B3E0B6FCD8798546F59FCAF14A879752BEB0E6C22EAB4A84FE3B041C4B97C68333C4FFAD5D2E857731FA926D2CD6D6B1870856FC4382AD902F4984DB02DEAEC75932D49CD323CFF2FF5AF76629AD4B11E478073E034E2B4E9B43505D56042DA33A6E78FEA4BCD4A0F11525678055021280A500CE9ADDA6E49D3632C3DA6662AF4C4449F02> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWW+CMMI10 /ONIQMX+CMMI10 findfont ct_VMDictPut/RQARWW+CMMI10*1 [78{/.notdef}rp /N 177{/.notdef}rp]RQARWW+CMMI10 nfRQARWW+CMMI10*1 [23.3704 0 0 -23.3703 0 0 ]msf74.7757 78.8669 mo(N)sh%ADOBeginSubsetFont: LAPQMX+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /LAPQMX+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 116 /t putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/t <1C60D8A8C9B76C9024B562E6ACACC3BBFBFEA0392D5F04472FA97061AAE4DC52A3F98A11D8D54F25E4E1258444AF5132275DA6C5E3D0885B5B2A4654CEE34242292B9FEE69B16E5DD8A918634DD3321B8DE0F4A8FC34CE141D352DCEC7C4316AD4FCDE9B4AA88B17F80EB64AF3D0551FB1E213394E362152BE7414F5D1A1399F0E6D948396CBDF7FCCB9AE5C344B> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWX+CMMI7 /LAPQMX+CMMI7 findfont ct_VMDictPut/RQARWX+CMMI7*1 [116{/.notdef}rp /t 139{/.notdef}rp]RQARWX+CMMI7 nfRQARWX+CMMI7*1 [16.3592 0 0 -16.3592 0 0 ]msf93.554 82.3739 mo(t)sh%ADOBeginSubsetFont: LHEAAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /LHEAAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 53 /five putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA257DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CBF9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB77472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWY+CMR10 /LHEAAA+CMR10 findfont ct_VMDictPut/RQARWY+CMR10*1 [48{/.notdef}rp /zero 4{/.notdef}rp /five 7{/.notdef}rp /equal 194{/.notdef}rp]RQARWY+CMR10 nfRQARWY+CMR10*1 [23.3704 0 0 -23.3703 0 0 ]msf104.378 78.8669 mo(=50)[20.7714 11.6852 0 ]xshgrestore
3 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
275.5 142.131 mo
275.5 180.404 li
0 0 0 1 cmyk
@
275.5 183.381 mo
268.954 172.16 li
268.537 171.444 268.778 170.526 269.494 170.108 cv
269.494 170.108 li
270.209 169.691 271.128 169.933 271.545 170.648 cv
271.545 170.648 li
275.5 177.427 li
279.454 170.648 li
279.871 169.933 280.79 169.691 281.505 170.108 cv
281.505 170.108 li
282.221 170.526 282.463 171.444 282.045 172.16 cv
282.045 172.16 li
cp
ef
206.762 142.131 mo
340.774 142.131 li
340.774 116.678 li
206.762 116.678 li
cp
0 0 0 0 cmyk
ef
2.25 lw
206.762 116.678 mo
340.774 116.678 li
340.774 142.131 li
206.762 142.131 li
cp
0 0 0 1 cmyk
@
gsave
212.633 140.17 mo
336.853 140.17 li
336.853 120.858 li
212.633 120.858 li
cp
clp
%ADOBeginSubsetFont: REEAAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /REEAAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 77 /M putdup 83 /S putdup 100 /d putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 115 /s putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/M <1C60D8A8C9B5BA43AA8567ED4BE2D7FEDF84AA8E4D7C55A5BC42BD34F3277CCBB834BA74F53382342B0BA2F117A667CBDAF558D8C8C6BB52DFE7A951AC7F90B65CE73200D87C871483BCDABA867EF53CF58D923A6435A91070A9B8C57E2AC8D8757C5081292709B14AABF10DF398DAFB85ADC1EBF2FD6188FF6384A9B0EC88ED9C3C67FD1369FE1E51586F85AE8474F281CA47693B25D9154D6F07941252F00CFCC0ABAA961F75FE6F08A5C67C2DA703A2BABBD58AEB6A91D6EEBE96274043928EF3E9FBCB3DB234E95B1AF126B5BCE1E952BBBFAD047E0EA18D4396EBF2025C72> |-/S <1C60D8A8C9B790A8C3E1550ACC8DA9C9FBD3A5CF2194CD2B8642D81A716BD00E790683F96881FACDE1F9315D62E9690B60701D527468B87CDFB0F4764C5597556AE6A1AC77EAC949F9287197658BC350D110E467DE690E505B49A0B78B79E2357C1B06B49C46DBCFC093C8FD052BE36FB8FD34081A4086AA2F339D541A84930A281511E0A17B9869F6AA55371F1C0D54B13DC306CE1AA830A9CC533AF6BD85406DAA830F9B2385417AD4B282844721D0D07F3AC31F2E4FAB062DE1D98E9BB1ADDC8425AA1837400BB1FE64042CEA44886B96F0827BA19AA957D2008F38EA9B013399E5BDAC4F2A> |-/d <1C60D8A8C9B790A8362C570CE7DC14ED8339A5DD8D37983A5A2D0B4F515EB70692477F5F548E28F1DCAB41EDF4BA0728DAF245495BE02E394B0DD240B5D55EE51A3675003CB15BB911F900B1E5DDC9F583E654C623831C440B91AF47A14F90BB1788AEF8D63BB1C09A0DFFCC46AF6B9E95BF92169FAA4D5042B81ADB2768FDD695BCD7BA015B086BADFFD844444D05A45C7E170A2C8460474939E15E0EBABF1131915EE0697E92536E40A464505CA536EC3A6940E2FEEC193EC0EB65C18399A9D9> |-/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A778A9834F3ED148EF8C2095ABE60FC1B26DBB94057B63BED2BEE770D96BCB613AAAF017CD18C97CCA61C46589119EDD299B58A1852EFEBDB7EF2A6D8606D19DEFCD13B1531BE3098F0C00520EFD32FA435A0514B86269DFF5EE650657E526962BA2F3447589A03D4DA2371542253C2A1E1B028917A1E5> |-/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A163CFC67672A34CC74B0AEAADF24229DF1CCAA1488AE3E348FE2ACD572EA487EC9D77FBB0710AB421B03DD5B8AE5519B5C269E9648E819E7ECE806EEF16A6618D07D9AAB350E57F26F5259E8FCF9E5C2D96BBEAD16502F9E7819E854042DDB2BC674C39681CC2E5224219582BC7B59BBAEF869C9DF91CA7770A97BAD53C3C3A99175BA8F0A5744B5969D3BC15831A95918F7C707E41F5D87B8DB2D57378BC9C297DAE69E4BF438246E63F565B22D86CBE28DEF748262FB9FF82A88935451D6280A28F1AD964E6E476D5779321E42D3A86BE41122F1BED36C3DC47E1E01C22534598D0431873197ABE1C8EC03B4011E4B26D249635BDBABB8E5B69BE07AFA65F88EAF6> |-/h <1C60D8A8C9B790A83D946A52D133532E9DDB252C41638FA043533341FF45F4E0EEA3BF171DE971DA044D93815FABEAC6A961DE24CD8980B97FCA250A2CD3DBC1C9175E22BC18E41FEAAE3FDFFC1EC461872FCD8D617F792306109E6C32D9EEF5544F9D280B7D28E77406A0CD8B488898A862DE88999A354709E3D39075170B03FDE60F1E3F7008331FFBCAD1B838829FBE76742914B50EBA96CF0A9BFB3610334BBAB609B960E9922A4587A5710F25CDF35D8C915B99DCE5DB414BDFAE707D88DDA35DD290F04B> |-/i <1C60D8A8C9B8574464F1B435BC57209FEB2C54026A3BBB707C1ACEEAD444C0BCD7940801068D7665A567CBC52ABA43208AF37F075A1C65586B76611081AB5310CF42CD496B0F8F59766AFDA0C4BF40BC709402C0DD0AB42B4F3987C50B5617CF3B4859C86132A1A7E65B42225B2228E50B44DBFBE367ABD36EBF02ACAD4FB895EE90259DCAEBCEFB9765574F> |-/l <1C60D8A8C9B8574464F1B434E924E8E17F47A16A389514CB900F56482ADFB78CE880D41A1EAC41DBDDDAD723AAD75825AFFB2E5AD2853D684AACA377F4CFF61F8762E467D7432F03C259012AF7AA821CB502C120A1BA693F9CB4DA4BB1D32A> |-/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C62B9F0F0BD9624AAEAC8EB33D804BC103BF4C84F8FCB252709B3422B4E5F4D698E79D5531B2BC676C0D12EEB603C056C169F17DCC9F0F6AC43F292D82458847D2D279D19F466EA84C7027B712BFD7C4B4B770C9E0BD2D556C526F95495C91C927B8F7463DFDACF3970984B31C39C074ECA243D9C8BFA10955B7D910908799AA616A425B937E17FF6121AD71909EE5D3B89CA2D13AAC585FB6F54A794E7F44844B39E96B6AE21032D420B68967AC9AC0F0DA0D53B8016F26EED527CB2387F1592BCDB6A91E073E83C3181BD7505792D4855E> |-/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDFC5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-/s <1C60D8A8C9B731071688E37ED9B7C64FA956A3F4F3785F4130685F1AE6ECB30084C557AE5797D39605F849A2D9ADE2A65CA0927636C7629B25FDC4D569E897F36515E172780EBFB2CFAF71CF0EA8B4DD392E776CF20E7204D59F8DC03F56CB4421E12FE8430EBD29CFDF5F6509E086EB0664E99116F88F2D5E9A8F8E96C847773BE6B8B90D0A0CCE846E18C0A1DF77A626724C95EC9E6FDFE55022CAFC8918AE45838B303979E3A9BFE7F7BDAB73505805005500EF4C5AC6405B1E840CF1B619C716D89CA7E80EEDEA1B928C67F7A10B24DE3EC254855DAC8B83797B28> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARWZ+CMR10 /REEAAA+CMR10 findfont ct_VMDictPut/RQARWZ+CMR10*1 [77{/.notdef}rp /M 5{/.notdef}rp /S 16{/.notdef}rp /d /e /.notdef /g /h /i 2{/.notdef}rp /l /.notdef /n /o 3{/.notdef}rp /s 140{/.notdef}rp]RQARWZ+CMR10 nfRQARWZ+CMR10*1 [20.0685 0 0 -20.3716 0 0 ]msf211.996 135.767 mo(SloshingMode)[11.1499 5.57483 10.0343 7.91492 11.1499 5.57489 11.1498 13.6465 18.3968 10.5962 11.1499 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/RQARWZ+CMR10*1 uf/RQARWZ+CMR10 uf/REEAAA+CMR10 uf/RQARWW+CMMI10*1 uf/RQARWW+CMMI10 uf/ONIQMX+CMMI10 uf/RQARWP+Times-Italic*1 uf/RQARWP+Times-Italic uf/LVXAAA+Times-Italic uf/RQARWQ+Mathematica1*1 uf/RQARWQ+Mathematica1 uf/VHRBAA+Mathematica1 uf/RQARWY+CMR10*1 uf/RQARWY+CMR10 uf/LHEAAA+CMR10 uf/RQARWX+CMMI7*1 uf/RQARWX+CMMI7 uf/LAPQMX+CMMI7 uf/RQARWO+Times-Roman*1 uf/RQARWO+Times-Roman uf/GJERMX+Times-Roman uf/RQARWR+Mathematica2*1 uf/RQARWR+Mathematica2 uf/WCNQMX+Mathematica2 uf/RQARWV+CMMI10*1 uf/RQARWV+CMMI10 uf/XHWAAA+CMMI10 uf/RQARWU+CMR10*1 uf/RQARWU+CMR10 uf/JQZPMX+CMR10 uf/RQARWN+Mathematica3*1 uf/RQARWN+Mathematica3 uf/EMOQMX+Mathematica3 uf/RQARWT+CMMI7*1 uf/RQARWT+CMMI7 uf/RSDAAA+CMMI7 uf/RQARWS+CMMI10*1 uf/RQARWS+CMMI10 uf/GVABAA+CMMI10 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
