%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: app_precession.pdf
%%Creator: Adobe Acrobat 10.1.10
%%For: mkhodas
%%CreationDate: 8/18/14, 5:39 PM
%%BoundingBox: 0 0 371 257
%%HiResBoundingBox: 0 0 370.8604 256.0333
%%CropBox: 0 0 370.8604 256.0333
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 972 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-08-18T22:38:39Z"
   xmp:CreatorTool="Microsoft PowerPoint"
   xmp:ModifyDate="2014-08-18T17:39:11-05:00"
   xmp:MetadataDate="2014-08-18T17:39:11-05:00"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.6.8 Quartz PDFContext"
   xmpMM:DocumentID="uuid:aa7b6e94-6009-a348-9b63-b6c9c9b732ac"
   xmpMM:InstanceID="uuid:7228f6af-d7c8-cd4b-b108-65be34aaa41e">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Maxim Khodas</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -256.033 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 256.033 li
370.86 256.033 li
370.86 0 li
cp
clp
0 540 mo
720 540 li
720 6.10351e-05 li
0 6.10351e-05 li
cp
false sop
0 0 0 0 cmyk
ef
gsave
56 34.198 mo
60 34.198 li
60 25.198 li
56 25.198 li
cp
clp
.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: XLCRMX+Mathematica3 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /XLCRMX+Mathematica3 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /SolidCircle putdef/UniqueID 5095645 def/FontBBox {-109 -231 966 869} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-107 -91 505 527 596 612] def/BlueScale 0.0454559 def/StdHW [34] def/StdVW [34] def/StemSnapH [34 66] def/StemSnapV [34 65] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/SolidCircle <1C60D8A8C9B60287CF08F7BF563CAAD6E08EFD6DAA142CC7220408DECF2B61045B377CC2E5343FEE4BB07E6944D948E0191385507B98AE> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXA+Mathematica3 /XLCRMX+Mathematica3 findfont ct_VMDictPut/RQARXA+Mathematica3*1 [/.notdef /SolidCircle 254{/.notdef}rp]RQARXA+Mathematica3 nfRQARXA+Mathematica3*1 [5 0 0 -5 0 0 ]msf55.176 31.271 mo(\001)sh55.176 31.271 mo(\001)sh55.176 31.271 mo(\001)sh55.176 31.271 mo(\001)sh55.176 31.271 mo(\001)sh55.176 31.27 mo(\001)sh55.176 31.27 mo(\001)sh55.176 31.27 mo(\001)sh55.176 31.27 mo(\001)sh55.176 31.27 mo(\001)sh55.176 31.27 mo(\001)sh55.176 31.269 mo(\001)sh55.176 31.269 mo(\001)sh55.176 31.269 mo(\001)sh55.176 31.269 mo(\001)sh55.176 31.268 mo(\001)sh55.176 31.268 mo(\001)sh55.176 31.268 mo(\001)sh55.176 31.268 mo(\001)sh55.176 31.267 mo(\001)sh55.176 31.267 mo(\001)sh55.176 31.267 mo(\001)sh55.176 31.267 mo(\001)sh55.176 31.266 mo(\001)sh55.176 31.266 mo(\001)sh55.176 31.2649 mo(\001)sh55.176 31.2649 mo(\001)sh55.176 31.2649 mo(\001)sh55.176 31.2639 mo(\001)sh55.176 31.2639 mo(\001)sh55.176 31.2629 mo(\001)sh55.176 31.2619 mo(\001)sh55.176 31.2619 mo(\001)sh55.176 31.2609 mo(\001)sh55.176 31.2599 mo(\001)sh55.176 31.2589 mo(\001)sh55.176 31.2579 mo(\001)sh55.176 31.2569 mo(\001)sh55.176 31.2559 mo(\001)sh55.176 31.2539 mo(\001)sh55.176 31.2519 mo(\001)sh55.176 31.2499 mo(\001)sh55.176 31.2469 mo(\001)sh55.176 31.2429 mo(\001)sh55.176 31.2379 mo(\001)sh55.176 31.2309 mo(\001)sh55.176 31.2189 mo(\001)sh55.176 31.1959 mo(\001)sh55.176 31.1369 mo(\001)shgrestore
gsave
56 33.198 mo
60 33.198 li
60 24.198 li
56 24.198 li
cp
clp
.895628 .7673 0 0 cmyk
RQARXA+Mathematica3*1 [5 0 0 -5 0 0 ]msf55.176 30.734 mo(\001)shgrestore
gsave
0 250.865 mo
360 250.865 li
360 13.8651 li
0 13.8651 li
cp
clp
.895628 .7673 0 0 cmyk
RQARXA+Mathematica3*1 [5 0 0 -5 0 0 ]msf59.854 33.957 mo(\001)sh59.854 33.956 mo(\001)sh59.854 33.955 mo(\001)sh59.854 33.954 mo(\001)sh59.854 33.953 mo(\001)sh59.854 33.952 mo(\001)sh59.854 33.951 mo(\001)sh59.854 33.9499 mo(\001)sh59.854 33.9489 mo(\001)sh59.854 33.9479 mo(\001)sh59.854 33.9469 mo(\001)sh59.854 33.9459 mo(\001)sh59.854 33.9449 mo(\001)sh59.854 33.9429 mo(\001)sh59.854 33.9419 mo(\001)sh59.854 33.9409 mo(\001)sh59.854 33.9389 mo(\001)sh59.854 33.9379 mo(\001)sh59.854 33.9359 mo(\001)sh59.854 33.9339 mo(\001)sh59.854 33.9329 mo(\001)sh59.854 33.9309 mo(\001)sh59.854 33.9289 mo(\001)sh59.854 33.9269 mo(\001)sh59.854 33.9249 mo(\001)sh59.854 33.9219 mo(\001)sh59.854 33.9199 mo(\001)sh59.854 33.9169 mo(\001)sh59.854 33.9139 mo(\001)sh59.854 33.9109 mo(\001)sh59.854 33.9079 mo(\001)sh59.854 33.9039 mo(\001)sh59.854 33.8999 mo(\001)sh59.854 33.8959 mo(\001)sh59.854 33.8909 mo(\001)sh59.854 33.8849 mo(\001)sh59.854 33.8789 mo(\001)sh59.854 33.8719 mo(\001)sh59.854 33.8639 mo(\001)sh59.854 33.8549 mo(\001)sh59.854 33.8439 mo(\001)sh59.854 33.8299 mo(\001)sh59.854 33.8129 mo(\001)sh59.854 33.7899 mo(\001)sh59.854 33.7599 mo(\001)sh59.854 33.7139 mo(\001)sh59.854 33.6419 mo(\001)sh59.854 33.5039 mo(\001)sh59.854 33.1529 mo(\001)sh59.854 30.7339 mo(\001)sh64.532 36.6419 mo(\001)sh64.532 36.6408 mo(\001)sh64.532 36.6388 mo(\001)sh64.532 36.6378 mo(\001)sh64.532 36.6358 mo(\001)sh64.532 36.6338 mo(\001)sh64.532 36.6318 mo(\001)sh64.532 36.6308 mo(\001)sh64.532 36.6288 mo(\001)sh64.532 36.6268 mo(\001)sh64.532 36.6248 mo(\001)sh64.532 36.6218 mo(\001)sh64.532 36.6198 mo(\001)sh64.532 36.6178 mo(\001)sh64.532 36.6148 mo(\001)sh64.532 36.6128 mo(\001)sh64.532 36.6098 mo(\001)sh64.532 36.6068 mo(\001)sh64.532 36.6048 mo(\001)sh64.532 36.6018 mo(\001)sh64.532 36.5978 mo(\001)sh64.532 36.5948 mo(\001)sh64.532 36.5908 mo(\001)sh64.532 36.5878 mo(\001)sh64.532 36.5838 mo(\001)sh64.532 36.5788 mo(\001)sh64.532 36.5748 mo(\001)sh64.532 36.5698 mo(\001)sh64.532 36.5648 mo(\001)sh64.532 36.5588 mo(\001)sh64.532 36.5528 mo(\001)sh64.532 36.5458 mo(\001)sh64.532 36.5388 mo(\001)sh64.532 36.5308 mo(\001)sh64.532 36.5218 mo(\001)sh64.532 36.5118 mo(\001)sh64.532 36.4998 mo(\001)sh64.532 36.4878 mo(\001)sh64.532 36.4728 mo(\001)sh64.532 36.4548 mo(\001)sh64.532 36.4348 mo(\001)sh64.532 36.4098 mo(\001)sh64.532 36.3778 mo(\001)sh64.532 36.3368 mo(\001)sh64.532 36.2808 mo(\001)sh64.532 36.1978 mo(\001)sh64.532 36.0648 mo(\001)sh64.532 35.8128 mo(\001)sh64.532 35.1698 mo(\001)sh64.532 30.7338 mo(\001)sh69.21 39.3278 mo(\001)sh69.21 39.3258 mo(\001)sh69.21 39.3228 mo(\001)sh69.21 39.3208 mo(\001)sh69.21 39.3188 mo(\001)sh69.21 39.3158 mo(\001)sh69.21 39.3128 mo(\001)sh69.21 39.3108 mo(\001)sh69.21 39.3078 mo(\001)sh69.21 39.3048 mo(\001)sh69.21 39.3018 mo(\001)sh69.21 39.2988 mo(\001)sh69.21 39.2958 mo(\001)sh69.21 39.2918 mo(\001)sh69.21 39.2888 mo(\001)sh69.21 39.2848 mo(\001)sh69.21 39.2808 mo(\001)sh69.21 39.2768 mo(\001)sh69.21 39.2728 mo(\001)sh69.21 39.2688 mo(\001)sh69.21 39.2638 mo(\001)sh69.21 39.2588 mo(\001)sh69.21 39.2538 mo(\001)sh69.21 39.2478 mo(\001)sh69.21 39.2418 mo(\001)sh69.21 39.2358 mo(\001)sh69.21 39.2288 mo(\001)sh69.21 39.2218 mo(\001)sh69.21 39.2148 mo(\001)sh69.21 39.2058 mo(\001)sh69.21 39.1978 mo(\001)sh69.21 39.1878 mo(\001)sh69.21 39.1768 mo(\001)sh69.21 39.1648 mo(\001)sh69.21 39.1518 mo(\001)sh69.21 39.1378 mo(\001)sh69.21 39.1208 mo(\001)sh69.21 39.1028 mo(\001)sh69.21 39.0808 mo(\001)sh69.21 39.0558 mo(\001)sh69.21 39.0258 mo(\001)sh69.21 38.9888 mo(\001)sh69.21 38.9438 mo(\001)sh69.21 38.8838 mo(\001)sh69.21 38.8018 mo(\001)sh69.21 38.6818 mo(\001)sh69.21 38.4878 mo(\001)sh69.21 38.1208 mo(\001)sh69.21 37.1858 mo(\001)sh69.21 30.7338 mo(\001)sh73.888 42.0128 mo(\001)sh73.888 42.0108 mo(\001)sh73.888 42.0078 mo(\001)sh73.888 42.0038 mo(\001)sh73.888 42.0008 mo(\001)sh73.888 41.9978 mo(\001)sh73.888 41.9948 mo(\001)sh73.888 41.9908 mo(\001)sh73.888 41.9868 mo(\001)sh73.888 41.9838 mo(\001)sh73.888 41.9798 mo(\001)sh73.888 41.9748 mo(\001)sh73.888 41.9708 mo(\001)sh73.888 41.9668 mo(\001)sh73.888 41.9618 mo(\001)sh73.888 41.9568 mo(\001)sh73.888 41.9517 mo(\001)sh73.888 41.9467 mo(\001)sh73.888 41.9407 mo(\001)sh73.888 41.9357 mo(\001)sh73.888 41.9287 mo(\001)sh73.888 41.9227 mo(\001)sh73.888 41.9157 mo(\001)sh73.888 41.9087 mo(\001)sh73.888 41.9007 mo(\001)sh73.888 41.8927 mo(\001)sh73.888 41.8837 mo(\001)sh73.888 41.8747 mo(\001)sh73.888 41.8647 mo(\001)sh73.888 41.8537 mo(\001)sh73.888 41.8417 mo(\001)sh73.888 41.8298 mo(\001)sh73.888 41.8157 mo(\001)sh73.888 41.7997 mo(\001)sh73.888 41.7827 mo(\001)sh73.888 41.7637 mo(\001)sh73.888 41.7417 mo(\001)sh73.888 41.7177 mo(\001)sh73.888 41.6897 mo(\001)sh73.888 41.6567 mo(\001)sh73.888 41.6167 mo(\001)sh73.888 41.5687 mo(\001)sh73.888 41.5087 mo(\001)sh73.888 41.4307 mo(\001)sh73.888 41.3227 mo(\001)sh73.888 41.1657 mo(\001)sh73.888 40.9107 mo(\001)sh73.888 40.4297 mo(\001)sh73.888 39.2017 mo(\001)sh73.888 30.7337 mo(\001)sh78.567 44.6987 mo(\001)sh78.567 44.6947 mo(\001)sh78.567 44.6917 mo(\001)sh78.567 44.6877 mo(\001)sh78.567 44.6837 mo(\001)sh78.567 44.6797 mo(\001)sh78.567 44.6757 mo(\001)sh78.567 44.6707 mo(\001)sh78.567 44.6667 mo(\001)sh78.567 44.6617 mo(\001)sh78.567 44.6567 mo(\001)sh78.567 44.6517 mo(\001)sh78.567 44.6467 mo(\001)sh78.567 44.6407 mo(\001)sh78.567 44.6347 mo(\001)sh78.567 44.6287 mo(\001)sh78.567 44.6227 mo(\001)sh78.567 44.6167 mo(\001)sh78.567 44.6097 mo(\001)sh78.567 44.6027 mo(\001)sh78.567 44.5947 mo(\001)sh78.567 44.5867 mo(\001)sh78.567 44.5787 mo(\001)sh78.567 44.5697 mo(\001)sh78.567 44.5597 mo(\001)sh78.567 44.5497 mo(\001)sh78.567 44.5387 mo(\001)sh78.567 44.5277 mo(\001)sh78.567 44.5147 mo(\001)sh78.567 44.5017 mo(\001)sh78.567 44.4867 mo(\001)sh78.567 44.4707 mo(\001)sh78.567 44.4537 mo(\001)sh78.567 44.4347 mo(\001)sh78.567 44.4137 mo(\001)sh78.567 44.3897 mo(\001)sh78.567 44.3637 mo(\001)sh78.567 44.3327 mo(\001)sh78.567 44.2977 mo(\001)sh78.567 44.2567 mo(\001)sh78.567 44.2077 mo(\001)sh78.567 44.1487 mo(\001)sh78.567 44.0747 mo(\001)sh78.567 43.9777 mo(\001)sh78.567 43.8447 mo(\001)sh78.567 43.6487 mo(\001)sh78.567 43.3337 mo(\001)sh78.567 42.7377 mo(\001)sh78.567 41.2177 mo(\001)sh78.567 30.7337 mo(\001)sh83.245 47.3847 mo(\001)sh83.245 47.3797 mo(\001)sh83.245 47.3757 mo(\001)sh83.245 47.3707 mo(\001)sh83.245 47.3667 mo(\001)sh83.245 47.3617 mo(\001)sh83.245 47.3567 mo(\001)sh83.245 47.3507 mo(\001)sh83.245 47.3457 mo(\001)sh83.245 47.3397 mo(\001)sh83.245 47.3347 mo(\001)sh83.245 47.3287 mo(\001)sh83.245 47.3217 mo(\001)sh83.245 47.3157 mo(\001)sh83.245 47.3087 mo(\001)sh83.245 47.3017 mo(\001)sh83.245 47.2937 mo(\001)sh83.245 47.2857 mo(\001)sh83.245 47.2777 mo(\001)sh83.245 47.2697 mo(\001)sh83.245 47.2607 mo(\001)sh83.245 47.2507 mo(\001)sh83.245 47.2407 mo(\001)sh83.245 47.2297 mo(\001)sh83.245 47.2187 mo(\001)sh83.245 47.2067 mo(\001)sh83.245 47.1937 mo(\001)sh83.245 47.1797 mo(\001)sh83.245 47.1647 mo(\001)sh83.245 47.1487 mo(\001)sh83.245 47.1317 mo(\001)sh83.245 47.1127 mo(\001)sh83.245 47.0917 mo(\001)sh83.245 47.0697 mo(\001)sh83.245 47.0447 mo(\001)sh83.245 47.0157 mo(\001)sh83.245 46.9847 mo(\001)sh83.245 46.9477 mo(\001)sh83.245 46.9067 mo(\001)sh83.245 46.8577 mo(\001)sh83.245 46.7997 mo(\001)sh83.245 46.7287 mo(\001)sh83.245 46.6397 mo(\001)sh83.245 46.5237 mo(\001)sh83.245 46.3657 mo(\001)sh83.245 46.1327 mo(\001)sh83.245 45.7567 mo(\001)sh83.245 45.0467 mo(\001)sh83.245 43.2337 mo(\001)sh83.245 30.7337 mo(\001)sh87.923 50.0697 mo(\001)sh87.923 50.0647 mo(\001)sh87.923 50.0597 mo(\001)sh87.923 50.0547 mo(\001)sh87.923 50.0487 mo(\001)sh87.923 50.0437 mo(\001)sh87.923 50.0377 mo(\001)sh87.923 50.0317 mo(\001)sh87.923 50.0247 mo(\001)sh87.923 50.0187 mo(\001)sh87.923 50.0117 mo(\001)sh87.923 50.0047 mo(\001)sh87.923 49.9977 mo(\001)sh87.923 49.9897 mo(\001)sh87.923 49.9817 mo(\001)sh87.923 49.9737 mo(\001)sh87.923 49.9647 mo(\001)sh87.923 49.9557 mo(\001)sh87.923 49.9467 mo(\001)sh87.923 49.9367 mo(\001)sh87.923 49.9257 mo(\001)sh87.923 49.9147 mo(\001)sh87.923 49.9027 mo(\001)sh87.923 49.8907 mo(\001)sh87.923 49.8777 mo(\001)sh87.923 49.8637 mo(\001)sh87.923 49.8487 mo(\001)sh87.923 49.8327 mo(\001)sh87.923 49.8157 mo(\001)sh87.923 49.7967 mo(\001)sh87.923 49.7767 mo(\001)sh87.923 49.7547 mo(\001)sh87.923 49.7307 mo(\001)sh87.923 49.7047 mo(\001)sh87.923 49.6747 mo(\001)sh87.923 49.6427 mo(\001)sh87.923 49.6057 mo(\001)sh87.923 49.5637 mo(\001)sh87.923 49.5147 mo(\001)sh87.923 49.4577 mo(\001)sh87.923 49.3907 mo(\001)sh87.923 49.3087 mo(\001)sh87.923 49.2047 mo(\001)sh87.923 49.0707 mo(\001)sh87.923 48.8867 mo(\001)sh87.923 48.6166 mo(\001)sh87.923 48.1797 mo(\001)sh87.923 47.3556 mo(\001)sh87.923 45.2496 mo(\001)sh87.923 30.7336 mo(\001)sh92.601 52.7556 mo(\001)sh92.601 52.7496 mo(\001)sh92.601 52.7436 mo(\001)sh92.601 52.7377 mo(\001)sh92.601 52.7317 mo(\001)sh92.601 52.7246 mo(\001)sh92.601 52.7187 mo(\001)sh92.601 52.7116 mo(\001)sh92.601 52.7046 mo(\001)sh92.601 52.6966 mo(\001)sh92.601 52.6896 mo(\001)sh92.601 52.6817 mo(\001)sh92.601 52.6726 mo(\001)sh92.601 52.6647 mo(\001)sh92.601 52.6556 mo(\001)sh92.601 52.6457 mo(\001)sh92.601 52.6357 mo(\001)sh92.601 52.6257 mo(\001)sh92.601 52.6147 mo(\001)sh92.601 52.6037 mo(\001)sh92.601 52.5917 mo(\001)sh92.601 52.5787 mo(\001)sh92.601 52.5657 mo(\001)sh92.601 52.5517 mo(\001)sh92.601 52.5367 mo(\001)sh92.601 52.5207 mo(\001)sh92.601 52.5037 mo(\001)sh92.601 52.4847 mo(\001)sh92.601 52.4657 mo(\001)sh92.601 52.4447 mo(\001)sh92.601 52.4217 mo(\001)sh92.601 52.3967 mo(\001)sh92.601 52.3687 mo(\001)sh92.601 52.3387 mo(\001)sh92.601 52.3057 mo(\001)sh92.601 52.2687 mo(\001)sh92.601 52.2267 mo(\001)sh92.601 52.1787 mo(\001)sh92.601 52.1237 mo(\001)sh92.601 52.0587 mo(\001)sh92.601 51.9817 mo(\001)sh92.601 51.8877 mo(\001)sh92.601 51.7707 mo(\001)sh92.601 51.6177 mo(\001)sh92.601 51.4077 mo(\001)sh92.601 51.0997 mo(\001)sh92.601 50.6027 mo(\001)sh92.601 49.6637 mo(\001)sh92.601 47.2667 mo(\001)sh92.601 30.7337 mo(\001)sh97.279 55.4407 mo(\001)sh97.279 55.4347 mo(\001)sh97.279 55.4277 mo(\001)sh97.279 55.4217 mo(\001)sh97.279 55.4147 mo(\001)sh97.279 55.4067 mo(\001)sh97.279 55.3997 mo(\001)sh97.279 55.3917 mo(\001)sh97.279 55.3837 mo(\001)sh97.279 55.3757 mo(\001)sh97.279 55.3667 mo(\001)sh97.279 55.3577 mo(\001)sh97.279 55.3487 mo(\001)sh97.279 55.3387 mo(\001)sh97.279 55.3287 mo(\001)sh97.279 55.3177 mo(\001)sh97.279 55.3067 mo(\001)sh97.279 55.2957 mo(\001)sh97.279 55.2827 mo(\001)sh97.279 55.2707 mo(\001)sh97.279 55.2567 mo(\001)sh97.279 55.2427 mo(\001)sh97.279 55.2277 mo(\001)sh97.279 55.2117 mo(\001)sh97.279 55.1947 mo(\001)sh97.279 55.1777 mo(\001)sh97.279 55.1577 mo(\001)sh97.279 55.1377 mo(\001)sh97.279 55.1157 mo(\001)sh97.279 55.0917 mo(\001)sh97.279 55.0657 mo(\001)sh97.279 55.0377 mo(\001)sh97.279 55.0077 mo(\001)sh97.279 54.9737 mo(\001)sh97.279 54.9367 mo(\001)sh97.279 54.8946 mo(\001)sh97.279 54.8477 mo(\001)sh97.279 54.7936 mo(\001)sh97.279 54.7317 mo(\001)sh97.279 54.6596 mo(\001)sh97.279 54.5726 mo(\001)sh97.279 54.4676 mo(\001)sh97.279 54.3356 mo(\001)sh97.279 54.1646 mo(\001)sh97.279 53.9286 mo(\001)sh97.279 53.5836 mo(\001)sh97.279 53.0256 mo(\001)sh97.279 51.9727 mo(\001)sh97.279 49.2826 mo(\001)sh97.279 30.7337 mo(\001)sh101.958 58.1267 mo(\001)sh101.958 58.1197 mo(\001)sh101.958 58.1127 mo(\001)sh101.958 58.1047 mo(\001)sh101.958 58.0967 mo(\001)sh101.958 58.0887 mo(\001)sh101.958 58.0807 mo(\001)sh101.958 58.0717 mo(\001)sh101.958 58.0627 mo(\001)sh101.958 58.0537 mo(\001)sh101.958 58.0447 mo(\001)sh101.958 58.0347 mo(\001)sh101.958 58.0237 mo(\001)sh101.958 58.0127 mo(\001)sh101.958 58.0017 mo(\001)sh101.958 57.9907 mo(\001)sh101.958 57.9777 mo(\001)sh101.958 57.9647 mo(\001)sh101.958 57.9517 mo(\001)sh101.958 57.9376 mo(\001)sh101.958 57.9226 mo(\001)sh101.958 57.9066 mo(\001)sh101.958 57.8906 mo(\001)sh101.958 57.8726 mo(\001)sh101.958 57.8536 mo(\001)sh101.958 57.8336 mo(\001)sh101.958 57.8126 mo(\001)sh101.958 57.7906 mo(\001)sh101.958 57.7656 mo(\001)sh101.958 57.7396 mo(\001)sh101.958 57.7106 mo(\001)sh101.958 57.6796 mo(\001)sh101.958 57.6456 mo(\001)sh101.958 57.6086 mo(\001)sh101.958 57.5666 mo(\001)sh101.958 57.5206 mo(\001)sh101.958 57.4686 mo(\001)sh101.958 57.4086 mo(\001)sh101.958 57.3406 mo(\001)sh101.958 57.2596 mo(\001)sh101.958 57.1646 mo(\001)sh101.958 57.0476 mo(\001)sh101.958 56.9016 mo(\001)sh101.958 56.7116 mo(\001)sh101.958 56.4506 mo(\001)sh101.958 56.0676 mo(\001)sh101.958 55.4486 mo(\001)sh101.958 54.2806 mo(\001)sh101.958 51.2986 mo(\001)sh101.958 30.7336 mo(\001)sh106.636 60.8126 mo(\001)sh106.636 60.8046 mo(\001)sh106.636 60.7966 mo(\001)sh106.636 60.7876 mo(\001)sh106.636 60.7796 mo(\001)sh106.636 60.7706 mo(\001)sh106.636 60.7616 mo(\001)sh106.636 60.7526 mo(\001)sh106.636 60.7426 mo(\001)sh106.636 60.7326 mo(\001)sh106.636 60.7216 mo(\001)sh106.636 60.7106 mo(\001)sh106.636 60.6996 mo(\001)sh106.636 60.6876 mo(\001)sh106.636 60.6756 mo(\001)sh106.636 60.6626 mo(\001)sh106.636 60.6486 mo(\001)sh106.636 60.6346 mo(\001)sh106.636 60.6196 mo(\001)sh106.636 60.6046 mo(\001)sh106.636 60.5876 mo(\001)sh106.636 60.5706 mo(\001)sh106.636 60.5526 mo(\001)sh106.636 60.5336 mo(\001)sh106.636 60.5126 mo(\001)sh106.636 60.4906 mo(\001)sh106.636 60.4676 mo(\001)sh106.636 60.4426 mo(\001)sh106.636 60.4156 mo(\001)sh106.636 60.3866 mo(\001)sh106.636 60.3556 mo(\001)sh106.636 60.3216 mo(\001)sh106.636 60.2846 mo(\001)sh106.636 60.2436 mo(\001)sh106.636 60.1976 mo(\001)sh106.636 60.1466 mo(\001)sh106.636 60.0896 mo(\001)sh106.636 60.0236 mo(\001)sh106.636 59.9486 mo(\001)sh106.636 59.8606 mo(\001)sh106.636 59.7556 mo(\001)sh106.636 59.6276 mo(\001)sh106.636 59.4666 mo(\001)sh106.636 59.2576 mo(\001)sh106.636 58.9716 mo(\001)sh106.636 58.5516 mo(\001)sh106.636 57.8717 mo(\001)sh106.636 56.5897 mo(\001)sh106.636 53.3147 mo(\001)sh106.636 30.7337 mo(\001)sh111.314 63.4977 mo(\001)sh111.314 63.4897 mo(\001)sh111.314 63.4807 mo(\001)sh111.314 63.4717 mo(\001)sh111.314 63.4627 mo(\001)sh111.314 63.4527 mo(\001)sh111.314 63.4427 mo(\001)sh111.314 63.4327 mo(\001)sh111.314 63.4217 mo(\001)sh111.314 63.4107 mo(\001)sh111.314 63.3997 mo(\001)sh111.314 63.3877 mo(\001)sh111.314 63.3747 mo(\001)sh111.314 63.3617 mo(\001)sh111.314 63.3487 mo(\001)sh111.314 63.3347 mo(\001)sh111.314 63.3197 mo(\001)sh111.314 63.3047 mo(\001)sh111.314 63.2887 mo(\001)sh111.314 63.2717 mo(\001)sh111.314 63.2537 mo(\001)sh111.314 63.2347 mo(\001)sh111.314 63.2147 mo(\001)sh111.314 63.1937 mo(\001)sh111.314 63.1717 mo(\001)sh111.314 63.1477 mo(\001)sh111.314 63.1227 mo(\001)sh111.314 63.0957 mo(\001)sh111.314 63.0667 mo(\001)sh111.314 63.0347 mo(\001)sh111.314 63.0007 mo(\001)sh111.314 62.9637 mo(\001)sh111.314 62.9227 mo(\001)sh111.314 62.8777 mo(\001)sh111.314 62.8287 mo(\001)sh111.314 62.7727 mo(\001)sh111.314 62.7107 mo(\001)sh111.314 62.6397 mo(\001)sh111.314 62.5577 mo(\001)sh111.314 62.4617 mo(\001)sh111.314 62.3467 mo(\001)sh111.314 62.2077 mo(\001)sh111.314 62.0327 mo(\001)sh111.314 61.8047 mo(\001)sh111.314 61.4927 mo(\001)sh111.314 61.0347 mo(\001)sh111.314 60.2947 mo(\001)sh111.314 58.8977 mo(\001)sh111.314 55.3307 mo(\001)sh111.314 30.7337 mo(\001)sh115.992 66.1837 mo(\001)sh115.992 66.1747 mo(\001)sh115.992 66.1647 mo(\001)sh115.992 66.1547 mo(\001)sh115.992 66.1447 mo(\001)sh115.992 66.1347 mo(\001)sh115.992 66.1237 mo(\001)sh115.992 66.1127 mo(\001)sh115.992 66.1007 mo(\001)sh115.992 66.0897 mo(\001)sh115.992 66.0767 mo(\001)sh115.992 66.0637 mo(\001)sh115.992 66.0507 mo(\001)sh115.992 66.0367 mo(\001)sh115.992 66.0217 mo(\001)sh115.992 66.0067 mo(\001)sh115.992 65.9907 mo(\001)sh115.992 65.9747 mo(\001)sh115.992 65.9567 mo(\001)sh115.992 65.9387 mo(\001)sh115.992 65.9197 mo(\001)sh115.992 65.8987 mo(\001)sh115.992 65.8777 mo(\001)sh115.992 65.8547 mo(\001)sh115.992 65.8307 mo(\001)sh115.992 65.8047 mo(\001)sh115.992 65.7777 mo(\001)sh115.992 65.7477 mo(\001)sh115.992 65.7167 mo(\001)sh115.992 65.6827 mo(\001)sh115.992 65.6457 mo(\001)sh115.992 65.6057 mo(\001)sh115.992 65.5617 mo(\001)sh115.992 65.5127 mo(\001)sh115.992 65.4597 mo(\001)sh115.992 65.3997 mo(\001)sh115.992 65.3317 mo(\001)sh115.992 65.2547 mo(\001)sh115.992 65.1657 mo(\001)sh115.992 65.0617 mo(\001)sh115.992 64.9377 mo(\001)sh115.992 64.7867 mo(\001)sh115.992 64.5977 mo(\001)sh115.992 64.3517 mo(\001)sh115.992 64.0137 mo(\001)sh115.992 63.5187 mo(\001)sh115.992 62.7177 mo(\001)sh115.992 61.2067 mo(\001)sh115.992 57.3477 mo(\001)sh115.992 30.7337 mo(\001)sh120.67 68.8687 mo(\001)sh120.67 68.8587 mo(\001)sh120.67 68.8487 mo(\001)sh120.67 68.8387 mo(\001)sh120.67 68.8277 mo(\001)sh120.67 68.8167 mo(\001)sh120.67 68.8047 mo(\001)sh120.67 68.7927 mo(\001)sh120.67 68.7807 mo(\001)sh120.67 68.7677 mo(\001)sh120.67 68.7547 mo(\001)sh120.67 68.7407 mo(\001)sh120.67 68.7257 mo(\001)sh120.67 68.7107 mo(\001)sh120.67 68.6957 mo(\001)sh120.67 68.6787 mo(\001)sh120.67 68.6617 mo(\001)sh120.67 68.6437 mo(\001)sh120.67 68.6257 mo(\001)sh120.67 68.6057 mo(\001)sh120.67 68.5847 mo(\001)sh120.67 68.5627 mo(\001)sh120.67 68.5397 mo(\001)sh120.67 68.5157 mo(\001)sh120.67 68.4897 mo(\001)sh120.67 68.4617 mo(\001)sh120.67 68.4327 mo(\001)sh120.67 68.4007 mo(\001)sh120.67 68.3667 mo(\001)sh120.67 68.3297 mo(\001)sh120.67 68.2907 mo(\001)sh120.67 68.2467 mo(\001)sh120.67 68.1997 mo(\001)sh120.67 68.1477 mo(\001)sh120.67 68.0897 mo(\001)sh120.67 68.0257 mo(\001)sh120.67 67.9527 mo(\001)sh120.67 67.8697 mo(\001)sh120.67 67.7747 mo(\001)sh120.67 67.6627 mo(\001)sh120.67 67.5297 mo(\001)sh120.67 67.3667 mo(\001)sh120.67 67.1637 mo(\001)sh120.67 66.8987 mo(\001)sh120.67 66.5357 mo(\001)sh120.67 66.0027 mo(\001)sh120.67 65.1407 mo(\001)sh120.67 63.5147 mo(\001)sh120.67 59.3637 mo(\001)sh120.67 30.7337 mo(\001)sh125.349 71.5547 mo(\001)sh125.349 71.5437 mo(\001)sh125.349 71.5327 mo(\001)sh125.349 71.5217 mo(\001)sh125.349 71.5107 mo(\001)sh125.349 71.4987 mo(\001)sh125.349 71.4857 mo(\001)sh125.349 71.4727 mo(\001)sh125.349 71.4597 mo(\001)sh125.349 71.4457 mo(\001)sh125.349 71.4317 mo(\001)sh125.349 71.4167 mo(\001)sh125.349 71.4017 mo(\001)sh125.349 71.3857 mo(\001)sh125.349 71.3687 mo(\001)sh125.349 71.3517 mo(\001)sh125.349 71.3327 mo(\001)sh125.349 71.3137 mo(\001)sh125.349 71.2937 mo(\001)sh125.349 71.2727 mo(\001)sh125.349 71.2507 mo(\001)sh125.349 71.2267 mo(\001)sh125.349 71.2027 mo(\001)sh125.349 71.1757 mo(\001)sh125.349 71.1487 mo(\001)sh125.349 71.1187 mo(\001)sh125.349 71.0867 mo(\001)sh125.349 71.0537 mo(\001)sh125.349 71.0167 mo(\001)sh125.349 70.9777 mo(\001)sh125.349 70.9347 mo(\001)sh125.349 70.8887 mo(\001)sh125.349 70.8387 mo(\001)sh125.349 70.7827 mo(\001)sh125.349 70.7207 mo(\001)sh125.349 70.6517 mo(\001)sh125.349 70.5737 mo(\001)sh125.349 70.4847 mo(\001)sh125.349 70.3827 mo(\001)sh125.349 70.2627 mo(\001)sh125.349 70.1207 mo(\001)sh125.349 69.9467 mo(\001)sh125.349 69.7287 mo(\001)sh125.349 69.4457 mo(\001)sh125.349 69.0567 mo(\001)sh125.349 68.4857 mo(\001)sh125.349 67.5637 mo(\001)sh125.349 65.8237 mo(\001)sh125.349 61.3797 mo(\001)sh125.349 30.7337 mo(\001)sh130.027 74.2397 mo(\001)sh130.027 74.2287 mo(\001)sh130.027 74.2177 mo(\001)sh130.027 74.2057 mo(\001)sh130.027 74.1927 mo(\001)sh130.027 74.1807 mo(\001)sh130.027 74.1667 mo(\001)sh130.027 74.1537 mo(\001)sh130.027 74.1397 mo(\001)sh130.027 74.1247 mo(\001)sh130.027 74.1097 mo(\001)sh130.027 74.0937 mo(\001)sh130.027 74.0767 mo(\001)sh130.027 74.0597 mo(\001)sh130.027 74.0417 mo(\001)sh130.027 74.0237 mo(\001)sh130.027 74.0037 mo(\001)sh130.027 73.9837 mo(\001)sh130.027 73.9616 mo(\001)sh130.027 73.9396 mo(\001)sh130.027 73.9156 mo(\001)sh130.027 73.8907 mo(\001)sh130.027 73.8646 mo(\001)sh130.027 73.8366 mo(\001)sh130.027 73.8067 mo(\001)sh130.027 73.7756 mo(\001)sh130.027 73.7416 mo(\001)sh130.027 73.7057 mo(\001)sh130.027 73.6667 mo(\001)sh130.027 73.6257 mo(\001)sh130.027 73.5796 mo(\001)sh130.027 73.5306 mo(\001)sh130.027 73.4766 mo(\001)sh130.027 73.4176 mo(\001)sh130.027 73.3516 mo(\001)sh130.027 73.2776 mo(\001)sh130.027 73.1947 mo(\001)sh130.027 73.1007 mo(\001)sh130.027 72.9917 mo(\001)sh130.027 72.8637 mo(\001)sh130.027 72.7117 mo(\001)sh130.027 72.5267 mo(\001)sh130.027 72.2947 mo(\001)sh130.027 71.9927 mo(\001)sh130.027 71.5777 mo(\001)sh130.027 70.9697 mo(\001)sh130.027 69.9867 mo(\001)sh130.027 68.1317 mo(\001)sh130.027 63.3957 mo(\001)sh130.027 30.7337 mo(\001)sh134.705 76.9257 mo(\001)sh134.705 76.9137 mo(\001)sh134.705 76.9017 mo(\001)sh134.705 76.8887 mo(\001)sh134.705 76.8757 mo(\001)sh134.705 76.8617 mo(\001)sh134.705 76.8477 mo(\001)sh134.705 76.8337 mo(\001)sh134.705 76.8187 mo(\001)sh134.705 76.8027 mo(\001)sh134.705 76.7867 mo(\001)sh134.705 76.7697 mo(\001)sh134.705 76.7527 mo(\001)sh134.705 76.7347 mo(\001)sh134.705 76.7157 mo(\001)sh134.705 76.6957 mo(\001)sh134.705 76.6747 mo(\001)sh134.705 76.6537 mo(\001)sh134.705 76.6307 mo(\001)sh134.705 76.6067 mo(\001)sh134.705 76.5817 mo(\001)sh134.705 76.5547 mo(\001)sh134.705 76.5267 mo(\001)sh134.705 76.4977 mo(\001)sh134.705 76.4657 mo(\001)sh134.705 76.4327 mo(\001)sh134.705 76.3967 mo(\001)sh134.705 76.3587 mo(\001)sh134.705 76.3177 mo(\001)sh134.705 76.2727 mo(\001)sh134.705 76.2247 mo(\001)sh134.705 76.1727 mo(\001)sh134.705 76.1147 mo(\001)sh134.705 76.0517 mo(\001)sh134.705 75.9817 mo(\001)sh134.705 75.9037 mo(\001)sh134.705 75.8157 mo(\001)sh134.705 75.7157 mo(\001)sh134.705 75.5997 mo(\001)sh134.705 75.4647 mo(\001)sh134.705 75.3027 mo(\001)sh134.705 75.1067 mo(\001)sh134.705 74.8597 mo(\001)sh134.705 74.5387 mo(\001)sh134.705 74.0987 mo(\001)sh134.705 73.4537 mo(\001)sh134.705 72.4097 mo(\001)sh134.705 70.4407 mo(\001)sh134.705 65.4117 mo(\001)sh134.705 30.7337 mo(\001)sh139.383 79.6117 mo(\001)sh139.383 79.5987 mo(\001)sh139.383 79.5857 mo(\001)sh139.383 79.5716 mo(\001)sh139.383 79.5586 mo(\001)sh139.383 79.5436 mo(\001)sh139.383 79.5287 mo(\001)sh139.383 79.5137 mo(\001)sh139.383 79.4976 mo(\001)sh139.383 79.4816 mo(\001)sh139.383 79.4646 mo(\001)sh139.383 79.4466 mo(\001)sh139.383 79.4276 mo(\001)sh139.383 79.4086 mo(\001)sh139.383 79.3886 mo(\001)sh139.383 79.3676 mo(\001)sh139.383 79.3456 mo(\001)sh139.383 79.3226 mo(\001)sh139.383 79.2986 mo(\001)sh139.383 79.2736 mo(\001)sh139.383 79.2467 mo(\001)sh139.383 79.2187 mo(\001)sh139.383 79.1896 mo(\001)sh139.383 79.1576 mo(\001)sh139.383 79.1246 mo(\001)sh139.383 79.0896 mo(\001)sh139.383 79.0516 mo(\001)sh139.383 79.0106 mo(\001)sh139.383 78.9676 mo(\001)sh139.383 78.9206 mo(\001)sh139.383 78.8697 mo(\001)sh139.383 78.8147 mo(\001)sh139.383 78.7537 mo(\001)sh139.383 78.6867 mo(\001)sh139.383 78.6127 mo(\001)sh139.383 78.5297 mo(\001)sh139.383 78.4367 mo(\001)sh139.383 78.3307 mo(\001)sh139.383 78.2087 mo(\001)sh139.383 78.0647 mo(\001)sh139.383 77.8937 mo(\001)sh139.383 77.6857 mo(\001)sh139.383 77.4257 mo(\001)sh139.383 77.0857 mo(\001)sh139.383 76.6207 mo(\001)sh139.383 75.9367 mo(\001)sh139.383 74.8327 mo(\001)sh139.383 72.7487 mo(\001)sh139.383 67.4277 mo(\001)sh139.383 30.7337 mo(\001)sh144.061 82.2967 mo(\001)sh144.061 82.2837 mo(\001)sh144.061 82.2697 mo(\001)sh144.061 82.2557 mo(\001)sh144.061 82.2407 mo(\001)sh144.061 82.2257 mo(\001)sh144.061 82.2107 mo(\001)sh144.061 82.1937 mo(\001)sh144.061 82.1777 mo(\001)sh144.061 82.1596 mo(\001)sh144.061 82.1416 mo(\001)sh144.061 82.1226 mo(\001)sh144.061 82.1036 mo(\001)sh144.061 82.0836 mo(\001)sh144.061 82.0616 mo(\001)sh144.061 82.0396 mo(\001)sh144.061 82.0166 mo(\001)sh144.061 81.9926 mo(\001)sh144.061 81.9676 mo(\001)sh144.061 81.9407 mo(\001)sh144.061 81.9127 mo(\001)sh144.061 81.8827 mo(\001)sh144.061 81.8516 mo(\001)sh144.061 81.8186 mo(\001)sh144.061 81.7836 mo(\001)sh144.061 81.7466 mo(\001)sh144.061 81.7066 mo(\001)sh144.061 81.6636 mo(\001)sh144.061 81.6176 mo(\001)sh144.061 81.5676 mo(\001)sh144.061 81.5146 mo(\001)sh144.061 81.4556 mo(\001)sh144.061 81.3916 mo(\001)sh144.061 81.3216 mo(\001)sh144.061 81.2436 mo(\001)sh144.061 81.1566 mo(\001)sh144.061 81.0576 mo(\001)sh144.061 80.9456 mo(\001)sh144.061 80.8166 mo(\001)sh144.061 80.6656 mo(\001)sh144.061 80.4856 mo(\001)sh144.061 80.2656 mo(\001)sh144.061 79.9906 mo(\001)sh144.061 79.6326 mo(\001)sh144.061 79.1416 mo(\001)sh144.061 78.4206 mo(\001)sh144.061 77.2557 mo(\001)sh144.061 75.0577 mo(\001)sh144.061 69.4447 mo(\001)sh144.061 30.7337 mo(\001)sh148.74 84.9826 mo(\001)sh148.74 84.9686 mo(\001)sh148.74 84.9536 mo(\001)sh148.74 84.9386 mo(\001)sh148.74 84.9236 mo(\001)sh148.74 84.9076 mo(\001)sh148.74 84.8916 mo(\001)sh148.74 84.8746 mo(\001)sh148.74 84.8566 mo(\001)sh148.74 84.8386 mo(\001)sh148.74 84.8196 mo(\001)sh148.74 84.7996 mo(\001)sh148.74 84.7786 mo(\001)sh148.74 84.7576 mo(\001)sh148.74 84.7356 mo(\001)sh148.74 84.7126 mo(\001)sh148.74 84.6876 mo(\001)sh148.74 84.6626 mo(\001)sh148.74 84.6356 mo(\001)sh148.74 84.6076 mo(\001)sh148.74 84.5786 mo(\001)sh148.74 84.5466 mo(\001)sh148.74 84.5146 mo(\001)sh148.74 84.4796 mo(\001)sh148.74 84.4426 mo(\001)sh148.74 84.4036 mo(\001)sh148.74 84.3616 mo(\001)sh148.74 84.3166 mo(\001)sh148.74 84.2676 mo(\001)sh148.74 84.2156 mo(\001)sh148.74 84.1596 mo(\001)sh148.74 84.0976 mo(\001)sh148.74 84.0306 mo(\001)sh148.74 83.9566 mo(\001)sh148.74 83.8746 mo(\001)sh148.74 83.7826 mo(\001)sh148.74 83.6786 mo(\001)sh148.74 83.5606 mo(\001)sh148.74 83.4246 mo(\001)sh148.74 83.2656 mo(\001)sh148.74 83.0766 mo(\001)sh148.74 82.8456 mo(\001)sh148.74 82.5566 mo(\001)sh148.74 82.1796 mo(\001)sh148.74 81.6626 mo(\001)sh148.74 80.9046 mo(\001)sh148.74 79.6786 mo(\001)sh148.74 77.3666 mo(\001)sh148.74 71.4606 mo(\001)sh148.74 30.7336 mo(\001)sh153.418 87.6676 mo(\001)sh153.418 87.6536 mo(\001)sh153.418 87.6376 mo(\001)sh153.418 87.6226 mo(\001)sh153.418 87.6066 mo(\001)sh153.418 87.5896 mo(\001)sh153.418 87.5726 mo(\001)sh153.418 87.5546 mo(\001)sh153.418 87.5356 mo(\001)sh153.418 87.5166 mo(\001)sh153.418 87.4966 mo(\001)sh153.418 87.4756 mo(\001)sh153.418 87.4546 mo(\001)sh153.418 87.4316 mo(\001)sh153.418 87.4086 mo(\001)sh153.418 87.3846 mo(\001)sh153.418 87.3586 mo(\001)sh153.418 87.3326 mo(\001)sh153.418 87.3036 mo(\001)sh153.418 87.2746 mo(\001)sh153.418 87.2436 mo(\001)sh153.418 87.2106 mo(\001)sh153.418 87.1766 mo(\001)sh153.418 87.1396 mo(\001)sh153.418 87.1016 mo(\001)sh153.418 87.0596 mo(\001)sh153.418 87.0156 mo(\001)sh153.418 86.9686 mo(\001)sh153.418 86.9176 mo(\001)sh153.418 86.8636 mo(\001)sh153.418 86.8036 mo(\001)sh153.418 86.7396 mo(\001)sh153.418 86.6686 mo(\001)sh153.418 86.5916 mo(\001)sh153.418 86.5046 mo(\001)sh153.418 86.4086 mo(\001)sh153.418 86.2996 mo(\001)sh153.418 86.1766 mo(\001)sh153.418 86.0336 mo(\001)sh153.418 85.8666 mo(\001)sh153.418 85.6676 mo(\001)sh153.418 85.4256 mo(\001)sh153.418 85.1216 mo(\001)sh153.418 84.7266 mo(\001)sh153.418 84.1836 mo(\001)sh153.418 83.3886 mo(\001)sh153.418 82.1016 mo(\001)sh153.418 79.6746 mo(\001)sh153.418 73.4766 mo(\001)sh153.418 30.7336 mo(\001)sh158.096 90.3536 mo(\001)sh158.096 90.3376 mo(\001)sh158.096 90.3226 mo(\001)sh158.096 90.3056 mo(\001)sh158.096 90.2886 mo(\001)sh158.096 90.2716 mo(\001)sh158.096 90.2536 mo(\001)sh158.096 90.2346 mo(\001)sh158.096 90.2156 mo(\001)sh158.096 90.1956 mo(\001)sh158.096 90.1746 mo(\001)sh158.096 90.1526 mo(\001)sh158.096 90.1296 mo(\001)sh158.096 90.1066 mo(\001)sh158.096 90.0816 mo(\001)sh158.096 90.0566 mo(\001)sh158.096 90.0296 mo(\001)sh158.096 90.0016 mo(\001)sh158.096 89.9726 mo(\001)sh158.096 89.9416 mo(\001)sh158.096 89.9096 mo(\001)sh158.096 89.8756 mo(\001)sh158.096 89.8386 mo(\001)sh158.096 89.8006 mo(\001)sh158.096 89.7606 mo(\001)sh158.096 89.7166 mo(\001)sh158.096 89.6706 mo(\001)sh158.096 89.6216 mo(\001)sh158.096 89.5686 mo(\001)sh158.096 89.5106 mo(\001)sh158.096 89.4486 mo(\001)sh158.096 89.3816 mo(\001)sh158.096 89.3076 mo(\001)sh158.096 89.2256 mo(\001)sh158.096 89.1356 mo(\001)sh158.096 89.0346 mo(\001)sh158.096 88.9206 mo(\001)sh158.096 88.7917 mo(\001)sh158.096 88.6417 mo(\001)sh158.096 88.4677 mo(\001)sh158.096 88.2587 mo(\001)sh158.096 88.0057 mo(\001)sh158.096 87.6877 mo(\001)sh158.096 87.2727 mo(\001)sh158.096 86.7057 mo(\001)sh158.096 85.8717 mo(\001)sh158.096 84.5247 mo(\001)sh158.096 81.9837 mo(\001)sh158.096 75.4927 mo(\001)sh158.096 30.7337 mo(\001)sh162.774 93.0387 mo(\001)sh162.774 93.0227 mo(\001)sh162.774 93.0067 mo(\001)sh162.774 92.9897 mo(\001)sh162.774 92.9717 mo(\001)sh162.774 92.9537 mo(\001)sh162.774 92.9347 mo(\001)sh162.774 92.9147 mo(\001)sh162.774 92.8946 mo(\001)sh162.774 92.8737 mo(\001)sh162.774 92.8516 mo(\001)sh162.774 92.8287 mo(\001)sh162.774 92.8057 mo(\001)sh162.774 92.7807 mo(\001)sh162.774 92.7557 mo(\001)sh162.774 92.7287 mo(\001)sh162.774 92.7007 mo(\001)sh162.774 92.6717 mo(\001)sh162.774 92.6407 mo(\001)sh162.774 92.6087 mo(\001)sh162.774 92.5747 mo(\001)sh162.774 92.5397 mo(\001)sh162.774 92.5017 mo(\001)sh162.774 92.4617 mo(\001)sh162.774 92.4187 mo(\001)sh162.774 92.3737 mo(\001)sh162.774 92.3257 mo(\001)sh162.774 92.2737 mo(\001)sh162.774 92.2187 mo(\001)sh162.774 92.1587 mo(\001)sh162.774 92.0937 mo(\001)sh162.774 92.0237 mo(\001)sh162.774 91.9457 mo(\001)sh162.774 91.8607 mo(\001)sh162.774 91.7667 mo(\001)sh162.774 91.6607 mo(\001)sh162.774 91.5417 mo(\001)sh162.774 91.4067 mo(\001)sh162.774 91.2507 mo(\001)sh162.774 91.0677 mo(\001)sh162.774 90.8507 mo(\001)sh162.774 90.5847 mo(\001)sh162.774 90.2527 mo(\001)sh162.774 89.8197 mo(\001)sh162.774 89.2267 mo(\001)sh162.774 88.3557 mo(\001)sh162.774 86.9477 mo(\001)sh162.774 84.2917 mo(\001)sh162.774 77.5086 mo(\001)sh162.774 30.7336 mo(\001)sh167.452 95.7246 mo(\001)sh167.452 95.7076 mo(\001)sh167.452 95.6906 mo(\001)sh167.452 95.6726 mo(\001)sh167.452 95.6546 mo(\001)sh167.452 95.6356 mo(\001)sh167.452 95.6156 mo(\001)sh167.452 95.5946 mo(\001)sh167.452 95.5736 mo(\001)sh167.452 95.5516 mo(\001)sh167.452 95.5296 mo(\001)sh167.452 95.5056 mo(\001)sh167.452 95.4806 mo(\001)sh167.452 95.4556 mo(\001)sh167.452 95.4286 mo(\001)sh167.452 95.4006 mo(\001)sh167.452 95.3716 mo(\001)sh167.452 95.3416 mo(\001)sh167.452 95.3096 mo(\001)sh167.452 95.2756 mo(\001)sh167.452 95.2406 mo(\001)sh167.452 95.2036 mo(\001)sh167.452 95.1636 mo(\001)sh167.452 95.1226 mo(\001)sh167.452 95.0776 mo(\001)sh167.452 95.0306 mo(\001)sh167.452 94.9806 mo(\001)sh167.452 94.9266 mo(\001)sh167.452 94.8686 mo(\001)sh167.452 94.8067 mo(\001)sh167.452 94.7387 mo(\001)sh167.452 94.6647 mo(\001)sh167.452 94.5847 mo(\001)sh167.452 94.4956 mo(\001)sh167.452 94.3966 mo(\001)sh167.452 94.2866 mo(\001)sh167.452 94.1636 mo(\001)sh167.452 94.0216 mo(\001)sh167.452 93.8587 mo(\001)sh167.452 93.6686 mo(\001)sh167.452 93.4416 mo(\001)sh167.452 93.1647 mo(\001)sh167.452 92.8187 mo(\001)sh167.452 92.3667 mo(\001)sh167.452 91.7477 mo(\001)sh167.452 90.8397 mo(\001)sh167.452 89.3707 mo(\001)sh167.452 86.6007 mo(\001)sh167.452 79.5247 mo(\001)sh167.452 30.7337 mo(\001)sh172.131 98.4107 mo(\001)sh172.131 98.3926 mo(\001)sh172.131 98.3746 mo(\001)sh172.131 98.3556 mo(\001)sh172.131 98.3366 mo(\001)sh172.131 98.3166 mo(\001)sh172.131 98.2966 mo(\001)sh172.131 98.2756 mo(\001)sh172.131 98.2536 mo(\001)sh172.131 98.2306 mo(\001)sh172.131 98.2066 mo(\001)sh172.131 98.1826 mo(\001)sh172.131 98.1566 mo(\001)sh172.131 98.1296 mo(\001)sh172.131 98.1027 mo(\001)sh172.131 98.0736 mo(\001)sh172.131 98.0426 mo(\001)sh172.131 98.0106 mo(\001)sh172.131 97.9776 mo(\001)sh172.131 97.9426 mo(\001)sh172.131 97.9056 mo(\001)sh172.131 97.8676 mo(\001)sh172.131 97.8266 mo(\001)sh172.131 97.7826 mo(\001)sh172.131 97.7366 mo(\001)sh172.131 97.6876 mo(\001)sh172.131 97.6356 mo(\001)sh172.131 97.5796 mo(\001)sh172.131 97.5186 mo(\001)sh172.131 97.4536 mo(\001)sh172.131 97.3836 mo(\001)sh172.131 97.3066 mo(\001)sh172.131 97.2226 mo(\001)sh172.131 97.1306 mo(\001)sh172.131 97.0276 mo(\001)sh172.131 96.9136 mo(\001)sh172.131 96.7846 mo(\001)sh172.131 96.6366 mo(\001)sh172.131 96.4676 mo(\001)sh172.131 96.2686 mo(\001)sh172.131 96.0326 mo(\001)sh172.131 95.7446 mo(\001)sh172.131 95.3836 mo(\001)sh172.131 94.9136 mo(\001)sh172.131 94.2686 mo(\001)sh172.131 93.3226 mo(\001)sh172.131 91.7936 mo(\001)sh172.131 88.9086 mo(\001)sh172.131 81.5416 mo(\001)sh172.131 30.7336 mo(\001)sh176.809 101.096 mo(\001)sh176.809 101.078 mo(\001)sh176.809 101.059 mo(\001)sh176.809 101.04 mo(\001)sh176.809 101.02 mo(\001)sh176.809 100.999 mo(\001)sh176.809 100.978 mo(\001)sh176.809 100.956 mo(\001)sh176.809 100.933 mo(\001)sh176.809 100.909 mo(\001)sh176.809 100.885 mo(\001)sh176.809 100.859 mo(\001)sh176.809 100.832 mo(\001)sh176.809 100.805 mo(\001)sh176.809 100.776 mo(\001)sh176.809 100.746 mo(\001)sh176.809 100.714 mo(\001)sh176.809 100.681 mo(\001)sh176.809 100.647 mo(\001)sh176.809 100.61 mo(\001)sh176.809 100.572 mo(\001)sh176.809 100.532 mo(\001)sh176.809 100.489 mo(\001)sh176.809 100.444 mo(\001)sh176.809 100.396 mo(\001)sh176.809 100.345 mo(\001)sh176.809 100.29 mo(\001)sh176.809 100.232 mo(\001)sh176.809 100.169 mo(\001)sh176.809 100.102 mo(\001)sh176.809 100.029 mo(\001)sh176.809 99.9487 mo(\001)sh176.809 99.8617 mo(\001)sh176.809 99.7647 mo(\001)sh176.809 99.6587 mo(\001)sh176.809 99.5397 mo(\001)sh176.809 99.4056 mo(\001)sh176.809 99.2526 mo(\001)sh176.809 99.0756 mo(\001)sh176.809 98.8697 mo(\001)sh176.809 98.6237 mo(\001)sh176.809 98.3247 mo(\001)sh176.809 97.9497 mo(\001)sh176.809 97.4607 mo(\001)sh176.809 96.7907 mo(\001)sh176.809 95.8067 mo(\001)sh176.809 94.2167 mo(\001)sh176.809 91.2177 mo(\001)sh176.809 83.5577 mo(\001)sh176.809 30.7337 mo(\001)sh181.487 103.782 mo(\001)sh181.487 103.763 mo(\001)sh181.487 103.743 mo(\001)sh181.487 103.723 mo(\001)sh181.487 103.703 mo(\001)sh181.487 103.681 mo(\001)sh181.487 103.659 mo(\001)sh181.487 103.636 mo(\001)sh181.487 103.612 mo(\001)sh181.487 103.588 mo(\001)sh181.487 103.562 mo(\001)sh181.487 103.536 mo(\001)sh181.487 103.508 mo(\001)sh181.487 103.479 mo(\001)sh181.487 103.449 mo(\001)sh181.487 103.418 mo(\001)sh181.487 103.385 mo(\001)sh181.487 103.351 mo(\001)sh181.487 103.315 mo(\001)sh181.487 103.277 mo(\001)sh181.487 103.238 mo(\001)sh181.487 103.196 mo(\001)sh181.487 103.151 mo(\001)sh181.487 103.105 mo(\001)sh181.487 103.055 mo(\001)sh181.487 103.002 mo(\001)sh181.487 102.945 mo(\001)sh181.487 102.885 mo(\001)sh181.487 102.82 mo(\001)sh181.487 102.75 mo(\001)sh181.487 102.673 mo(\001)sh181.487 102.591 mo(\001)sh181.487 102.5 mo(\001)sh181.487 102.4 mo(\001)sh181.487 102.29 mo(\001)sh181.487 102.166 mo(\001)sh181.487 102.027 mo(\001)sh181.487 101.868 mo(\001)sh181.487 101.685 mo(\001)sh181.487 101.471 mo(\001)sh181.487 101.216 mo(\001)sh181.487 100.905 mo(\001)sh181.487 100.515 mo(\001)sh181.487 100.008 mo(\001)sh181.487 99.3116 mo(\001)sh181.487 98.2906 mo(\001)sh181.487 96.6396 mo(\001)sh181.487 93.5256 mo(\001)sh181.487 85.5736 mo(\001)sh181.487 30.7336 mo(\001)sh186.165 106.467 mo(\001)sh186.165 106.448 mo(\001)sh186.165 106.428 mo(\001)sh186.165 106.407 mo(\001)sh186.165 106.385 mo(\001)sh186.165 106.363 mo(\001)sh186.165 106.34 mo(\001)sh186.165 106.316 mo(\001)sh186.165 106.292 mo(\001)sh186.165 106.266 mo(\001)sh186.165 106.24 mo(\001)sh186.165 106.212 mo(\001)sh186.165 106.184 mo(\001)sh186.165 106.154 mo(\001)sh186.165 106.123 mo(\001)sh186.165 106.09 mo(\001)sh186.165 106.056 mo(\001)sh186.165 106.021 mo(\001)sh186.165 105.983 mo(\001)sh186.165 105.944 mo(\001)sh186.165 105.903 mo(\001)sh186.165 105.86 mo(\001)sh186.165 105.814 mo(\001)sh186.165 105.765 mo(\001)sh186.165 105.714 mo(\001)sh186.165 105.659 mo(\001)sh186.165 105.6 mo(\001)sh186.165 105.537 mo(\001)sh186.165 105.47 mo(\001)sh186.165 105.397 mo(\001)sh186.165 105.318 mo(\001)sh186.165 105.232 mo(\001)sh186.165 105.138 mo(\001)sh186.165 105.035 mo(\001)sh186.165 104.92 mo(\001)sh186.165 104.792 mo(\001)sh186.165 104.648 mo(\001)sh186.165 104.483 mo(\001)sh186.165 104.293 mo(\001)sh186.165 104.071 mo(\001)sh186.165 103.807 mo(\001)sh186.165 103.485 mo(\001)sh186.165 103.081 mo(\001)sh186.165 102.554 mo(\001)sh186.165 101.833 mo(\001)sh186.165 100.774 mo(\001)sh186.165 99.0626 mo(\001)sh186.165 95.8346 mo(\001)sh186.165 87.5896 mo(\001)sh186.165 30.7336 mo(\001)sh190.843 109.153 mo(\001)sh190.843 109.133 mo(\001)sh190.843 109.112 mo(\001)sh190.843 109.09 mo(\001)sh190.843 109.068 mo(\001)sh190.843 109.045 mo(\001)sh190.843 109.021 mo(\001)sh190.843 108.997 mo(\001)sh190.843 108.971 mo(\001)sh190.843 108.945 mo(\001)sh190.843 108.917 mo(\001)sh190.843 108.889 mo(\001)sh190.843 108.859 mo(\001)sh190.843 108.828 mo(\001)sh190.843 108.796 mo(\001)sh190.843 108.762 mo(\001)sh190.843 108.727 mo(\001)sh190.843 108.69 mo(\001)sh190.843 108.652 mo(\001)sh190.843 108.611 mo(\001)sh190.843 108.569 mo(\001)sh190.843 108.524 mo(\001)sh190.843 108.476 mo(\001)sh190.843 108.426 mo(\001)sh190.843 108.372 mo(\001)sh190.843 108.316 mo(\001)sh190.843 108.255 mo(\001)sh190.843 108.19 mo(\001)sh190.843 108.12 mo(\001)sh190.843 108.045 mo(\001)sh190.843 107.963 mo(\001)sh190.843 107.874 mo(\001)sh190.843 107.777 mo(\001)sh190.843 107.67 mo(\001)sh190.843 107.551 mo(\001)sh190.843 107.418 mo(\001)sh190.843 107.269 mo(\001)sh190.843 107.098 mo(\001)sh190.843 106.902 mo(\001)sh190.843 106.672 mo(\001)sh190.843 106.398 mo(\001)sh190.843 106.064 mo(\001)sh190.843 105.646 mo(\001)sh190.843 105.101 mo(\001)sh190.843 104.354 mo(\001)sh190.843 103.258 mo(\001)sh190.843 101.486 mo(\001)sh190.843 98.1426 mo(\001)sh190.843 89.6056 mo(\001)sh190.843 30.7336 mo(\001)sh195.522 111.838 mo(\001)sh195.522 111.818 mo(\001)sh195.522 111.796 mo(\001)sh195.522 111.774 mo(\001)sh195.522 111.751 mo(\001)sh195.522 111.727 mo(\001)sh195.522 111.702 mo(\001)sh195.522 111.677 mo(\001)sh195.522 111.65 mo(\001)sh195.522 111.623 mo(\001)sh195.522 111.595 mo(\001)sh195.522 111.565 mo(\001)sh195.522 111.535 mo(\001)sh195.522 111.503 mo(\001)sh195.522 111.469 mo(\001)sh195.522 111.435 mo(\001)sh195.522 111.398 mo(\001)sh195.522 111.36 mo(\001)sh195.522 111.32 mo(\001)sh195.522 111.278 mo(\001)sh195.522 111.234 mo(\001)sh195.522 111.188 mo(\001)sh195.522 111.139 mo(\001)sh195.522 111.087 mo(\001)sh195.522 111.031 mo(\001)sh195.522 110.973 mo(\001)sh195.522 110.91 mo(\001)sh195.522 110.843 mo(\001)sh195.522 110.77 mo(\001)sh195.522 110.692 mo(\001)sh195.522 110.608 mo(\001)sh195.522 110.516 mo(\001)sh195.522 110.415 mo(\001)sh195.522 110.305 mo(\001)sh195.522 110.182 mo(\001)sh195.522 110.045 mo(\001)sh195.522 109.89 mo(\001)sh195.522 109.714 mo(\001)sh195.522 109.51 mo(\001)sh195.522 109.273 mo(\001)sh195.522 108.989 mo(\001)sh195.522 108.644 mo(\001)sh195.522 108.211 mo(\001)sh195.522 107.648 mo(\001)sh195.522 106.876 mo(\001)sh195.522 105.742 mo(\001)sh195.522 103.909 mo(\001)sh195.522 100.452 mo(\001)sh195.522 91.6217 mo(\001)sh195.522 30.7337 mo(\001)sh200.2 114.524 mo(\001)sh200.2 114.502 mo(\001)sh200.2 114.48 mo(\001)sh200.2 114.457 mo(\001)sh200.2 114.433 mo(\001)sh200.2 114.409 mo(\001)sh200.2 114.383 mo(\001)sh200.2 114.357 mo(\001)sh200.2 114.33 mo(\001)sh200.2 114.302 mo(\001)sh200.2 114.272 mo(\001)sh200.2 114.242 mo(\001)sh200.2 114.21 mo(\001)sh200.2 114.177 mo(\001)sh200.2 114.143 mo(\001)sh200.2 114.107 mo(\001)sh200.2 114.069 mo(\001)sh200.2 114.03 mo(\001)sh200.2 113.989 mo(\001)sh200.2 113.945 mo(\001)sh200.2 113.9 mo(\001)sh200.2 113.852 mo(\001)sh200.2 113.801 mo(\001)sh200.2 113.747 mo(\001)sh200.2 113.69 mo(\001)sh200.2 113.629 mo(\001)sh200.2 113.565 mo(\001)sh200.2 113.495 mo(\001)sh200.2 113.421 mo(\001)sh200.2 113.34 mo(\001)sh200.2 113.253 mo(\001)sh200.2 113.158 mo(\001)sh200.2 113.054 mo(\001)sh200.2 112.939 mo(\001)sh200.2 112.812 mo(\001)sh200.2 112.671 mo(\001)sh200.2 112.511 mo(\001)sh200.2 112.329 mo(\001)sh200.2 112.119 mo(\001)sh200.2 111.873 mo(\001)sh200.2 111.58 mo(\001)sh200.2 111.224 mo(\001)sh200.2 110.777 mo(\001)sh200.2 110.195 mo(\001)sh200.2 109.397 mo(\001)sh200.2 108.226 mo(\001)sh200.2 106.332 mo(\001)sh200.2 102.761 mo(\001)sh200.2 93.6386 mo(\001)sh200.2 30.7336 mo(\001)sh204.878 117.21 mo(\001)sh204.878 117.187 mo(\001)sh204.878 117.164 mo(\001)sh204.878 117.14 mo(\001)sh204.878 117.116 mo(\001)sh204.878 117.091 mo(\001)sh204.878 117.064 mo(\001)sh204.878 117.037 mo(\001)sh204.878 117.009 mo(\001)sh204.878 116.98 mo(\001)sh204.878 116.95 mo(\001)sh204.878 116.918 mo(\001)sh204.878 116.886 mo(\001)sh204.878 116.852 mo(\001)sh204.878 116.816 mo(\001)sh204.878 116.779 mo(\001)sh204.878 116.74 mo(\001)sh204.878 116.7 mo(\001)sh204.878 116.657 mo(\001)sh204.878 116.612 mo(\001)sh204.878 116.565 mo(\001)sh204.878 116.516 mo(\001)sh204.878 116.463 mo(\001)sh204.878 116.408 mo(\001)sh204.878 116.349 mo(\001)sh204.878 116.286 mo(\001)sh204.878 116.219 mo(\001)sh204.878 116.148 mo(\001)sh204.878 116.071 mo(\001)sh204.878 115.988 mo(\001)sh204.878 115.898 mo(\001)sh204.878 115.8 mo(\001)sh204.878 115.692 mo(\001)sh204.878 115.574 mo(\001)sh204.878 115.443 mo(\001)sh204.878 115.297 mo(\001)sh204.878 115.132 mo(\001)sh204.878 114.944 mo(\001)sh204.878 114.727 mo(\001)sh204.878 114.474 mo(\001)sh204.878 114.172 mo(\001)sh204.878 113.804 mo(\001)sh204.878 113.342 mo(\001)sh204.878 112.742 mo(\001)sh204.878 111.918 mo(\001)sh204.878 110.709 mo(\001)sh204.878 108.755 mo(\001)sh204.878 105.069 mo(\001)sh204.878 95.6547 mo(\001)sh204.878 30.7337 mo(\001)sh209.556 119.895 mo(\001)sh209.556 119.872 mo(\001)sh209.556 119.848 mo(\001)sh209.556 119.824 mo(\001)sh209.556 119.799 mo(\001)sh209.556 119.772 mo(\001)sh209.556 119.745 mo(\001)sh209.556 119.717 mo(\001)sh209.556 119.688 mo(\001)sh209.556 119.658 mo(\001)sh209.556 119.627 mo(\001)sh209.556 119.595 mo(\001)sh209.556 119.561 mo(\001)sh209.556 119.526 mo(\001)sh209.556 119.489 mo(\001)sh209.556 119.451 mo(\001)sh209.556 119.411 mo(\001)sh209.556 119.369 mo(\001)sh209.556 119.326 mo(\001)sh209.556 119.279 mo(\001)sh209.556 119.231 mo(\001)sh209.556 119.18 mo(\001)sh209.556 119.126 mo(\001)sh209.556 119.069 mo(\001)sh209.556 119.008 mo(\001)sh209.556 118.943 mo(\001)sh209.556 118.874 mo(\001)sh209.556 118.8 mo(\001)sh209.556 118.721 mo(\001)sh209.556 118.635 mo(\001)sh209.556 118.542 mo(\001)sh209.556 118.441 mo(\001)sh209.556 118.331 mo(\001)sh209.556 118.209 mo(\001)sh209.556 118.074 mo(\001)sh209.556 117.923 mo(\001)sh209.556 117.753 mo(\001)sh209.556 117.559 mo(\001)sh209.556 117.336 mo(\001)sh209.556 117.074 mo(\001)sh209.556 116.763 mo(\001)sh209.556 116.384 mo(\001)sh209.556 115.908 mo(\001)sh209.556 115.288 mo(\001)sh209.556 114.439 mo(\001)sh209.556 113.193 mo(\001)sh209.556 111.178 mo(\001)sh209.556 107.378 mo(\001)sh209.556 97.6707 mo(\001)sh209.556 30.7337 mo(\001)sh214.234 122.581 mo(\001)sh214.234 122.557 mo(\001)sh214.234 122.533 mo(\001)sh214.234 122.507 mo(\001)sh214.234 122.481 mo(\001)sh214.234 122.454 mo(\001)sh214.234 122.426 mo(\001)sh214.234 122.398 mo(\001)sh214.234 122.368 mo(\001)sh214.234 122.337 mo(\001)sh214.234 122.305 mo(\001)sh214.234 122.271 mo(\001)sh214.234 122.237 mo(\001)sh214.234 122.2 mo(\001)sh214.234 122.163 mo(\001)sh214.234 122.123 mo(\001)sh214.234 122.082 mo(\001)sh214.234 122.039 mo(\001)sh214.234 121.994 mo(\001)sh214.234 121.946 mo(\001)sh214.234 121.897 mo(\001)sh214.234 121.844 mo(\001)sh214.234 121.788 mo(\001)sh214.234 121.729 mo(\001)sh214.234 121.667 mo(\001)sh214.234 121.6 mo(\001)sh214.234 121.529 mo(\001)sh214.234 121.453 mo(\001)sh214.234 121.371 mo(\001)sh214.234 121.283 mo(\001)sh214.234 121.187 mo(\001)sh214.234 121.083 mo(\001)sh214.234 120.969 mo(\001)sh214.234 120.844 mo(\001)sh214.234 120.705 mo(\001)sh214.234 120.549 mo(\001)sh214.234 120.374 mo(\001)sh214.234 120.174 mo(\001)sh214.234 119.944 mo(\001)sh214.234 119.675 mo(\001)sh214.234 119.354 mo(\001)sh214.234 118.963 mo(\001)sh214.234 118.473 mo(\001)sh214.234 117.835 mo(\001)sh214.234 116.961 mo(\001)sh214.234 115.677 mo(\001)sh214.234 113.601 mo(\001)sh214.234 109.686 mo(\001)sh214.234 99.6867 mo(\001)sh214.234 30.7337 mo(\001)sh218.913 125.266 mo(\001)sh218.913 125.242 mo(\001)sh218.913 125.217 mo(\001)sh218.913 125.191 mo(\001)sh218.913 125.164 mo(\001)sh218.913 125.136 mo(\001)sh218.913 125.108 mo(\001)sh218.913 125.078 mo(\001)sh218.913 125.047 mo(\001)sh218.913 125.015 mo(\001)sh218.913 124.982 mo(\001)sh218.913 124.948 mo(\001)sh218.913 124.912 mo(\001)sh218.913 124.875 mo(\001)sh218.913 124.836 mo(\001)sh218.913 124.796 mo(\001)sh218.913 124.753 mo(\001)sh218.913 124.709 mo(\001)sh218.913 124.662 mo(\001)sh218.913 124.613 mo(\001)sh218.913 124.562 mo(\001)sh218.913 124.508 mo(\001)sh218.913 124.451 mo(\001)sh218.913 124.39 mo(\001)sh218.913 124.326 mo(\001)sh218.913 124.257 mo(\001)sh218.913 124.184 mo(\001)sh218.913 124.106 mo(\001)sh218.913 124.021 mo(\001)sh218.913 123.931 mo(\001)sh218.913 123.832 mo(\001)sh218.913 123.725 mo(\001)sh218.913 123.608 mo(\001)sh218.913 123.479 mo(\001)sh218.913 123.335 mo(\001)sh218.913 123.175 mo(\001)sh218.913 122.995 mo(\001)sh218.913 122.79 mo(\001)sh218.913 122.553 mo(\001)sh218.913 122.276 mo(\001)sh218.913 121.945 mo(\001)sh218.913 121.543 mo(\001)sh218.913 121.039 mo(\001)sh218.913 120.382 mo(\001)sh218.913 119.482 mo(\001)sh218.913 118.16 mo(\001)sh218.913 116.024 mo(\001)sh218.913 111.995 mo(\001)sh218.913 101.703 mo(\001)sh218.913 30.7337 mo(\001)sh223.591 127.952 mo(\001)sh223.591 127.927 mo(\001)sh223.591 127.901 mo(\001)sh223.591 127.874 mo(\001)sh223.591 127.847 mo(\001)sh223.591 127.818 mo(\001)sh223.591 127.789 mo(\001)sh223.591 127.758 mo(\001)sh223.591 127.727 mo(\001)sh223.591 127.694 mo(\001)sh223.591 127.66 mo(\001)sh223.591 127.624 mo(\001)sh223.591 127.588 mo(\001)sh223.591 127.549 mo(\001)sh223.591 127.509 mo(\001)sh223.591 127.468 mo(\001)sh223.591 127.424 mo(\001)sh223.591 127.379 mo(\001)sh223.591 127.331 mo(\001)sh223.591 127.281 mo(\001)sh223.591 127.228 mo(\001)sh223.591 127.172 mo(\001)sh223.591 127.113 mo(\001)sh223.591 127.051 mo(\001)sh223.591 126.984 mo(\001)sh223.591 126.914 mo(\001)sh223.591 126.839 mo(\001)sh223.591 126.758 mo(\001)sh223.591 126.672 mo(\001)sh223.591 126.578 mo(\001)sh223.591 126.477 mo(\001)sh223.591 126.367 mo(\001)sh223.591 126.246 mo(\001)sh223.591 126.113 mo(\001)sh223.591 125.966 mo(\001)sh223.591 125.802 mo(\001)sh223.591 125.616 mo(\001)sh223.591 125.405 mo(\001)sh223.591 125.161 mo(\001)sh223.591 124.876 mo(\001)sh223.591 124.537 mo(\001)sh223.591 124.123 mo(\001)sh223.591 123.604 mo(\001)sh223.591 122.929 mo(\001)sh223.591 122.003 mo(\001)sh223.591 120.644 mo(\001)sh223.591 118.447 mo(\001)sh223.591 114.303 mo(\001)sh223.591 103.719 mo(\001)sh223.591 30.7337 mo(\001)sh228.269 130.638 mo(\001)sh228.269 130.612 mo(\001)sh228.269 130.585 mo(\001)sh228.269 130.558 mo(\001)sh228.269 130.529 mo(\001)sh228.269 130.5 mo(\001)sh228.269 130.47 mo(\001)sh228.269 130.438 mo(\001)sh228.269 130.406 mo(\001)sh228.269 130.372 mo(\001)sh228.269 130.337 mo(\001)sh228.269 130.301 mo(\001)sh228.269 130.263 mo(\001)sh228.269 130.224 mo(\001)sh228.269 130.183 mo(\001)sh228.269 130.14 mo(\001)sh228.269 130.095 mo(\001)sh228.269 130.048 mo(\001)sh228.269 129.999 mo(\001)sh228.269 129.948 mo(\001)sh228.269 129.893 mo(\001)sh228.269 129.836 mo(\001)sh228.269 129.775 mo(\001)sh228.269 129.711 mo(\001)sh228.269 129.643 mo(\001)sh228.269 129.571 mo(\001)sh228.269 129.494 mo(\001)sh228.269 129.411 mo(\001)sh228.269 129.322 mo(\001)sh228.269 129.226 mo(\001)sh228.269 129.122 mo(\001)sh228.269 129.009 mo(\001)sh228.269 128.885 mo(\001)sh228.269 128.748 mo(\001)sh228.269 128.597 mo(\001)sh228.269 128.428 mo(\001)sh228.269 128.237 mo(\001)sh228.269 128.02 mo(\001)sh228.269 127.77 mo(\001)sh228.269 127.477 mo(\001)sh228.269 127.128 mo(\001)sh228.269 126.703 mo(\001)sh228.269 126.17 mo(\001)sh228.269 125.476 mo(\001)sh228.269 124.524 mo(\001)sh228.269 123.128 mo(\001)sh228.269 120.87 mo(\001)sh228.269 116.612 mo(\001)sh228.269 105.736 mo(\001)sh228.269 30.7337 mo(\001)sh232.947 133.323 mo(\001)sh232.947 133.297 mo(\001)sh232.947 133.269 mo(\001)sh232.947 133.241 mo(\001)sh232.947 133.212 mo(\001)sh232.947 133.182 mo(\001)sh232.947 133.151 mo(\001)sh232.947 133.119 mo(\001)sh232.947 133.085 mo(\001)sh232.947 133.051 mo(\001)sh232.947 133.015 mo(\001)sh232.947 132.977 mo(\001)sh232.947 132.939 mo(\001)sh232.947 132.898 mo(\001)sh232.947 132.856 mo(\001)sh232.947 132.812 mo(\001)sh232.947 132.766 mo(\001)sh232.947 132.718 mo(\001)sh232.947 132.668 mo(\001)sh232.947 132.615 mo(\001)sh232.947 132.559 mo(\001)sh232.947 132.5 mo(\001)sh232.947 132.438 mo(\001)sh232.947 132.372 mo(\001)sh232.947 132.302 mo(\001)sh232.947 132.228 mo(\001)sh232.947 132.148 mo(\001)sh232.947 132.063 mo(\001)sh232.947 131.972 mo(\001)sh232.947 131.873 mo(\001)sh232.947 131.767 mo(\001)sh232.947 131.65 mo(\001)sh232.947 131.523 mo(\001)sh232.947 131.383 mo(\001)sh232.947 131.228 mo(\001)sh232.947 131.054 mo(\001)sh232.947 130.858 mo(\001)sh232.947 130.635 mo(\001)sh232.947 130.378 mo(\001)sh232.947 130.077 mo(\001)sh232.947 129.719 mo(\001)sh232.947 129.283 mo(\001)sh232.947 128.735 mo(\001)sh232.947 128.023 mo(\001)sh232.947 127.046 mo(\001)sh232.947 125.612 mo(\001)sh232.947 123.293 mo(\001)sh232.947 118.92 mo(\001)sh232.947 107.752 mo(\001)sh232.947 30.7337 mo(\001)sh237.625 136.009 mo(\001)sh237.625 135.981 mo(\001)sh237.625 135.953 mo(\001)sh237.625 135.925 mo(\001)sh237.625 135.895 mo(\001)sh237.625 135.864 mo(\001)sh237.625 135.832 mo(\001)sh237.625 135.799 mo(\001)sh237.625 135.765 mo(\001)sh237.625 135.729 mo(\001)sh237.625 135.692 mo(\001)sh237.625 135.654 mo(\001)sh237.625 135.614 mo(\001)sh237.625 135.573 mo(\001)sh237.625 135.529 mo(\001)sh237.625 135.484 mo(\001)sh237.625 135.437 mo(\001)sh237.625 135.388 mo(\001)sh237.625 135.336 mo(\001)sh237.625 135.282 mo(\001)sh237.625 135.224 mo(\001)sh237.625 135.164 mo(\001)sh237.625 135.1 mo(\001)sh237.625 135.033 mo(\001)sh237.625 134.961 mo(\001)sh237.625 134.885 mo(\001)sh237.625 134.803 mo(\001)sh237.625 134.716 mo(\001)sh237.625 134.622 mo(\001)sh237.625 134.521 mo(\001)sh237.625 134.411 mo(\001)sh237.625 134.292 mo(\001)sh237.625 134.161 mo(\001)sh237.625 134.018 mo(\001)sh237.625 133.858 mo(\001)sh237.625 133.68 mo(\001)sh237.625 133.479 mo(\001)sh237.625 133.251 mo(\001)sh237.625 132.987 mo(\001)sh237.625 132.678 mo(\001)sh237.625 132.31 mo(\001)sh237.625 131.862 mo(\001)sh237.625 131.301 mo(\001)sh237.625 130.569 mo(\001)sh237.625 129.567 mo(\001)sh237.625 128.095 mo(\001)sh237.625 125.716 mo(\001)sh237.625 121.229 mo(\001)sh237.625 109.768 mo(\001)sh237.625 30.7337 mo(\001)sh242.304 138.694 mo(\001)sh242.304 138.666 mo(\001)sh242.304 138.638 mo(\001)sh242.304 138.608 mo(\001)sh242.304 138.577 mo(\001)sh242.304 138.546 mo(\001)sh242.304 138.513 mo(\001)sh242.304 138.479 mo(\001)sh242.304 138.444 mo(\001)sh242.304 138.408 mo(\001)sh242.304 138.37 mo(\001)sh242.304 138.33 mo(\001)sh242.304 138.29 mo(\001)sh242.304 138.247 mo(\001)sh242.304 138.203 mo(\001)sh242.304 138.157 mo(\001)sh242.304 138.108 mo(\001)sh242.304 138.058 mo(\001)sh242.304 138.004 mo(\001)sh242.304 137.949 mo(\001)sh242.304 137.89 mo(\001)sh242.304 137.828 mo(\001)sh242.304 137.763 mo(\001)sh242.304 137.693 mo(\001)sh242.304 137.62 mo(\001)sh242.304 137.542 mo(\001)sh242.304 137.458 mo(\001)sh242.304 137.369 mo(\001)sh242.304 137.272 mo(\001)sh242.304 137.169 mo(\001)sh242.304 137.056 mo(\001)sh242.304 136.934 mo(\001)sh242.304 136.8 mo(\001)sh242.304 136.652 mo(\001)sh242.304 136.489 mo(\001)sh242.304 136.306 mo(\001)sh242.304 136.1 mo(\001)sh242.304 135.866 mo(\001)sh242.304 135.595 mo(\001)sh242.304 135.279 mo(\001)sh242.304 134.902 mo(\001)sh242.304 134.442 mo(\001)sh242.304 133.866 mo(\001)sh242.304 133.116 mo(\001)sh242.304 132.088 mo(\001)sh242.304 130.579 mo(\001)sh242.304 128.139 mo(\001)sh242.304 123.537 mo(\001)sh242.304 111.784 mo(\001)sh242.304 30.7337 mo(\001)sh246.982 141.38 mo(\001)sh246.982 141.351 mo(\001)sh246.982 141.322 mo(\001)sh246.982 141.291 mo(\001)sh246.982 141.26 mo(\001)sh246.982 141.228 mo(\001)sh246.982 141.194 mo(\001)sh246.982 141.159 mo(\001)sh246.982 141.123 mo(\001)sh246.982 141.086 mo(\001)sh246.982 141.047 mo(\001)sh246.982 141.007 mo(\001)sh246.982 140.965 mo(\001)sh246.982 140.922 mo(\001)sh246.982 140.876 mo(\001)sh246.982 140.829 mo(\001)sh246.982 140.779 mo(\001)sh246.982 140.727 mo(\001)sh246.982 140.673 mo(\001)sh246.982 140.616 mo(\001)sh246.982 140.556 mo(\001)sh246.982 140.492 mo(\001)sh246.982 140.425 mo(\001)sh246.982 140.354 mo(\001)sh246.982 140.279 mo(\001)sh246.982 140.199 mo(\001)sh246.982 140.113 mo(\001)sh246.982 140.021 mo(\001)sh246.982 139.923 mo(\001)sh246.982 139.816 mo(\001)sh246.982 139.701 mo(\001)sh246.982 139.576 mo(\001)sh246.982 139.438 mo(\001)sh246.982 139.287 mo(\001)sh246.982 139.12 mo(\001)sh246.982 138.932 mo(\001)sh246.982 138.721 mo(\001)sh246.982 138.481 mo(\001)sh246.982 138.204 mo(\001)sh246.982 137.879 mo(\001)sh246.982 137.493 mo(\001)sh246.982 137.022 mo(\001)sh246.982 136.432 mo(\001)sh246.982 135.663 mo(\001)sh246.982 134.609 mo(\001)sh246.982 133.063 mo(\001)sh246.982 130.562 mo(\001)sh246.982 125.846 mo(\001)sh246.982 113.8 mo(\001)sh246.982 30.7337 mo(\001)sh251.66 144.065 mo(\001)sh251.66 144.036 mo(\001)sh251.66 144.006 mo(\001)sh251.66 143.975 mo(\001)sh251.66 143.943 mo(\001)sh251.66 143.909 mo(\001)sh251.66 143.875 mo(\001)sh251.66 143.839 mo(\001)sh251.66 143.803 mo(\001)sh251.66 143.764 mo(\001)sh251.66 143.725 mo(\001)sh251.66 143.684 mo(\001)sh251.66 143.641 mo(\001)sh251.66 143.596 mo(\001)sh251.66 143.55 mo(\001)sh251.66 143.501 mo(\001)sh251.66 143.45 mo(\001)sh251.66 143.397 mo(\001)sh251.66 143.341 mo(\001)sh251.66 143.283 mo(\001)sh251.66 143.221 mo(\001)sh251.66 143.156 mo(\001)sh251.66 143.087 mo(\001)sh251.66 143.015 mo(\001)sh251.66 142.938 mo(\001)sh251.66 142.855 mo(\001)sh251.66 142.768 mo(\001)sh251.66 142.674 mo(\001)sh251.66 142.573 mo(\001)sh251.66 142.464 mo(\001)sh251.66 142.346 mo(\001)sh251.66 142.217 mo(\001)sh251.66 142.077 mo(\001)sh251.66 141.922 mo(\001)sh251.66 141.75 mo(\001)sh251.66 141.559 mo(\001)sh251.66 141.342 mo(\001)sh251.66 141.096 mo(\001)sh251.66 140.812 mo(\001)sh251.66 140.48 mo(\001)sh251.66 140.084 mo(\001)sh251.66 139.602 mo(\001)sh251.66 138.997 mo(\001)sh251.66 138.21 mo(\001)sh251.66 137.131 mo(\001)sh251.66 135.546 mo(\001)sh251.66 132.985 mo(\001)sh251.66 128.154 mo(\001)sh251.66 115.816 mo(\001)sh251.66 30.7337 mo(\001)sh256.338 146.751 mo(\001)sh256.338 146.721 mo(\001)sh256.338 146.69 mo(\001)sh256.338 146.658 mo(\001)sh256.338 146.625 mo(\001)sh256.338 146.591 mo(\001)sh256.338 146.556 mo(\001)sh256.338 146.52 mo(\001)sh256.338 146.482 mo(\001)sh256.338 146.443 mo(\001)sh256.338 146.402 mo(\001)sh256.338 146.36 mo(\001)sh256.338 146.316 mo(\001)sh256.338 146.271 mo(\001)sh256.338 146.223 mo(\001)sh256.338 146.173 mo(\001)sh256.338 146.121 mo(\001)sh256.338 146.067 mo(\001)sh256.338 146.01 mo(\001)sh256.338 145.95 mo(\001)sh256.338 145.887 mo(\001)sh256.338 145.82 mo(\001)sh256.338 145.75 mo(\001)sh256.338 145.675 mo(\001)sh256.338 145.596 mo(\001)sh256.338 145.512 mo(\001)sh256.338 145.423 mo(\001)sh256.338 145.326 mo(\001)sh256.338 145.223 mo(\001)sh256.338 145.112 mo(\001)sh256.338 144.991 mo(\001)sh256.338 144.859 mo(\001)sh256.338 144.715 mo(\001)sh256.338 144.557 mo(\001)sh256.338 144.381 mo(\001)sh256.338 144.185 mo(\001)sh256.338 143.963 mo(\001)sh256.338 143.711 mo(\001)sh256.338 143.421 mo(\001)sh256.338 143.08 mo(\001)sh256.338 142.675 mo(\001)sh256.338 142.182 mo(\001)sh256.338 141.563 mo(\001)sh256.338 140.757 mo(\001)sh256.338 139.652 mo(\001)sh256.338 138.03 mo(\001)sh256.338 135.408 mo(\001)sh256.338 130.463 mo(\001)sh256.338 117.833 mo(\001)sh256.338 30.7337 mo(\001)sh261.016 149.437 mo(\001)sh261.016 149.406 mo(\001)sh261.016 149.374 mo(\001)sh261.016 149.342 mo(\001)sh261.016 149.308 mo(\001)sh261.016 149.273 mo(\001)sh261.016 149.237 mo(\001)sh261.016 149.2 mo(\001)sh261.016 149.161 mo(\001)sh261.016 149.121 mo(\001)sh261.016 149.08 mo(\001)sh261.016 149.037 mo(\001)sh261.016 148.992 mo(\001)sh261.016 148.945 mo(\001)sh261.016 148.896 mo(\001)sh261.016 148.845 mo(\001)sh261.016 148.792 mo(\001)sh261.016 148.736 mo(\001)sh261.016 148.678 mo(\001)sh261.016 148.617 mo(\001)sh261.016 148.552 mo(\001)sh261.016 148.484 mo(\001)sh261.016 148.412 mo(\001)sh261.016 148.336 mo(\001)sh261.016 148.255 mo(\001)sh261.016 148.169 mo(\001)sh261.016 148.077 mo(\001)sh261.016 147.979 mo(\001)sh261.016 147.873 mo(\001)sh261.016 147.759 mo(\001)sh261.016 147.636 mo(\001)sh261.016 147.501 mo(\001)sh261.016 147.354 mo(\001)sh261.016 147.192 mo(\001)sh261.016 147.012 mo(\001)sh261.016 146.811 mo(\001)sh261.016 146.585 mo(\001)sh261.016 146.327 mo(\001)sh261.016 146.029 mo(\001)sh261.016 145.681 mo(\001)sh261.016 145.266 mo(\001)sh261.016 144.761 mo(\001)sh261.016 144.128 mo(\001)sh261.016 143.303 mo(\001)sh261.016 142.173 mo(\001)sh261.016 140.514 mo(\001)sh261.016 137.831 mo(\001)sh261.016 132.772 mo(\001)sh261.016 119.849 mo(\001)sh261.016 30.7337 mo(\001)sh265.695 152.122 mo(\001)sh265.695 152.091 mo(\001)sh265.695 152.058 mo(\001)sh265.695 152.025 mo(\001)sh265.695 151.991 mo(\001)sh265.695 151.955 mo(\001)sh265.695 151.918 mo(\001)sh265.695 151.88 mo(\001)sh265.695 151.841 mo(\001)sh265.695 151.8 mo(\001)sh265.695 151.757 mo(\001)sh265.695 151.713 mo(\001)sh265.695 151.667 mo(\001)sh265.695 151.619 mo(\001)sh265.695 151.57 mo(\001)sh265.695 151.518 mo(\001)sh265.695 151.463 mo(\001)sh265.695 151.406 mo(\001)sh265.695 151.347 mo(\001)sh265.695 151.284 mo(\001)sh265.695 151.218 mo(\001)sh265.695 151.148 mo(\001)sh265.695 151.075 mo(\001)sh265.695 150.997 mo(\001)sh265.695 150.914 mo(\001)sh265.695 150.826 mo(\001)sh265.695 150.732 mo(\001)sh265.695 150.632 mo(\001)sh265.695 150.523 mo(\001)sh265.695 150.407 mo(\001)sh265.695 150.28 mo(\001)sh265.695 150.143 mo(\001)sh265.695 149.992 mo(\001)sh265.695 149.826 mo(\001)sh265.695 149.643 mo(\001)sh265.695 149.437 mo(\001)sh265.695 149.206 mo(\001)sh265.695 148.942 mo(\001)sh265.695 148.638 mo(\001)sh265.695 148.282 mo(\001)sh265.695 147.858 mo(\001)sh265.695 147.341 mo(\001)sh265.695 146.694 mo(\001)sh265.695 145.85 mo(\001)sh265.695 144.694 mo(\001)sh265.695 142.997 mo(\001)sh265.695 140.254 mo(\001)sh265.695 135.08 mo(\001)sh265.695 121.865 mo(\001)sh265.695 30.7337 mo(\001)sh270.373 154.808 mo(\001)sh270.373 154.776 mo(\001)sh270.373 154.743 mo(\001)sh270.373 154.709 mo(\001)sh270.373 154.673 mo(\001)sh270.373 154.637 mo(\001)sh270.373 154.599 mo(\001)sh270.373 154.56 mo(\001)sh270.373 154.52 mo(\001)sh270.373 154.478 mo(\001)sh270.373 154.435 mo(\001)sh270.373 154.39 mo(\001)sh270.373 154.343 mo(\001)sh270.373 154.294 mo(\001)sh270.373 154.243 mo(\001)sh270.373 154.19 mo(\001)sh270.373 154.134 mo(\001)sh270.373 154.076 mo(\001)sh270.373 154.015 mo(\001)sh270.373 153.951 mo(\001)sh270.373 153.883 mo(\001)sh270.373 153.812 mo(\001)sh270.373 153.737 mo(\001)sh270.373 153.657 mo(\001)sh270.373 153.573 mo(\001)sh270.373 153.483 mo(\001)sh270.373 153.387 mo(\001)sh270.373 153.284 mo(\001)sh270.373 153.174 mo(\001)sh270.373 153.054 mo(\001)sh270.373 152.925 mo(\001)sh270.373 152.785 mo(\001)sh270.373 152.631 mo(\001)sh270.373 152.461 mo(\001)sh270.373 152.273 mo(\001)sh270.373 152.063 mo(\001)sh270.373 151.827 mo(\001)sh270.373 151.557 mo(\001)sh270.373 151.246 mo(\001)sh270.373 150.882 mo(\001)sh270.373 150.449 mo(\001)sh270.373 149.921 mo(\001)sh270.373 149.259 mo(\001)sh270.373 148.397 mo(\001)sh270.373 147.216 mo(\001)sh270.373 145.481 mo(\001)sh270.373 142.677 mo(\001)sh270.373 137.389 mo(\001)sh270.373 123.881 mo(\001)sh270.373 30.7337 mo(\001)sh275.051 157.493 mo(\001)sh275.051 157.461 mo(\001)sh275.051 157.427 mo(\001)sh275.051 157.392 mo(\001)sh275.051 157.356 mo(\001)sh275.051 157.319 mo(\001)sh275.051 157.28 mo(\001)sh275.051 157.241 mo(\001)sh275.051 157.199 mo(\001)sh275.051 157.157 mo(\001)sh275.051 157.112 mo(\001)sh275.051 157.066 mo(\001)sh275.051 157.018 mo(\001)sh275.051 156.968 mo(\001)sh275.051 156.916 mo(\001)sh275.051 156.862 mo(\001)sh275.051 156.805 mo(\001)sh275.051 156.746 mo(\001)sh275.051 156.683 mo(\001)sh275.051 156.618 mo(\001)sh275.051 156.549 mo(\001)sh275.051 156.476 mo(\001)sh275.051 156.399 mo(\001)sh275.051 156.318 mo(\001)sh275.051 156.232 mo(\001)sh275.051 156.14 mo(\001)sh275.051 156.042 mo(\001)sh275.051 155.937 mo(\001)sh275.051 155.824 mo(\001)sh275.051 155.702 mo(\001)sh275.051 155.57 mo(\001)sh275.051 155.426 mo(\001)sh275.051 155.269 mo(\001)sh275.051 155.096 mo(\001)sh275.051 154.904 mo(\001)sh275.051 154.689 mo(\001)sh275.051 154.448 mo(\001)sh275.051 154.172 mo(\001)sh275.051 153.855 mo(\001)sh275.051 153.483 mo(\001)sh275.051 153.04 mo(\001)sh275.051 152.501 mo(\001)sh275.051 151.825 mo(\001)sh275.051 150.944 mo(\001)sh275.051 149.737 mo(\001)sh275.051 147.965 mo(\001)sh275.051 145.1 mo(\001)sh275.051 139.697 mo(\001)sh275.051 125.897 mo(\001)sh275.051 30.7337 mo(\001)sh279.729 160.179 mo(\001)sh279.729 160.145 mo(\001)sh279.729 160.111 mo(\001)sh279.729 160.075 mo(\001)sh279.729 160.039 mo(\001)sh279.729 160.001 mo(\001)sh279.729 159.961 mo(\001)sh279.729 159.921 mo(\001)sh279.729 159.879 mo(\001)sh279.729 159.835 mo(\001)sh279.729 159.79 mo(\001)sh279.729 159.743 mo(\001)sh279.729 159.694 mo(\001)sh279.729 159.643 mo(\001)sh279.729 159.59 mo(\001)sh279.729 159.534 mo(\001)sh279.729 159.476 mo(\001)sh279.729 159.415 mo(\001)sh279.729 159.352 mo(\001)sh279.729 159.285 mo(\001)sh279.729 159.214 mo(\001)sh279.729 159.14 mo(\001)sh279.729 159.062 mo(\001)sh279.729 158.979 mo(\001)sh279.729 158.891 mo(\001)sh279.729 158.797 mo(\001)sh279.729 158.697 mo(\001)sh279.729 158.589 mo(\001)sh279.729 158.474 mo(\001)sh279.729 158.35 mo(\001)sh279.729 158.215 mo(\001)sh279.729 158.068 mo(\001)sh279.729 157.908 mo(\001)sh279.729 157.731 mo(\001)sh279.729 157.535 mo(\001)sh279.729 157.316 mo(\001)sh279.729 157.069 mo(\001)sh279.729 156.787 mo(\001)sh279.729 156.463 mo(\001)sh279.729 156.084 mo(\001)sh279.729 155.631 mo(\001)sh279.729 155.081 mo(\001)sh279.729 154.39 mo(\001)sh279.729 153.491 mo(\001)sh279.729 152.258 mo(\001)sh279.729 150.449 mo(\001)sh279.729 147.523 mo(\001)sh279.729 142.006 mo(\001)sh279.729 127.913 mo(\001)sh279.729 30.7337 mo(\001)sh284.407 162.864 mo(\001)sh284.407 162.83 mo(\001)sh284.407 162.795 mo(\001)sh284.407 162.759 mo(\001)sh284.407 162.721 mo(\001)sh284.407 162.683 mo(\001)sh284.407 162.642 mo(\001)sh284.407 162.601 mo(\001)sh284.407 162.558 mo(\001)sh284.407 162.514 mo(\001)sh284.407 162.467 mo(\001)sh284.407 162.419 mo(\001)sh284.407 162.369 mo(\001)sh284.407 162.317 mo(\001)sh284.407 162.263 mo(\001)sh284.407 162.206 mo(\001)sh284.407 162.147 mo(\001)sh284.407 162.085 mo(\001)sh284.407 162.02 mo(\001)sh284.407 161.952 mo(\001)sh284.407 161.88 mo(\001)sh284.407 161.804 mo(\001)sh284.407 161.724 mo(\001)sh284.407 161.64 mo(\001)sh284.407 161.55 mo(\001)sh284.407 161.454 mo(\001)sh284.407 161.351 mo(\001)sh284.407 161.242 mo(\001)sh284.407 161.124 mo(\001)sh284.407 160.997 mo(\001)sh284.407 160.86 mo(\001)sh284.407 160.71 mo(\001)sh284.407 160.546 mo(\001)sh284.407 160.366 mo(\001)sh284.407 160.165 mo(\001)sh284.407 159.942 mo(\001)sh284.407 159.69 mo(\001)sh284.407 159.403 mo(\001)sh284.407 159.072 mo(\001)sh284.407 158.684 mo(\001)sh284.407 158.223 mo(\001)sh284.407 157.66 mo(\001)sh284.407 156.956 mo(\001)sh284.407 156.038 mo(\001)sh284.407 154.779 mo(\001)sh284.407 152.932 mo(\001)sh284.407 149.946 mo(\001)sh284.407 144.314 mo(\001)sh284.407 129.93 mo(\001)sh284.407 30.7337 mo(\001)sh289.086 165.55 mo(\001)sh289.086 165.515 mo(\001)sh289.086 165.479 mo(\001)sh289.086 165.442 mo(\001)sh289.086 165.404 mo(\001)sh289.086 165.364 mo(\001)sh289.086 165.324 mo(\001)sh289.086 165.281 mo(\001)sh289.086 165.237 mo(\001)sh289.086 165.192 mo(\001)sh289.086 165.145 mo(\001)sh289.086 165.096 mo(\001)sh289.086 165.045 mo(\001)sh289.086 164.992 mo(\001)sh289.086 164.936 mo(\001)sh289.086 164.879 mo(\001)sh289.086 164.818 mo(\001)sh289.086 164.755 mo(\001)sh289.086 164.689 mo(\001)sh289.086 164.619 mo(\001)sh289.086 164.546 mo(\001)sh289.086 164.468 mo(\001)sh289.086 164.387 mo(\001)sh289.086 164.3 mo(\001)sh289.086 164.208 mo(\001)sh289.086 164.111 mo(\001)sh289.086 164.006 mo(\001)sh289.086 163.895 mo(\001)sh289.086 163.774 mo(\001)sh289.086 163.645 mo(\001)sh289.086 163.505 mo(\001)sh289.086 163.352 mo(\001)sh289.086 163.184 mo(\001)sh289.086 163 mo(\001)sh289.086 162.796 mo(\001)sh289.086 162.568 mo(\001)sh289.086 162.311 mo(\001)sh289.086 162.018 mo(\001)sh289.086 161.68 mo(\001)sh289.086 161.285 mo(\001)sh289.086 160.814 mo(\001)sh289.086 160.24 mo(\001)sh289.086 159.521 mo(\001)sh289.086 158.584 mo(\001)sh289.086 157.301 mo(\001)sh289.086 155.416 mo(\001)sh289.086 152.369 mo(\001)sh289.086 146.623 mo(\001)sh289.086 131.946 mo(\001)sh289.086 30.7337 mo(\001)sh293.764 168.236 mo(\001)sh293.764 168.2 mo(\001)sh293.764 168.163 mo(\001)sh293.764 168.126 mo(\001)sh293.764 168.087 mo(\001)sh293.764 168.046 mo(\001)sh293.764 168.005 mo(\001)sh293.764 167.961 mo(\001)sh293.764 167.917 mo(\001)sh293.764 167.87 mo(\001)sh293.764 167.822 mo(\001)sh293.764 167.772 mo(\001)sh293.764 167.72 mo(\001)sh293.764 167.666 mo(\001)sh293.764 167.61 mo(\001)sh293.764 167.551 mo(\001)sh293.764 167.489 mo(\001)sh293.764 167.425 mo(\001)sh293.764 167.357 mo(\001)sh293.764 167.286 mo(\001)sh293.764 167.211 mo(\001)sh293.764 167.132 mo(\001)sh293.764 167.049 mo(\001)sh293.764 166.961 mo(\001)sh293.764 166.867 mo(\001)sh293.764 166.768 mo(\001)sh293.764 166.661 mo(\001)sh293.764 166.547 mo(\001)sh293.764 166.425 mo(\001)sh293.764 166.293 mo(\001)sh293.764 166.149 mo(\001)sh293.764 165.994 mo(\001)sh293.764 165.823 mo(\001)sh293.764 165.635 mo(\001)sh293.764 165.427 mo(\001)sh293.764 165.194 mo(\001)sh293.764 164.932 mo(\001)sh293.764 164.633 mo(\001)sh293.764 164.289 mo(\001)sh293.764 163.885 mo(\001)sh293.764 163.405 mo(\001)sh293.764 162.82 mo(\001)sh293.764 162.087 mo(\001)sh293.764 161.131 mo(\001)sh293.764 159.822 mo(\001)sh293.764 157.9 mo(\001)sh293.764 154.792 mo(\001)sh293.764 148.931 mo(\001)sh293.764 133.962 mo(\001)sh293.764 30.7337 mo(\001)sh298.442 170.921 mo(\001)sh298.442 170.885 mo(\001)sh298.442 170.848 mo(\001)sh298.442 170.809 mo(\001)sh298.442 170.769 mo(\001)sh298.442 170.728 mo(\001)sh298.442 170.686 mo(\001)sh298.442 170.642 mo(\001)sh298.442 170.596 mo(\001)sh298.442 170.549 mo(\001)sh298.442 170.5 mo(\001)sh298.442 170.449 mo(\001)sh298.442 170.396 mo(\001)sh298.442 170.341 mo(\001)sh298.442 170.283 mo(\001)sh298.442 170.223 mo(\001)sh298.442 170.16 mo(\001)sh298.442 170.094 mo(\001)sh298.442 170.025 mo(\001)sh298.442 169.953 mo(\001)sh298.442 169.877 mo(\001)sh298.442 169.796 mo(\001)sh298.442 169.711 mo(\001)sh298.442 169.622 mo(\001)sh298.442 169.526 mo(\001)sh298.442 169.424 mo(\001)sh298.442 169.316 mo(\001)sh298.442 169.2 mo(\001)sh298.442 169.075 mo(\001)sh298.442 168.94 mo(\001)sh298.442 168.794 mo(\001)sh298.442 168.635 mo(\001)sh298.442 168.461 mo(\001)sh298.442 168.27 mo(\001)sh298.442 168.058 mo(\001)sh298.442 167.82 mo(\001)sh298.442 167.553 mo(\001)sh298.442 167.248 mo(\001)sh298.442 166.897 mo(\001)sh298.442 166.486 mo(\001)sh298.442 165.996 mo(\001)sh298.442 165.4 mo(\001)sh298.442 164.652 mo(\001)sh298.442 163.678 mo(\001)sh298.442 162.343 mo(\001)sh298.442 160.383 mo(\001)sh298.442 157.215 mo(\001)sh298.442 151.24 mo(\001)sh298.442 135.978 mo(\001)sh298.442 30.7337 mo(\001)sh303.12 173.607 mo(\001)sh303.12 173.57 mo(\001)sh303.12 173.532 mo(\001)sh303.12 173.493 mo(\001)sh303.12 173.452 mo(\001)sh303.12 173.41 mo(\001)sh303.12 173.367 mo(\001)sh303.12 173.322 mo(\001)sh303.12 173.275 mo(\001)sh303.12 173.227 mo(\001)sh303.12 173.177 mo(\001)sh303.12 173.125 mo(\001)sh303.12 173.071 mo(\001)sh303.12 173.015 mo(\001)sh303.12 172.956 mo(\001)sh303.12 172.895 mo(\001)sh303.12 172.831 mo(\001)sh303.12 172.764 mo(\001)sh303.12 172.694 mo(\001)sh303.12 172.62 mo(\001)sh303.12 172.542 mo(\001)sh303.12 172.46 mo(\001)sh303.12 172.374 mo(\001)sh303.12 172.282 mo(\001)sh303.12 172.185 mo(\001)sh303.12 172.081 mo(\001)sh303.12 171.971 mo(\001)sh303.12 171.852 mo(\001)sh303.12 171.725 mo(\001)sh303.12 171.588 mo(\001)sh303.12 171.439 mo(\001)sh303.12 171.277 mo(\001)sh303.12 171.1 mo(\001)sh303.12 170.905 mo(\001)sh303.12 170.688 mo(\001)sh303.12 170.447 mo(\001)sh303.12 170.174 mo(\001)sh303.12 169.864 mo(\001)sh303.12 169.506 mo(\001)sh303.12 169.087 mo(\001)sh303.12 168.587 mo(\001)sh303.12 167.98 mo(\001)sh303.12 167.217 mo(\001)sh303.12 166.225 mo(\001)sh303.12 164.864 mo(\001)sh303.12 162.867 mo(\001)sh303.12 159.638 mo(\001)sh303.12 153.548 mo(\001)sh303.12 137.994 mo(\001)sh303.12 30.7337 mo(\001)sh307.798 176.292 mo(\001)sh307.798 176.255 mo(\001)sh307.798 176.216 mo(\001)sh307.798 176.176 mo(\001)sh307.798 176.135 mo(\001)sh307.798 176.092 mo(\001)sh307.798 176.048 mo(\001)sh307.798 176.002 mo(\001)sh307.798 175.955 mo(\001)sh307.798 175.906 mo(\001)sh307.798 175.855 mo(\001)sh307.798 175.802 mo(\001)sh307.798 175.747 mo(\001)sh307.798 175.69 mo(\001)sh307.798 175.63 mo(\001)sh307.798 175.567 mo(\001)sh307.798 175.502 mo(\001)sh307.798 175.434 mo(\001)sh307.798 175.362 mo(\001)sh307.798 175.287 mo(\001)sh307.798 175.208 mo(\001)sh307.798 175.124 mo(\001)sh307.798 175.036 mo(\001)sh307.798 174.943 mo(\001)sh307.798 174.844 mo(\001)sh307.798 174.738 mo(\001)sh307.798 174.626 mo(\001)sh307.798 174.505 mo(\001)sh307.798 174.375 mo(\001)sh307.798 174.235 mo(\001)sh307.798 174.084 mo(\001)sh307.798 173.919 mo(\001)sh307.798 173.738 mo(\001)sh307.798 173.539 mo(\001)sh307.798 173.319 mo(\001)sh307.798 173.073 mo(\001)sh307.798 172.795 mo(\001)sh307.798 172.479 mo(\001)sh307.798 172.114 mo(\001)sh307.798 171.687 mo(\001)sh307.798 171.179 mo(\001)sh307.798 170.559 mo(\001)sh307.798 169.783 mo(\001)sh307.798 168.772 mo(\001)sh307.798 167.385 mo(\001)sh307.798 165.351 mo(\001)sh307.798 162.061 mo(\001)sh307.798 155.857 mo(\001)sh307.798 140.011 mo(\001)sh307.798 30.7337 mo(\001)sh312.477 178.978 mo(\001)sh312.477 178.94 mo(\001)sh312.477 178.9 mo(\001)sh312.477 178.859 mo(\001)sh312.477 178.817 mo(\001)sh312.477 178.774 mo(\001)sh312.477 178.729 mo(\001)sh312.477 178.682 mo(\001)sh312.477 178.634 mo(\001)sh312.477 178.584 mo(\001)sh312.477 178.532 mo(\001)sh312.477 178.478 mo(\001)sh312.477 178.422 mo(\001)sh312.477 178.364 mo(\001)sh312.477 178.303 mo(\001)sh312.477 178.24 mo(\001)sh312.477 178.173 mo(\001)sh312.477 178.104 mo(\001)sh312.477 178.031 mo(\001)sh312.477 177.954 mo(\001)sh312.477 177.873 mo(\001)sh312.477 177.788 mo(\001)sh312.477 177.699 mo(\001)sh312.477 177.604 mo(\001)sh312.477 177.503 mo(\001)sh312.477 177.395 mo(\001)sh312.477 177.28 mo(\001)sh312.477 177.158 mo(\001)sh312.477 177.026 mo(\001)sh312.477 176.883 mo(\001)sh312.477 176.729 mo(\001)sh312.477 176.561 mo(\001)sh312.477 176.377 mo(\001)sh312.477 176.174 mo(\001)sh312.477 175.95 mo(\001)sh312.477 175.699 mo(\001)sh312.477 175.416 mo(\001)sh312.477 175.094 mo(\001)sh312.477 174.723 mo(\001)sh312.477 174.288 mo(\001)sh312.477 173.77 mo(\001)sh312.477 173.139 mo(\001)sh312.477 172.348 mo(\001)sh312.477 171.318 mo(\001)sh312.477 169.907 mo(\001)sh312.477 167.834 mo(\001)sh312.477 164.484 mo(\001)sh312.477 158.165 mo(\001)sh312.477 142.027 mo(\001)sh312.477 30.7337 mo(\001)sh317.155 181.664 mo(\001)sh317.155 181.625 mo(\001)sh317.155 181.584 mo(\001)sh317.155 181.543 mo(\001)sh317.155 181.5 mo(\001)sh317.155 181.456 mo(\001)sh317.155 181.41 mo(\001)sh317.155 181.363 mo(\001)sh317.155 181.313 mo(\001)sh317.155 181.263 mo(\001)sh317.155 181.21 mo(\001)sh317.155 181.155 mo(\001)sh317.155 181.098 mo(\001)sh317.155 181.038 mo(\001)sh317.155 180.976 mo(\001)sh317.155 180.912 mo(\001)sh317.155 180.844 mo(\001)sh317.155 180.773 mo(\001)sh317.155 180.699 mo(\001)sh317.155 180.621 mo(\001)sh317.155 180.539 mo(\001)sh317.155 180.453 mo(\001)sh317.155 180.361 mo(\001)sh317.155 180.264 mo(\001)sh317.155 180.161 mo(\001)sh317.155 180.052 mo(\001)sh317.155 179.935 mo(\001)sh317.155 179.81 mo(\001)sh317.155 179.676 mo(\001)sh317.155 179.531 mo(\001)sh317.155 179.374 mo(\001)sh317.155 179.202 mo(\001)sh317.155 179.015 mo(\001)sh317.155 178.809 mo(\001)sh317.155 178.58 mo(\001)sh317.155 178.325 mo(\001)sh317.155 178.037 mo(\001)sh317.155 177.709 mo(\001)sh317.155 177.331 mo(\001)sh317.155 176.888 mo(\001)sh317.155 176.361 mo(\001)sh317.155 175.719 mo(\001)sh317.155 174.914 mo(\001)sh317.155 173.865 mo(\001)sh317.155 172.428 mo(\001)sh317.155 170.318 mo(\001)sh317.155 166.907 mo(\001)sh317.155 160.474 mo(\001)sh317.155 144.043 mo(\001)sh317.155 30.7337 mo(\001)sh321.833 184.349 mo(\001)sh321.833 184.309 mo(\001)sh321.833 184.268 mo(\001)sh321.833 184.226 mo(\001)sh321.833 184.183 mo(\001)sh321.833 184.138 mo(\001)sh321.833 184.091 mo(\001)sh321.833 184.043 mo(\001)sh321.833 183.993 mo(\001)sh321.833 183.941 mo(\001)sh321.833 183.887 mo(\001)sh321.833 183.831 mo(\001)sh321.833 183.773 mo(\001)sh321.833 183.713 mo(\001)sh321.833 183.65 mo(\001)sh321.833 183.584 mo(\001)sh321.833 183.515 mo(\001)sh321.833 183.443 mo(\001)sh321.833 183.368 mo(\001)sh321.833 183.288 mo(\001)sh321.833 183.205 mo(\001)sh321.833 183.117 mo(\001)sh321.833 183.023 mo(\001)sh321.833 182.925 mo(\001)sh321.833 182.82 mo(\001)sh321.833 182.709 mo(\001)sh321.833 182.59 mo(\001)sh321.833 182.463 mo(\001)sh321.833 182.326 mo(\001)sh321.833 182.178 mo(\001)sh321.833 182.018 mo(\001)sh321.833 181.844 mo(\001)sh321.833 181.654 mo(\001)sh321.833 181.444 mo(\001)sh321.833 181.211 mo(\001)sh321.833 180.951 mo(\001)sh321.833 180.658 mo(\001)sh321.833 180.324 mo(\001)sh321.833 179.939 mo(\001)sh321.833 179.489 mo(\001)sh321.833 178.952 mo(\001)sh321.833 178.299 mo(\001)sh321.833 177.479 mo(\001)sh321.833 176.412 mo(\001)sh321.833 174.949 mo(\001)sh321.833 172.802 mo(\001)sh321.833 169.33 mo(\001)sh321.833 162.783 mo(\001)sh321.833 146.059 mo(\001)sh321.833 30.7337 mo(\001)sh326.511 187.035 mo(\001)sh326.511 186.994 mo(\001)sh326.511 186.953 mo(\001)sh326.511 186.91 mo(\001)sh326.511 186.865 mo(\001)sh326.511 186.819 mo(\001)sh326.511 186.772 mo(\001)sh326.511 186.723 mo(\001)sh326.511 186.672 mo(\001)sh326.511 186.62 mo(\001)sh326.511 186.565 mo(\001)sh326.511 186.508 mo(\001)sh326.511 186.449 mo(\001)sh326.511 186.387 mo(\001)sh326.511 186.323 mo(\001)sh326.511 186.256 mo(\001)sh326.511 186.186 mo(\001)sh326.511 186.113 mo(\001)sh326.511 186.036 mo(\001)sh326.511 185.955 mo(\001)sh326.511 185.87 mo(\001)sh326.511 185.781 mo(\001)sh326.511 185.686 mo(\001)sh326.511 185.586 mo(\001)sh326.511 185.479 mo(\001)sh326.511 185.366 mo(\001)sh326.511 185.245 mo(\001)sh326.511 185.115 mo(\001)sh326.511 184.976 mo(\001)sh326.511 184.826 mo(\001)sh326.511 184.663 mo(\001)sh326.511 184.486 mo(\001)sh326.511 184.292 mo(\001)sh326.511 184.079 mo(\001)sh326.511 183.842 mo(\001)sh326.511 183.577 mo(\001)sh326.511 183.279 mo(\001)sh326.511 182.94 mo(\001)sh326.511 182.548 mo(\001)sh326.511 182.09 mo(\001)sh326.511 181.544 mo(\001)sh326.511 180.879 mo(\001)sh326.511 180.045 mo(\001)sh326.511 178.959 mo(\001)sh326.511 177.47 mo(\001)sh326.511 175.286 mo(\001)sh326.511 171.753 mo(\001)sh326.511 165.091 mo(\001)sh326.511 148.075 mo(\001)sh326.511 30.7337 mo(\001)sh331.189 189.72 mo(\001)sh331.189 189.679 mo(\001)sh331.189 189.637 mo(\001)sh331.189 189.593 mo(\001)sh331.189 189.548 mo(\001)sh331.189 189.501 mo(\001)sh331.189 189.453 mo(\001)sh331.189 189.403 mo(\001)sh331.189 189.352 mo(\001)sh331.189 189.298 mo(\001)sh331.189 189.242 mo(\001)sh331.189 189.185 mo(\001)sh331.189 189.124 mo(\001)sh331.189 189.062 mo(\001)sh331.189 188.997 mo(\001)sh331.189 188.928 mo(\001)sh331.189 188.857 mo(\001)sh331.189 188.783 mo(\001)sh331.189 188.704 mo(\001)sh331.189 188.622 mo(\001)sh331.189 188.536 mo(\001)sh331.189 188.445 mo(\001)sh331.189 188.348 mo(\001)sh331.189 188.246 mo(\001)sh331.189 188.138 mo(\001)sh331.189 188.023 mo(\001)sh331.189 187.9 mo(\001)sh331.189 187.768 mo(\001)sh331.189 187.626 mo(\001)sh331.189 187.474 mo(\001)sh331.189 187.308 mo(\001)sh331.189 187.128 mo(\001)sh331.189 186.931 mo(\001)sh331.189 186.713 mo(\001)sh331.189 186.473 mo(\001)sh331.189 186.204 mo(\001)sh331.189 185.9 mo(\001)sh331.189 185.555 mo(\001)sh331.189 185.156 mo(\001)sh331.189 184.69 mo(\001)sh331.189 184.135 mo(\001)sh331.189 183.458 mo(\001)sh331.189 182.61 mo(\001)sh331.189 181.506 mo(\001)sh331.189 179.992 mo(\001)sh331.189 177.769 mo(\001)sh331.189 174.176 mo(\001)sh331.189 167.4 mo(\001)sh331.189 150.091 mo(\001)sh331.189 30.7337 mo(\001)sh335.868 192.406 mo(\001)sh335.868 192.364 mo(\001)sh335.868 192.321 mo(\001)sh335.868 192.277 mo(\001)sh335.868 192.231 mo(\001)sh335.868 192.183 mo(\001)sh335.868 192.134 mo(\001)sh335.868 192.083 mo(\001)sh335.868 192.031 mo(\001)sh335.868 191.976 mo(\001)sh335.868 191.92 mo(\001)sh335.868 191.861 mo(\001)sh335.868 191.8 mo(\001)sh335.868 191.736 mo(\001)sh335.868 191.67 mo(\001)sh335.868 191.601 mo(\001)sh335.868 191.528 mo(\001)sh335.868 191.452 mo(\001)sh335.868 191.373 mo(\001)sh335.868 191.289 mo(\001)sh335.868 191.201 mo(\001)sh335.868 191.109 mo(\001)sh335.868 191.011 mo(\001)sh335.868 190.907 mo(\001)sh335.868 190.797 mo(\001)sh335.868 190.68 mo(\001)sh335.868 190.555 mo(\001)sh335.868 190.421 mo(\001)sh335.868 190.277 mo(\001)sh335.868 190.121 mo(\001)sh335.868 189.953 mo(\001)sh335.868 189.77 mo(\001)sh335.868 189.569 mo(\001)sh335.868 189.348 mo(\001)sh335.868 189.103 mo(\001)sh335.868 188.83 mo(\001)sh335.868 188.521 mo(\001)sh335.868 188.17 mo(\001)sh335.868 187.765 mo(\001)sh335.868 187.291 mo(\001)sh335.868 186.726 mo(\001)sh335.868 186.038 mo(\001)sh335.868 185.176 mo(\001)sh335.868 184.053 mo(\001)sh335.868 182.513 mo(\001)sh335.868 180.253 mo(\001)sh335.868 176.599 mo(\001)sh335.868 169.708 mo(\001)sh335.868 152.108 mo(\001)sh335.868 30.7337 mo(\001)sh340.546 195.091 mo(\001)sh340.546 195.049 mo(\001)sh340.546 195.005 mo(\001)sh340.546 194.96 mo(\001)sh340.546 194.913 mo(\001)sh340.546 194.865 mo(\001)sh340.546 194.815 mo(\001)sh340.546 194.764 mo(\001)sh340.546 194.71 mo(\001)sh340.546 194.655 mo(\001)sh340.546 194.597 mo(\001)sh340.546 194.538 mo(\001)sh340.546 194.475 mo(\001)sh340.546 194.411 mo(\001)sh340.546 194.343 mo(\001)sh340.546 194.273 mo(\001)sh340.546 194.199 mo(\001)sh340.546 194.122 mo(\001)sh340.546 194.041 mo(\001)sh340.546 193.956 mo(\001)sh340.546 193.867 mo(\001)sh340.546 193.773 mo(\001)sh340.546 193.673 mo(\001)sh340.546 193.568 mo(\001)sh340.546 193.456 mo(\001)sh340.546 193.337 mo(\001)sh340.546 193.209 mo(\001)sh340.546 193.073 mo(\001)sh340.546 192.927 mo(\001)sh340.546 192.769 mo(\001)sh340.546 192.598 mo(\001)sh340.546 192.411 mo(\001)sh340.546 192.207 mo(\001)sh340.546 191.983 mo(\001)sh340.546 191.734 mo(\001)sh340.546 191.456 mo(\001)sh340.546 191.142 mo(\001)sh340.546 190.785 mo(\001)sh340.546 190.373 mo(\001)sh340.546 189.891 mo(\001)sh340.546 189.317 mo(\001)sh340.546 188.618 mo(\001)sh340.546 187.741 mo(\001)sh340.546 186.599 mo(\001)sh340.546 185.034 mo(\001)sh340.546 182.737 mo(\001)sh340.546 179.022 mo(\001)sh340.546 172.017 mo(\001)sh340.546 154.124 mo(\001)sh340.546 30.7337 mo(\001)shgrestore
gsave
344 197.198 mo
350 197.198 li
350 192.198 li
344 192.198 li
cp
clp
.895628 .7673 0 0 cmyk
RQARXA+Mathematica3*1 [5 0 0 -5 0 0 ]msf345.224 197.777 mo(\001)shgrestore
gsave
344 197.198 mo
350 197.198 li
350 191.198 li
344 191.198 li
cp
clp
.895628 .7673 0 0 cmyk
RQARXA+Mathematica3*1 [5 0 0 -5 0 0 ]msf345.224 197.734 mo(\001)sh345.224 197.689 mo(\001)sh345.224 197.643 mo(\001)sh345.224 197.596 mo(\001)sh345.224 197.547 mo(\001)sh345.224 197.496 mo(\001)sh345.224 197.444 mo(\001)sh345.224 197.39 mo(\001)sh345.224 197.333 mo(\001)sh345.224 197.275 mo(\001)sh345.224 197.214 mo(\001)sh345.224 197.151 mo(\001)sh345.224 197.085 mo(\001)shgrestore
gsave
0 250.865 mo
360 250.865 li
360 13.8651 li
0 13.8651 li
cp
clp
.895628 .7673 0 0 cmyk
RQARXA+Mathematica3*1 [5 0 0 -5 0 0 ]msf345.224 197.017 mo(\001)sh345.224 196.945 mo(\001)sh345.224 196.87 mo(\001)sh345.224 196.792 mo(\001)sh345.224 196.71 mo(\001)sh345.224 196.623 mo(\001)sh345.224 196.532 mo(\001)sh345.224 196.437 mo(\001)sh345.224 196.336 mo(\001)sh345.224 196.228 mo(\001)sh345.224 196.115 mo(\001)sh345.224 195.993 mo(\001)sh345.224 195.864 mo(\001)sh345.224 195.726 mo(\001)sh345.224 195.577 mo(\001)sh345.224 195.416 mo(\001)sh345.224 195.243 mo(\001)sh345.224 195.053 mo(\001)sh345.224 194.846 mo(\001)sh345.224 194.618 mo(\001)sh345.224 194.365 mo(\001)sh345.224 194.082 mo(\001)sh345.224 193.763 mo(\001)sh345.224 193.4 mo(\001)sh345.224 192.982 mo(\001)sh345.224 192.492 mo(\001)sh345.224 191.909 mo(\001)sh345.224 191.198 mo(\001)sh345.224 190.307 mo(\001)sh345.224 189.146 mo(\001)sh345.224 187.555 mo(\001)sh345.224 185.22 mo(\001)sh345.224 181.445 mo(\001)sh345.224 174.325 mo(\001)sh345.224 156.14 mo(\001)sh345.224 30.734 mo(\001)shgrestore
gsave
0 250.865 mo
360 250.865 li
360 14.198 li
0 14.198 li
cp
clp
1.764 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
349.98 196.745 mo
56.04 196.745 li
56.04 196.745 mo
56.04 15.08 li
56.04 15.08 mo
349.98 15.08 li
349.98 15.08 mo
349.98 196.745 li
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
0 250.865 mo
360 250.865 li
360 13.8651 li
0 13.8651 li
cp
clp
1.764 lw
0 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
56.04 196.745 mo
56.04 193.264 li
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: GDTAAA+Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /GDTAAA+Times-Roman def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXB+Times-Roman /GDTAAA+Times-Roman findfont ct_VMDictPut/RQARXB+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero 207{/.notdef}rp]RQARXB+Times-Roman nfRQARXB+Times-Roman*1 [16 0 0 -16 0 0 ]msf46.02 214.025 mo(0.0)sh70.737 196.745 mo
70.737 194.656 li
85.434 196.745 mo
85.434 194.656 li
100.131 196.745 mo
100.131 194.656 li
114.828 196.745 mo
114.828 193.264 li
@
%ADOBeginSubsetFont: GDTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARXB+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARXB+Times-Roman /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/RQARXB+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]RQARXB+Times-Roman nfRQARXB+Times-Roman*1 [16 0 0 -16 0 0 ]msf104.808 214.025 mo(0.2)sh129.525 196.745 mo
129.525 194.656 li
144.222 196.745 mo
144.222 194.656 li
158.919 196.745 mo
158.919 194.656 li
173.616 196.745 mo
173.616 193.264 li
@
%ADOBeginSubsetFont: GDTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARXB+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARXB+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/RQARXB+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]RQARXB+Times-Roman nfRQARXB+Times-Roman*1 [16 0 0 -16 0 0 ]msf163.596 214.025 mo(0.4)sh188.313 196.745 mo
188.313 194.656 li
203.01 196.745 mo
203.01 194.656 li
217.707 196.745 mo
217.707 194.656 li
232.404 196.745 mo
232.404 193.264 li
@
%ADOBeginSubsetFont: GDTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARXB+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARXB+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/RQARXB+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]RQARXB+Times-Roman nfRQARXB+Times-Roman*1 [16 0 0 -16 0 0 ]msf222.384 214.025 mo(0.6)sh247.101 196.745 mo
247.101 194.656 li
261.798 196.745 mo
261.798 194.656 li
276.495 196.745 mo
276.495 194.656 li
291.192 196.745 mo
291.192 193.264 li
@
%ADOBeginSubsetFont: GDTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARXB+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARXB+Times-Roman /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/RQARXB+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]RQARXB+Times-Roman nfRQARXB+Times-Roman*1 [16 0 0 -16 0 0 ]msf281.172 214.025 mo(0.8)sh305.889 196.745 mo
305.889 194.656 li
320.586 196.745 mo
320.586 194.656 li
335.283 196.745 mo
335.283 194.656 li
349.98 196.745 mo
349.98 193.264 li
@
%ADOBeginSubsetFont: GDTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARXB+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARXB+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/RQARXB+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]RQARXB+Times-Roman nfRQARXB+Times-Roman*1 [16 0 0 -16 0 0 ]msf339.96 214.025 mo(1.0)sh56.04 168.796 mo
59.521 168.796 li
@
RQARXB+Times-Roman*1 [16 0 0 -16 0 0 ]msf33 174.016 mo(0.4)sh56.04 29.054 mo
59.521 29.054 li
@
%ADOBeginSubsetFont: GDTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARXB+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARXB+Times-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/RQARXB+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]RQARXB+Times-Roman nfRQARXB+Times-Roman*1 [16 0 0 -16 0 0 ]msf33 34.274 mo(0.5)sh%ADOBeginSubsetFont: XUCQMX+Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /XUCQMX+Times-Italic def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 86 /V putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/V <1C60D8A8C9B7D8BE3608624D2E2C88F5CF4A70D70F922254294D4246E4992890E83912C9D277D839E8549B7E23CB1C1DB720D7BF2ED2D492CC859DBA8E17665B85A68E7999B2A89726750B2B5414E8362200332AF4E80BD3F832BC7BBE3202B23A5B0AFC0583925A8233FF3358669834B822CFD7B900D78F2BFCBB39D4AD42C8121D36> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXC+Times-Italic /XUCQMX+Times-Italic findfont ct_VMDictPut/RQARXC+Times-Italic*1 [86{/.notdef}rp /V 169{/.notdef}rp]RQARXC+Times-Italic nfRQARXC+Times-Italic*1 [24 0 0 -24 0 0 ]msf188.1 245.465 mo(V)sh196.968 227.045 mo
189.48 227.045 li
189.48 228.006 li
207.428 228.006 li
207.428 227.045 li
199.94 227.045 li
ef
%ADOBeginSubsetFont: XDOQMX+Mathematica1 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /XDOQMX+Mathematica1 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Nu putdup 2 /Omega putdef/UniqueID 5095641 def/FontBBox {-120 -220 1544 923} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 -0 444 468 662 677] def/OtherBlues [-209 -203] def/BlueScale 0.0416717 def/StdHW [105.845] def/StdVW [74.4189] def/StemSnapH [65.5429 105.845] def/StemSnapV [58.4069 74.4189] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Nu <1C60D8A8C9B74F36160043BEECF3E5C758D2EB92BB98F2DD9E5E4E0C64312697868A81EFF17CA27779B07D119653AAB4FB5FCDACB27D7A6D0A0C677900F63C1C06D8A7F522CDE1DF369F1BEA9C4651B8F3FA7AF9408821317A3ED4B87474DC2D8AFDD73D546F0920BFFC62A21A50FA2FC1E8621C> |-/Omega <1C60D8A8C9B6269C545E80EBD2C5AF738CF9980B8999FEEF1136515CC36CE92F099B7CB37D440E68058AC72D651E96090932C94688C77020047990EDFD8A8487DBF248A19E7A587CB1915E4F80777FB1B5B6589590F4907D0324D921DD008CB510361571F752E52BDAF1E8411823CD7BB55F03A7B6913B5C3227CCFFA08BC6EF7C834C59D611AA9F45BD08998BD205D977FDB72D1582EB5E4A8827B59E5AA41E192D5DB17C1814F060> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXD+Mathematica1 /XDOQMX+Mathematica1 findfont ct_VMDictPut/RQARXD+Mathematica1*1 [/.notdef /Nu /Omega 253{/.notdef}rp]RQARXD+Mathematica1 nfRQARXD+Mathematica1*1 [24 0 0 -24 0 0 ]msf206.88 245.465 mo(\001)shRQARXD+Mathematica1*1 [0 -24 -24 0 0 0 ]msf21.6 130.282 mo(\002)sh%ADOBeginSubsetFont: AILQMX+Mathematica2 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /AILQMX+Mathematica2 def/FontInfo 6 dict dup begin/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /Slash1 putdef/UniqueID 5095653 def/FontBBox {-13 -4075 2499 2436} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-587 -586 888 893] def/BlueScale 0.199996 def/StdHW [0] def/StdVW [0] def/StemSnapH [0] def/StemSnapV [0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/Slash1 <1C60D8A8C9B82F05F6484DDAF768983B429CE2BE2E9BAF7B> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXE+Mathematica2 /AILQMX+Mathematica2 findfont ct_VMDictPut/RQARXE+Mathematica2*1 [/.notdef /Slash1 254{/.notdef}rp]RQARXE+Mathematica2 nfRQARXE+Mathematica2*1 [0 -24 -24 0 0 0 ]msf21.6 113.722 mo(\001)shRQARXD+Mathematica1*1 [0 -24 -24 0 0 0 ]msf21.6 106.162 mo(\002)sh%ADOBeginSubsetFont: XUCQMX+Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginRQARXC+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-systemdict /gcheck known {setglobal} if end {end} ifendRQARXC+Times-Italic /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/RQARXC+Times-Italic*1 [86{/.notdef}rp /V 12{/.notdef}rp /c 156{/.notdef}rp]RQARXC+Times-Italic nfRQARXC+Times-Italic*1 [0 -17.04 -17.04 0 0 0 ]msf25.38 89.602 mo(c)shgrestore
gsave
67.4782 140.134 mo
171.16 140.134 li
171.16 120.655 li
67.4782 120.655 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: UPLRMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /UPLRMX+CMMI10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 69 /E putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437929 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D239BCB61DC78D83A8F223F832> |-/E <1C60D8A8C9B6177404106CAF965141780A3169E0E51FB498B39631979289FE59D7C56480822ECDA6B9254C24924A8B73A24155F39A737A9244DC782D8C6A6A3BD0A905E5D1F011649259A74E1CAD29A1D8E72F81F09B4C7EECA4FFCFAEB3B1E6346CD6A3D954E38DE31F2A1F351DE9C3279D3BD0707BFECC7B59C010693956FA43F9D76D2D5AE29B7B4A7BC612A50EB461CD1514B7B648A599EA86165FA5A4E003B2D394C7C044D03DD15C624FCCA439C3E5318F9E4A407BDFE3B43DC9F7E49965BBD7AE8C3EB73C6B79F04E8C58C59F20EF8F521424F93F0641BD42D5E61E58F889154054E7C906D96931054DD69096ED84D5E307FCA9D9C16C1D12FD79> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXF+CMMI10 /UPLRMX+CMMI10 findfont ct_VMDictPut/RQARXF+CMMI10*1 [46{/.notdef}rp /period 22{/.notdef}rp /E 186{/.notdef}rp]RQARXF+CMMI10 nfRQARXF+CMMI10*1 [22.537 0 0 -22.5371 0 0 ]msf66.7836 136.143 mo(E)sh%ADOBeginSubsetFont: YGLBAA+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /YGLBAA+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 90 /Z putdup 99 /c putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/Z <1C60D8A8C9B6FF86896B7328288CDE91291009136DE2797A54CC6CD7C8C592B625D81665476F5AE4FBA2ADD40B65182181142DE0B2FF353582277FB273288944873BB5B2BA1620C6F4F13E3C21F36874AD2EB970ABB54635802E69D40E131F8E886F40FAB7BF5E47BBEFE90C4F7B5DA3C6D4D2CD0279281512C1D9AAF46AF5778DE96162B409D02743D372A2159A94DD1F> |-/c <1C60D8A8C9B7BDE3EC3ABB5B9E4D77D5F4B7CF1A9A1589B92953F9542F6EA00667346ED0079A977D3E8084C8E03FCE1586ECB7D09BC0B53B8E4D0440EBD003F28C32C50BBFE460E69C243E05D30C001A3416E896635514B4ED69008FA242430B0A7C0680C332412646B1EA5BC4F5CAE570E1D93C518FF1CD01E6CF> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXG+CMMI7 /YGLBAA+CMMI7 findfont ct_VMDictPut/RQARXG+CMMI7*1 [90{/.notdef}rp /Z 8{/.notdef}rp /c 156{/.notdef}rp]RQARXG+CMMI7 nfRQARXG+CMMI7*1 [15.7758 0 0 -15.7759 0 0 ]msf83.4195 139.525 mo(Z)sh%ADOBeginSubsetFont: MHOQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /MHOQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 53 /five putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA257DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CBF9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB77472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXH+CMR10 /MHOQMX+CMR10 findfont ct_VMDictPut/RQARXH+CMR10*1 [48{/.notdef}rp /zero 4{/.notdef}rp /five 7{/.notdef}rp /equal 194{/.notdef}rp]RQARXH+CMR10 nfRQARXH+CMR10*1 [22.537 0 0 -22.5371 0 0 ]msf100.435 136.143 mo(=0)[20.0306 0 ]xshRQARXF+CMMI10*1 [22.537 0 0 -22.5371 0 0 ]msf131.737 136.143 mo(.)shRQARXH+CMR10*1 [22.537 0 0 -22.5371 0 0 ]msf137.998 136.143 mo(5)sh%ADOBeginSubsetFont: BLVBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /BLVBAA+CMMI10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /omega putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437929 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/omega <1C60D8A8C9B663CCDCD38BB615B5A9927D0AC8F3BEF99308F53E6E11EF6FDEC2A41598615AD97858C1C11CB2852335C8D037EC343F7FB2C8BB19CE76FD6F3CFC450758B31E07C66BA64F6059F9713685D367F90360A0A6D6D36DC65850B1914FCA760767E999EE65C6CD28F426EBA0E29CA50A7962F3BDF64398160F81EDCC71E779153676C2979CD0C26D1D704FD8A8A9077DF794C92C4969318F1308BFC9C44847FB6EBD1C8DAB4B80C252D428DD48E8F0> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXI+CMMI10 /BLVBAA+CMMI10 findfont ct_VMDictPut/RQARXI+CMMI10*1 [127{/.notdef}rp /omega 128{/.notdef}rp]RQARXI+CMMI10 nfRQARXI+CMMI10*1 [22.537 0 0 -22.5371 0 0 ]msf149.266 136.143 mo(\177)shRQARXG+CMMI7*1 [15.7758 0 0 -15.7759 0 0 ]msf163.294 139.525 mo(c)shgrestore
gsave
72.3801 174.191 mo
145.361 174.191 li
145.361 153.991 li
72.3801 153.991 li
cp
clp
0 0 0 1 cmyk
%ADOBeginSubsetFont: ISTQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /ISTQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 78 /N putdef/UniqueID 5087385 def/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/N <1C60D8A8C9B6D671D38ABEF2C3AA4E9EF85233BCD577CC743D9BB72B06D1C34EFFA73A8EEC485E47CB4255799230CE3B52ECA9DACF132C28D5023DE40AA93657FA765A68F9927890D6A99C6ADF1E426E5FE9E35D2F713DB32E49B7FA52859C2DFDFC8F7B5800FF94410ECD75C51D563B72E4CE7BF6A0DA5B3E0B6FCD8798546F59FCAF14A879752BEB0E6C22EAB4A84FE3B041C4B97C68333C4FFAD5D2E857731FA926D2CD6D6B1870856FC4382AD902F4984DB02DEAEC75932D49CD323CFF2FF5AF76629AD4B11E478073E034E2B4E9B43505D56042DA33A6E78FEA4BCD4A0F11525678055021280A500CE9ADDA6E49D3632C3DA6662AF4C4449F02> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXJ+CMMI10 /ISTQMX+CMMI10 findfont ct_VMDictPut/RQARXJ+CMMI10*1 [78{/.notdef}rp /N 177{/.notdef}rp]RQARXJ+CMMI10 nfRQARXJ+CMMI10*1 [23.3704 0 0 -23.3703 0 0 ]msf72.1236 170.052 mo(N)sh%ADOBeginSubsetFont: WXDQMX+CMMI7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /WXDQMX+CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 116 /t putdef/UniqueID 5087382 def/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [81] def/StemSnapH [32 36] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/t <1C60D8A8C9B76C9024B562E6ACACC3BBFBFEA0392D5F04472FA97061AAE4DC52A3F98A11D8D54F25E4E1258444AF5132275DA6C5E3D0885B5B2A4654CEE34242292B9FEE69B16E5DD8A918634DD3321B8DE0F4A8FC34CE141D352DCEC7C4316AD4FCDE9B4AA88B17F80EB64AF3D0551FB1E213394E362152BE7414F5D1A1399F0E6D948396CBDF7FCCB9AE5C344B> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXK+CMMI7 /WXDQMX+CMMI7 findfont ct_VMDictPut/RQARXK+CMMI7*1 [116{/.notdef}rp /t 139{/.notdef}rp]RQARXK+CMMI7 nfRQARXK+CMMI7*1 [16.3592 0 0 -16.3592 0 0 ]msf90.9019 173.559 mo(t)sh%ADOBeginSubsetFont: PAOQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /PAOQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 53 /five putdup 61 /equal putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA257DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CBF9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB77472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXL+CMR10 /PAOQMX+CMR10 findfont ct_VMDictPut/RQARXL+CMR10*1 [48{/.notdef}rp /zero 4{/.notdef}rp /five 7{/.notdef}rp /equal 194{/.notdef}rp]RQARXL+CMR10 nfRQARXL+CMR10*1 [23.3704 0 0 -23.3703 0 0 ]msf101.725 170.052 mo(=50)[20.7714 11.6852 0 ]xshgrestore
3 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
277.077 61.9123 mo
277.077 30.8893 li
0 0 0 1 cmyk
@
277.078 27.9123 mo
270.532 39.1334 li
270.114 39.849 270.356 40.7675 271.072 41.1849 cv
271.072 41.1849 li
271.787 41.6023 272.706 41.3606 273.123 40.645 cv
273.123 40.645 li
277.078 33.8662 li
281.032 40.645 li
281.449 41.3606 282.368 41.6023 283.083 41.1849 cv
283.083 41.1849 li
283.799 40.7675 284.041 39.849 283.623 39.1334 cv
283.623 39.1334 li
cp
ef
209.32 88.6643 mo
346.213 88.6643 li
346.213 61.7708 li
209.32 61.7708 li
cp
0 0 0 0 cmyk
ef
2.25 lw
209.32 61.7708 mo
346.213 61.7708 li
346.213 88.6643 li
209.32 88.6643 li
cp
0 0 0 1 cmyk
@
gsave
211.411 82.5445 mo
343.139 82.5445 li
343.139 69.1124 li
211.411 69.1124 li
cp
clp
%ADOBeginSubsetFont: GOUPMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /GOUPMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 77 /M putdup 80 /P putdup 99 /c putdup 100 /d putdup 101 /e putdup 105 /i putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdef/UniqueID 5000793 def/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings11 dict dup begin/M <1C60D8A8C9B5BA43AA8567ED4BE2D7FEDF84AA8E4D7C55A5BC42BD34F3277CCBB834BA74F53382342B0BA2F117A667CBDAF558D8C8C6BB52DFE7A951AC7F90B65CE73200D87C871483BCDABA867EF53CF58D923A6435A91070A9B8C57E2AC8D8757C5081292709B14AABF10DF398DAFB85ADC1EBF2FD6188FF6384A9B0EC88ED9C3C67FD1369FE1E51586F85AE8474F281CA47693B25D9154D6F07941252F00CFCC0ABAA961F75FE6F08A5C67C2DA703A2BABBD58AEB6A91D6EEBE96274043928EF3E9FBCB3DB234E95B1AF126B5BCE1E952BBBFAD047E0EA18D4396EBF2025C72> |-/P <1C60D8A8C9B65DE708408E897D8681FFF528127AC4B20DABDE3694037FF5C7CFF0F66599746818E44A88AE051EAA2ECC64A7F63066296DF5B94E5374A79101894F634254EBF61BB4676A0F5F95AD513AF7507835F91BBF2F6DB05C1913602214DC0C07048AC9F398A5400FC635BC3D7BE839FD2C9EAE0EFA08945ECA8DA23D80132909A7B4597A38120CAB750515AE457C3E49AB6D8454> |-/c <1C60D8A8C9B77FE2B98B448AAC15CD6088822B1EF090F0AF6EBCC9DDBBDBF65EF50E59DA466BEF0FA242351362893C7564E99AEB6F42CD9ABC234329EBDD53E590403FF06858A28FE170B71597883CA2148468202C6DAD0EC83B55607026EDF229F6C24FEC7F46E5F53E3632239AC20591F5D1A939BB80017E6C55D3D86751973D2E06541F43DD3086EAE96863ECE0301F79F72109AFDFA112C3A8> |-/d <1C60D8A8C9B790A8362C570CE7DC14ED8339A5DD8D37983A5A2D0B4F515EB70692477F5F548E28F1DCAB41EDF4BA0728DAF245495BE02E394B0DD240B5D55EE51A3675003CB15BB911F900B1E5DDC9F583E654C623831C440B91AF47A14F90BB1788AEF8D63BB1C09A0DFFCC46AF6B9E95BF92169FAA4D5042B81ADB2768FDD695BCD7BA015B086BADFFD844444D05A45C7E170A2C8460474939E15E0EBABF1131915EE0697E92536E40A464505CA536EC3A6940E2FEEC193EC0EB65C18399A9D9> |-/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A778A9834F3ED148EF8C2095ABE60FC1B26DBB94057B63BED2BEE770D96BCB613AAAF017CD18C97CCA61C46589119EDD299B58A1852EFEBDB7EF2A6D8606D19DEFCD13B1531BE3098F0C00520EFD32FA435A0514B86269DFF5EE650657E526962BA2F3447589A03D4DA2371542253C2A1E1B028917A1E5> |-/i <1C60D8A8C9B8574464F1B435BC57209FEB2C54026A3BBB707C1ACEEAD444C0BCD7940801068D7665A567CBC52ABA43208AF37F075A1C65586B76611081AB5310CF42CD496B0F8F59766AFDA0C4BF40BC709402C0DD0AB42B4F3987C50B5617CF3B4859C86132A1A7E65B42225B2228E50B44DBFBE367ABD36EBF02ACAD4FB895EE90259DCAEBCEFB9765574F> |-/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C62B9F0F0BD9624AAEAC8EB33D804BC103BF4C84F8FCB252709B3422B4E5F4D698E79D5531B2BC676C0D12EEB603C056C169F17DCC9F0F6AC43F292D82458847D2D279D19F466EA84C7027B712BFD7C4B4B770C9E0BD2D556C526F95495C91C927B8F7463DFDACF3970984B31C39C074ECA243D9C8BFA10955B7D910908799AA616A425B937E17FF6121AD71909EE5D3B89CA2D13AAC585FB6F54A794E7F44844B39E96B6AE21032D420B68967AC9AC0F0DA0D53B8016F26EED527CB2387F1592BCDB6A91E073E83C3181BD7505792D4855E> |-/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDFC5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-/r <1C60D8A8C9B734780FC88FD3B21DF573DE0BD8E19ECF409327C58E3627DF4B64D82C290E296AD12D16F3BDD53C90C5D592551EDF5E8C7E8FE6B97498610F068FB40EF014C6896F922B40CC34CEEEFE16781389974FD1D8010C3A1B93DA9423D6C4280D86498AD092998E974DDACA1FA3CA4F3751905AC346A3F69D4682194D3342733C7CF3000C654F8E9DE159A2316F10B36E49A0996D15FEF4DE5D84332102ECD35D818CF4C1F221D14DB48C0FB5BD30A2> |-/s <1C60D8A8C9B731071688E37ED9B7C64FA956A3F4F3785F4130685F1AE6ECB30084C557AE5797D39605F849A2D9ADE2A65CA0927636C7629B25FDC4D569E897F36515E172780EBFB2CFAF71CF0EA8B4DD392E776CF20E7204D59F8DC03F56CB4421E12FE8430EBD29CFDF5F6509E086EB0664E99116F88F2D5E9A8F8E96C847773BE6B8B90D0A0CCE846E18C0A1DF77A626724C95EC9E6FDFE55022CAFC8918AE45838B303979E3A9BFE7F7BDAB73505805005500EF4C5AC6405B1E840CF1B619C716D89CA7E80EEDEA1B928C67F7A10B24DE3EC254855DAC8B83797B28> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RQARXM+CMR10 /GOUPMX+CMR10 findfont ct_VMDictPut/RQARXM+CMR10*1 [77{/.notdef}rp /M 2{/.notdef}rp /P 18{/.notdef}rp /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s 140{/.notdef}rp]RQARXM+CMR10 nfRQARXM+CMR10*1 [18.5273 0 0 -18.5289 0 0 ]msf210.985 82.1556 mo(PrecessionMode)[12.6096 7.25726 8.23346 8.23358 8.23352 7.30713 7.30713 5.14673 9.26367 13.3876 16.984 9.76392 10.2936 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/RQARXH+CMR10*1 uf/RQARXH+CMR10 uf/MHOQMX+CMR10 uf/RQARXB+Times-Roman*1 uf/RQARXB+Times-Roman uf/GDTAAA+Times-Roman uf/RQARXJ+CMMI10*1 uf/RQARXJ+CMMI10 uf/ISTQMX+CMMI10 uf/RQARXF+CMMI10*1 uf/RQARXF+CMMI10 uf/UPLRMX+CMMI10 uf/RQARXD+Mathematica1*1 uf/RQARXD+Mathematica1 uf/XDOQMX+Mathematica1 uf/RQARXG+CMMI7*1 uf/RQARXG+CMMI7 uf/YGLBAA+CMMI7 uf/RQARXL+CMR10*1 uf/RQARXL+CMR10 uf/PAOQMX+CMR10 uf/RQARXM+CMR10*1 uf/RQARXM+CMR10 uf/GOUPMX+CMR10 uf/RQARXA+Mathematica3*1 uf/RQARXA+Mathematica3 uf/XLCRMX+Mathematica3 uf/RQARXC+Times-Italic*1 uf/RQARXC+Times-Italic uf/XUCQMX+Times-Italic uf/RQARXE+Mathematica2*1 uf/RQARXE+Mathematica2 uf/AILQMX+Mathematica2 uf/RQARXK+CMMI7*1 uf/RQARXK+CMMI7 uf/WXDQMX+CMMI7 uf/RQARXI+CMMI10*1 uf/RQARXI+CMMI10 uf/BLVBAA+CMMI10 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
